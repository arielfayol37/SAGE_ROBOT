
SAGE_STM_Code_Valpo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  0800e3b0  0800e3b0  0000f3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecbc  0800ecbc  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ecbc  0800ecbc  0000fcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecc4  0800ecc4  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecc4  0800ecc4  0000fcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ecc8  0800ecc8  0000fcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800eccc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200001d4  0800eea0  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800eea0  000105a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015805  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1e  00000000  00000000  00025a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00028520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f40  00000000  00000000  00029868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e21e  00000000  00000000  0002a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b7d  00000000  00000000  000489c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c19bf  00000000  00000000  00060543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  00121f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00127b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e394 	.word	0x0800e394

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800e394 	.word	0x0800e394

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f002 f94d 	bl	80026d8 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f002 f891 	bl	8002570 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f002 f93f 	bl	80026d8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f935 	bl	80026d8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f8bb 	bl	80025f8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f8b1 	bl	80025f8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fcaf 	bl	8000e10 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fc37 	bl	8000d30 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fca1 	bl	8000e10 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc97 	bl	8000e10 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc45 	bl	8000d80 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc3b 	bl	8000d80 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	@ (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f81e 	bl	8000588 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_f2uiz>:
 8000558:	219e      	movs	r1, #158	@ 0x9e
 800055a:	b510      	push	{r4, lr}
 800055c:	05c9      	lsls	r1, r1, #23
 800055e:	1c04      	adds	r4, r0, #0
 8000560:	f7ff ffd0 	bl	8000504 <__aeabi_fcmpge>
 8000564:	2800      	cmp	r0, #0
 8000566:	d103      	bne.n	8000570 <__aeabi_f2uiz+0x18>
 8000568:	1c20      	adds	r0, r4, #0
 800056a:	f001 f86d 	bl	8001648 <__aeabi_f2iz>
 800056e:	bd10      	pop	{r4, pc}
 8000570:	219e      	movs	r1, #158	@ 0x9e
 8000572:	1c20      	adds	r0, r4, #0
 8000574:	05c9      	lsls	r1, r1, #23
 8000576:	f000 fded 	bl	8001154 <__aeabi_fsub>
 800057a:	f001 f865 	bl	8001648 <__aeabi_f2iz>
 800057e:	2380      	movs	r3, #128	@ 0x80
 8000580:	061b      	lsls	r3, r3, #24
 8000582:	469c      	mov	ip, r3
 8000584:	4460      	add	r0, ip
 8000586:	e7f2      	b.n	800056e <__aeabi_f2uiz+0x16>

08000588 <__udivmoddi4>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4657      	mov	r7, sl
 800058c:	464e      	mov	r6, r9
 800058e:	4645      	mov	r5, r8
 8000590:	46de      	mov	lr, fp
 8000592:	b5e0      	push	{r5, r6, r7, lr}
 8000594:	0004      	movs	r4, r0
 8000596:	000d      	movs	r5, r1
 8000598:	4692      	mov	sl, r2
 800059a:	4699      	mov	r9, r3
 800059c:	b083      	sub	sp, #12
 800059e:	428b      	cmp	r3, r1
 80005a0:	d830      	bhi.n	8000604 <__udivmoddi4+0x7c>
 80005a2:	d02d      	beq.n	8000600 <__udivmoddi4+0x78>
 80005a4:	4649      	mov	r1, r9
 80005a6:	4650      	mov	r0, sl
 80005a8:	f003 f8c2 	bl	8003730 <__clzdi2>
 80005ac:	0029      	movs	r1, r5
 80005ae:	0006      	movs	r6, r0
 80005b0:	0020      	movs	r0, r4
 80005b2:	f003 f8bd 	bl	8003730 <__clzdi2>
 80005b6:	1a33      	subs	r3, r6, r0
 80005b8:	4698      	mov	r8, r3
 80005ba:	3b20      	subs	r3, #32
 80005bc:	d434      	bmi.n	8000628 <__udivmoddi4+0xa0>
 80005be:	469b      	mov	fp, r3
 80005c0:	4653      	mov	r3, sl
 80005c2:	465a      	mov	r2, fp
 80005c4:	4093      	lsls	r3, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	001f      	movs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d83b      	bhi.n	800064c <__udivmoddi4+0xc4>
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d100      	bne.n	80005da <__udivmoddi4+0x52>
 80005d8:	e079      	b.n	80006ce <__udivmoddi4+0x146>
 80005da:	465b      	mov	r3, fp
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5e>
 80005e4:	e076      	b.n	80006d4 <__udivmoddi4+0x14c>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	465a      	mov	r2, fp
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4642      	mov	r2, r8
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e029      	b.n	8000654 <__udivmoddi4+0xcc>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9cf      	bls.n	80005a4 <__udivmoddi4+0x1c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8e>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b003      	add	sp, #12
 800061c:	bcf0      	pop	{r4, r5, r6, r7}
 800061e:	46bb      	mov	fp, r7
 8000620:	46b2      	mov	sl, r6
 8000622:	46a9      	mov	r9, r5
 8000624:	46a0      	mov	r8, r4
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	4642      	mov	r2, r8
 800062a:	469b      	mov	fp, r3
 800062c:	2320      	movs	r3, #32
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4652      	mov	r2, sl
 8000632:	40da      	lsrs	r2, r3
 8000634:	4641      	mov	r1, r8
 8000636:	0013      	movs	r3, r2
 8000638:	464a      	mov	r2, r9
 800063a:	408a      	lsls	r2, r1
 800063c:	0017      	movs	r7, r2
 800063e:	4642      	mov	r2, r8
 8000640:	431f      	orrs	r7, r3
 8000642:	4653      	mov	r3, sl
 8000644:	4093      	lsls	r3, r2
 8000646:	001e      	movs	r6, r3
 8000648:	42af      	cmp	r7, r5
 800064a:	d9c3      	bls.n	80005d4 <__udivmoddi4+0x4c>
 800064c:	2200      	movs	r2, #0
 800064e:	2300      	movs	r3, #0
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0d8      	beq.n	800060c <__udivmoddi4+0x84>
 800065a:	07fb      	lsls	r3, r7, #31
 800065c:	0872      	lsrs	r2, r6, #1
 800065e:	431a      	orrs	r2, r3
 8000660:	4646      	mov	r6, r8
 8000662:	087b      	lsrs	r3, r7, #1
 8000664:	e00e      	b.n	8000684 <__udivmoddi4+0xfc>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d101      	bne.n	800066e <__udivmoddi4+0xe6>
 800066a:	42a2      	cmp	r2, r4
 800066c:	d80c      	bhi.n	8000688 <__udivmoddi4+0x100>
 800066e:	1aa4      	subs	r4, r4, r2
 8000670:	419d      	sbcs	r5, r3
 8000672:	2001      	movs	r0, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2100      	movs	r1, #0
 800067a:	3e01      	subs	r6, #1
 800067c:	1824      	adds	r4, r4, r0
 800067e:	414d      	adcs	r5, r1
 8000680:	2e00      	cmp	r6, #0
 8000682:	d006      	beq.n	8000692 <__udivmoddi4+0x10a>
 8000684:	42ab      	cmp	r3, r5
 8000686:	d9ee      	bls.n	8000666 <__udivmoddi4+0xde>
 8000688:	3e01      	subs	r6, #1
 800068a:	1924      	adds	r4, r4, r4
 800068c:	416d      	adcs	r5, r5
 800068e:	2e00      	cmp	r6, #0
 8000690:	d1f8      	bne.n	8000684 <__udivmoddi4+0xfc>
 8000692:	9800      	ldr	r0, [sp, #0]
 8000694:	9901      	ldr	r1, [sp, #4]
 8000696:	465b      	mov	r3, fp
 8000698:	1900      	adds	r0, r0, r4
 800069a:	4169      	adcs	r1, r5
 800069c:	2b00      	cmp	r3, #0
 800069e:	db24      	blt.n	80006ea <__udivmoddi4+0x162>
 80006a0:	002b      	movs	r3, r5
 80006a2:	465a      	mov	r2, fp
 80006a4:	4644      	mov	r4, r8
 80006a6:	40d3      	lsrs	r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	40e2      	lsrs	r2, r4
 80006ac:	001c      	movs	r4, r3
 80006ae:	465b      	mov	r3, fp
 80006b0:	0015      	movs	r5, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db2a      	blt.n	800070c <__udivmoddi4+0x184>
 80006b6:	0026      	movs	r6, r4
 80006b8:	409e      	lsls	r6, r3
 80006ba:	0033      	movs	r3, r6
 80006bc:	0026      	movs	r6, r4
 80006be:	4647      	mov	r7, r8
 80006c0:	40be      	lsls	r6, r7
 80006c2:	0032      	movs	r2, r6
 80006c4:	1a80      	subs	r0, r0, r2
 80006c6:	4199      	sbcs	r1, r3
 80006c8:	9000      	str	r0, [sp, #0]
 80006ca:	9101      	str	r1, [sp, #4]
 80006cc:	e79e      	b.n	800060c <__udivmoddi4+0x84>
 80006ce:	42a3      	cmp	r3, r4
 80006d0:	d8bc      	bhi.n	800064c <__udivmoddi4+0xc4>
 80006d2:	e782      	b.n	80005da <__udivmoddi4+0x52>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	9100      	str	r1, [sp, #0]
 80006e0:	9201      	str	r2, [sp, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	40da      	lsrs	r2, r3
 80006e6:	9201      	str	r2, [sp, #4]
 80006e8:	e785      	b.n	80005f6 <__udivmoddi4+0x6e>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2320      	movs	r3, #32
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	002a      	movs	r2, r5
 80006f2:	4646      	mov	r6, r8
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0023      	movs	r3, r4
 80006f8:	40f3      	lsrs	r3, r6
 80006fa:	4644      	mov	r4, r8
 80006fc:	4313      	orrs	r3, r2
 80006fe:	002a      	movs	r2, r5
 8000700:	40e2      	lsrs	r2, r4
 8000702:	001c      	movs	r4, r3
 8000704:	465b      	mov	r3, fp
 8000706:	0015      	movs	r5, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	dad4      	bge.n	80006b6 <__udivmoddi4+0x12e>
 800070c:	4642      	mov	r2, r8
 800070e:	002f      	movs	r7, r5
 8000710:	2320      	movs	r3, #32
 8000712:	0026      	movs	r6, r4
 8000714:	4097      	lsls	r7, r2
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	40de      	lsrs	r6, r3
 800071a:	003b      	movs	r3, r7
 800071c:	4333      	orrs	r3, r6
 800071e:	e7cd      	b.n	80006bc <__udivmoddi4+0x134>

08000720 <__aeabi_fadd>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	024b      	lsls	r3, r1, #9
 8000724:	0a5a      	lsrs	r2, r3, #9
 8000726:	4694      	mov	ip, r2
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	46ce      	mov	lr, r9
 800072e:	4647      	mov	r7, r8
 8000730:	4689      	mov	r9, r1
 8000732:	0045      	lsls	r5, r0, #1
 8000734:	0246      	lsls	r6, r0, #9
 8000736:	0e2d      	lsrs	r5, r5, #24
 8000738:	0e12      	lsrs	r2, r2, #24
 800073a:	b580      	push	{r7, lr}
 800073c:	0999      	lsrs	r1, r3, #6
 800073e:	0a77      	lsrs	r7, r6, #9
 8000740:	0fc4      	lsrs	r4, r0, #31
 8000742:	09b6      	lsrs	r6, r6, #6
 8000744:	1aab      	subs	r3, r5, r2
 8000746:	454c      	cmp	r4, r9
 8000748:	d020      	beq.n	800078c <__aeabi_fadd+0x6c>
 800074a:	2b00      	cmp	r3, #0
 800074c:	dd0c      	ble.n	8000768 <__aeabi_fadd+0x48>
 800074e:	2a00      	cmp	r2, #0
 8000750:	d134      	bne.n	80007bc <__aeabi_fadd+0x9c>
 8000752:	2900      	cmp	r1, #0
 8000754:	d02a      	beq.n	80007ac <__aeabi_fadd+0x8c>
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	2b01      	cmp	r3, #1
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x3e>
 800075c:	e08f      	b.n	800087e <__aeabi_fadd+0x15e>
 800075e:	2bff      	cmp	r3, #255	@ 0xff
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x44>
 8000762:	e0cd      	b.n	8000900 <__aeabi_fadd+0x1e0>
 8000764:	0013      	movs	r3, r2
 8000766:	e02f      	b.n	80007c8 <__aeabi_fadd+0xa8>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d060      	beq.n	800082e <__aeabi_fadd+0x10e>
 800076c:	1b53      	subs	r3, r2, r5
 800076e:	2d00      	cmp	r5, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x54>
 8000772:	e0ee      	b.n	8000952 <__aeabi_fadd+0x232>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x5a>
 8000778:	e13e      	b.n	80009f8 <__aeabi_fadd+0x2d8>
 800077a:	1e5c      	subs	r4, r3, #1
 800077c:	2b01      	cmp	r3, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x62>
 8000780:	e16b      	b.n	8000a5a <__aeabi_fadd+0x33a>
 8000782:	2bff      	cmp	r3, #255	@ 0xff
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x68>
 8000786:	e0b9      	b.n	80008fc <__aeabi_fadd+0x1dc>
 8000788:	0023      	movs	r3, r4
 800078a:	e0e7      	b.n	800095c <__aeabi_fadd+0x23c>
 800078c:	2b00      	cmp	r3, #0
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fadd+0x72>
 8000790:	e0a4      	b.n	80008dc <__aeabi_fadd+0x1bc>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d069      	beq.n	800086a <__aeabi_fadd+0x14a>
 8000796:	2dff      	cmp	r5, #255	@ 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x7c>
 800079a:	e0b1      	b.n	8000900 <__aeabi_fadd+0x1e0>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	04d2      	lsls	r2, r2, #19
 80007a0:	4311      	orrs	r1, r2
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_fadd+0x88>
 80007a6:	e0e9      	b.n	800097c <__aeabi_fadd+0x25c>
 80007a8:	002b      	movs	r3, r5
 80007aa:	3605      	adds	r6, #5
 80007ac:	08f7      	lsrs	r7, r6, #3
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x94>
 80007b2:	e0a5      	b.n	8000900 <__aeabi_fadd+0x1e0>
 80007b4:	027a      	lsls	r2, r7, #9
 80007b6:	0a52      	lsrs	r2, r2, #9
 80007b8:	b2d8      	uxtb	r0, r3
 80007ba:	e030      	b.n	800081e <__aeabi_fadd+0xfe>
 80007bc:	2dff      	cmp	r5, #255	@ 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xa2>
 80007c0:	e09e      	b.n	8000900 <__aeabi_fadd+0x1e0>
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	04d2      	lsls	r2, r2, #19
 80007c6:	4311      	orrs	r1, r2
 80007c8:	2001      	movs	r0, #1
 80007ca:	2b1b      	cmp	r3, #27
 80007cc:	dc08      	bgt.n	80007e0 <__aeabi_fadd+0xc0>
 80007ce:	0008      	movs	r0, r1
 80007d0:	2220      	movs	r2, #32
 80007d2:	40d8      	lsrs	r0, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4099      	lsls	r1, r3
 80007d8:	000b      	movs	r3, r1
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	4318      	orrs	r0, r3
 80007e0:	1a36      	subs	r6, r6, r0
 80007e2:	0173      	lsls	r3, r6, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fadd+0xc8>
 80007e6:	e071      	b.n	80008cc <__aeabi_fadd+0x1ac>
 80007e8:	01b6      	lsls	r6, r6, #6
 80007ea:	09b7      	lsrs	r7, r6, #6
 80007ec:	0038      	movs	r0, r7
 80007ee:	f002 ff81 	bl	80036f4 <__clzsi2>
 80007f2:	003b      	movs	r3, r7
 80007f4:	3805      	subs	r0, #5
 80007f6:	4083      	lsls	r3, r0
 80007f8:	4285      	cmp	r5, r0
 80007fa:	dd4d      	ble.n	8000898 <__aeabi_fadd+0x178>
 80007fc:	4eb4      	ldr	r6, [pc, #720]	@ (8000ad0 <__aeabi_fadd+0x3b0>)
 80007fe:	1a2d      	subs	r5, r5, r0
 8000800:	401e      	ands	r6, r3
 8000802:	075a      	lsls	r2, r3, #29
 8000804:	d068      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 8000806:	220f      	movs	r2, #15
 8000808:	4013      	ands	r3, r2
 800080a:	2b04      	cmp	r3, #4
 800080c:	d064      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 800080e:	3604      	adds	r6, #4
 8000810:	0173      	lsls	r3, r6, #5
 8000812:	d561      	bpl.n	80008d8 <__aeabi_fadd+0x1b8>
 8000814:	1c68      	adds	r0, r5, #1
 8000816:	2dfe      	cmp	r5, #254	@ 0xfe
 8000818:	d154      	bne.n	80008c4 <__aeabi_fadd+0x1a4>
 800081a:	20ff      	movs	r0, #255	@ 0xff
 800081c:	2200      	movs	r2, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	4310      	orrs	r0, r2
 8000822:	07e4      	lsls	r4, r4, #31
 8000824:	4320      	orrs	r0, r4
 8000826:	bcc0      	pop	{r6, r7}
 8000828:	46b9      	mov	r9, r7
 800082a:	46b0      	mov	r8, r6
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	22fe      	movs	r2, #254	@ 0xfe
 8000830:	4690      	mov	r8, r2
 8000832:	1c68      	adds	r0, r5, #1
 8000834:	0002      	movs	r2, r0
 8000836:	4640      	mov	r0, r8
 8000838:	4210      	tst	r0, r2
 800083a:	d16b      	bne.n	8000914 <__aeabi_fadd+0x1f4>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fadd+0x122>
 8000840:	e0dd      	b.n	80009fe <__aeabi_fadd+0x2de>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x128>
 8000846:	e102      	b.n	8000a4e <__aeabi_fadd+0x32e>
 8000848:	2900      	cmp	r1, #0
 800084a:	d0b3      	beq.n	80007b4 <__aeabi_fadd+0x94>
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	1a77      	subs	r7, r6, r1
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4217      	tst	r7, r2
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x138>
 8000856:	e136      	b.n	8000ac6 <__aeabi_fadd+0x3a6>
 8000858:	464c      	mov	r4, r9
 800085a:	1b8e      	subs	r6, r1, r6
 800085c:	d061      	beq.n	8000922 <__aeabi_fadd+0x202>
 800085e:	2001      	movs	r0, #1
 8000860:	4216      	tst	r6, r2
 8000862:	d130      	bne.n	80008c6 <__aeabi_fadd+0x1a6>
 8000864:	2300      	movs	r3, #0
 8000866:	08f7      	lsrs	r7, r6, #3
 8000868:	e7a4      	b.n	80007b4 <__aeabi_fadd+0x94>
 800086a:	2900      	cmp	r1, #0
 800086c:	d09e      	beq.n	80007ac <__aeabi_fadd+0x8c>
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	2b01      	cmp	r3, #1
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x156>
 8000874:	e0ca      	b.n	8000a0c <__aeabi_fadd+0x2ec>
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d042      	beq.n	8000900 <__aeabi_fadd+0x1e0>
 800087a:	0013      	movs	r3, r2
 800087c:	e791      	b.n	80007a2 <__aeabi_fadd+0x82>
 800087e:	1a71      	subs	r1, r6, r1
 8000880:	014b      	lsls	r3, r1, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fadd+0x166>
 8000884:	e0d1      	b.n	8000a2a <__aeabi_fadd+0x30a>
 8000886:	018f      	lsls	r7, r1, #6
 8000888:	09bf      	lsrs	r7, r7, #6
 800088a:	0038      	movs	r0, r7
 800088c:	f002 ff32 	bl	80036f4 <__clzsi2>
 8000890:	003b      	movs	r3, r7
 8000892:	3805      	subs	r0, #5
 8000894:	4083      	lsls	r3, r0
 8000896:	2501      	movs	r5, #1
 8000898:	2220      	movs	r2, #32
 800089a:	1b40      	subs	r0, r0, r5
 800089c:	3001      	adds	r0, #1
 800089e:	1a12      	subs	r2, r2, r0
 80008a0:	001e      	movs	r6, r3
 80008a2:	4093      	lsls	r3, r2
 80008a4:	40c6      	lsrs	r6, r0
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	4193      	sbcs	r3, r2
 80008aa:	431e      	orrs	r6, r3
 80008ac:	d039      	beq.n	8000922 <__aeabi_fadd+0x202>
 80008ae:	0773      	lsls	r3, r6, #29
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fadd+0x194>
 80008b2:	e11b      	b.n	8000aec <__aeabi_fadd+0x3cc>
 80008b4:	230f      	movs	r3, #15
 80008b6:	2500      	movs	r5, #0
 80008b8:	4033      	ands	r3, r6
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d1a7      	bne.n	800080e <__aeabi_fadd+0xee>
 80008be:	2001      	movs	r0, #1
 80008c0:	0172      	lsls	r2, r6, #5
 80008c2:	d57c      	bpl.n	80009be <__aeabi_fadd+0x29e>
 80008c4:	b2c0      	uxtb	r0, r0
 80008c6:	01b2      	lsls	r2, r6, #6
 80008c8:	0a52      	lsrs	r2, r2, #9
 80008ca:	e7a8      	b.n	800081e <__aeabi_fadd+0xfe>
 80008cc:	0773      	lsls	r3, r6, #29
 80008ce:	d003      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 80008d0:	230f      	movs	r3, #15
 80008d2:	4033      	ands	r3, r6
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d19a      	bne.n	800080e <__aeabi_fadd+0xee>
 80008d8:	002b      	movs	r3, r5
 80008da:	e767      	b.n	80007ac <__aeabi_fadd+0x8c>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d023      	beq.n	8000928 <__aeabi_fadd+0x208>
 80008e0:	1b53      	subs	r3, r2, r5
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d17b      	bne.n	80009de <__aeabi_fadd+0x2be>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x1cc>
 80008ea:	e086      	b.n	80009fa <__aeabi_fadd+0x2da>
 80008ec:	1e5d      	subs	r5, r3, #1
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x1d4>
 80008f2:	e08b      	b.n	8000a0c <__aeabi_fadd+0x2ec>
 80008f4:	2bff      	cmp	r3, #255	@ 0xff
 80008f6:	d002      	beq.n	80008fe <__aeabi_fadd+0x1de>
 80008f8:	002b      	movs	r3, r5
 80008fa:	e075      	b.n	80009e8 <__aeabi_fadd+0x2c8>
 80008fc:	464c      	mov	r4, r9
 80008fe:	4667      	mov	r7, ip
 8000900:	2f00      	cmp	r7, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x1e6>
 8000904:	e789      	b.n	800081a <__aeabi_fadd+0xfa>
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	433a      	orrs	r2, r7
 800090c:	0252      	lsls	r2, r2, #9
 800090e:	20ff      	movs	r0, #255	@ 0xff
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	e784      	b.n	800081e <__aeabi_fadd+0xfe>
 8000914:	1a77      	subs	r7, r6, r1
 8000916:	017b      	lsls	r3, r7, #5
 8000918:	d46b      	bmi.n	80009f2 <__aeabi_fadd+0x2d2>
 800091a:	2f00      	cmp	r7, #0
 800091c:	d000      	beq.n	8000920 <__aeabi_fadd+0x200>
 800091e:	e765      	b.n	80007ec <__aeabi_fadd+0xcc>
 8000920:	2400      	movs	r4, #0
 8000922:	2000      	movs	r0, #0
 8000924:	2200      	movs	r2, #0
 8000926:	e77a      	b.n	800081e <__aeabi_fadd+0xfe>
 8000928:	22fe      	movs	r2, #254	@ 0xfe
 800092a:	1c6b      	adds	r3, r5, #1
 800092c:	421a      	tst	r2, r3
 800092e:	d149      	bne.n	80009c4 <__aeabi_fadd+0x2a4>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x216>
 8000934:	e09f      	b.n	8000a76 <__aeabi_fadd+0x356>
 8000936:	2e00      	cmp	r6, #0
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x21c>
 800093a:	e0ba      	b.n	8000ab2 <__aeabi_fadd+0x392>
 800093c:	2900      	cmp	r1, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fadd+0x222>
 8000940:	e0cf      	b.n	8000ae2 <__aeabi_fadd+0x3c2>
 8000942:	1872      	adds	r2, r6, r1
 8000944:	0153      	lsls	r3, r2, #5
 8000946:	d400      	bmi.n	800094a <__aeabi_fadd+0x22a>
 8000948:	e0cd      	b.n	8000ae6 <__aeabi_fadd+0x3c6>
 800094a:	0192      	lsls	r2, r2, #6
 800094c:	2001      	movs	r0, #1
 800094e:	0a52      	lsrs	r2, r2, #9
 8000950:	e765      	b.n	800081e <__aeabi_fadd+0xfe>
 8000952:	2aff      	cmp	r2, #255	@ 0xff
 8000954:	d0d2      	beq.n	80008fc <__aeabi_fadd+0x1dc>
 8000956:	2080      	movs	r0, #128	@ 0x80
 8000958:	04c0      	lsls	r0, r0, #19
 800095a:	4306      	orrs	r6, r0
 800095c:	2001      	movs	r0, #1
 800095e:	2b1b      	cmp	r3, #27
 8000960:	dc08      	bgt.n	8000974 <__aeabi_fadd+0x254>
 8000962:	0030      	movs	r0, r6
 8000964:	2420      	movs	r4, #32
 8000966:	40d8      	lsrs	r0, r3
 8000968:	1ae3      	subs	r3, r4, r3
 800096a:	409e      	lsls	r6, r3
 800096c:	0033      	movs	r3, r6
 800096e:	1e5c      	subs	r4, r3, #1
 8000970:	41a3      	sbcs	r3, r4
 8000972:	4318      	orrs	r0, r3
 8000974:	464c      	mov	r4, r9
 8000976:	0015      	movs	r5, r2
 8000978:	1a0e      	subs	r6, r1, r0
 800097a:	e732      	b.n	80007e2 <__aeabi_fadd+0xc2>
 800097c:	0008      	movs	r0, r1
 800097e:	2220      	movs	r2, #32
 8000980:	40d8      	lsrs	r0, r3
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	4099      	lsls	r1, r3
 8000986:	000b      	movs	r3, r1
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	4193      	sbcs	r3, r2
 800098c:	4303      	orrs	r3, r0
 800098e:	18f6      	adds	r6, r6, r3
 8000990:	0173      	lsls	r3, r6, #5
 8000992:	d59b      	bpl.n	80008cc <__aeabi_fadd+0x1ac>
 8000994:	3501      	adds	r5, #1
 8000996:	2dff      	cmp	r5, #255	@ 0xff
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x27c>
 800099a:	e73e      	b.n	800081a <__aeabi_fadd+0xfa>
 800099c:	2301      	movs	r3, #1
 800099e:	494d      	ldr	r1, [pc, #308]	@ (8000ad4 <__aeabi_fadd+0x3b4>)
 80009a0:	0872      	lsrs	r2, r6, #1
 80009a2:	4033      	ands	r3, r6
 80009a4:	400a      	ands	r2, r1
 80009a6:	431a      	orrs	r2, r3
 80009a8:	0016      	movs	r6, r2
 80009aa:	0753      	lsls	r3, r2, #29
 80009ac:	d004      	beq.n	80009b8 <__aeabi_fadd+0x298>
 80009ae:	230f      	movs	r3, #15
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fadd+0x298>
 80009b6:	e72a      	b.n	800080e <__aeabi_fadd+0xee>
 80009b8:	0173      	lsls	r3, r6, #5
 80009ba:	d500      	bpl.n	80009be <__aeabi_fadd+0x29e>
 80009bc:	e72a      	b.n	8000814 <__aeabi_fadd+0xf4>
 80009be:	002b      	movs	r3, r5
 80009c0:	08f7      	lsrs	r7, r6, #3
 80009c2:	e6f7      	b.n	80007b4 <__aeabi_fadd+0x94>
 80009c4:	2bff      	cmp	r3, #255	@ 0xff
 80009c6:	d100      	bne.n	80009ca <__aeabi_fadd+0x2aa>
 80009c8:	e727      	b.n	800081a <__aeabi_fadd+0xfa>
 80009ca:	1871      	adds	r1, r6, r1
 80009cc:	0849      	lsrs	r1, r1, #1
 80009ce:	074a      	lsls	r2, r1, #29
 80009d0:	d02f      	beq.n	8000a32 <__aeabi_fadd+0x312>
 80009d2:	220f      	movs	r2, #15
 80009d4:	400a      	ands	r2, r1
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d02b      	beq.n	8000a32 <__aeabi_fadd+0x312>
 80009da:	1d0e      	adds	r6, r1, #4
 80009dc:	e6e6      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009de:	2aff      	cmp	r2, #255	@ 0xff
 80009e0:	d08d      	beq.n	80008fe <__aeabi_fadd+0x1de>
 80009e2:	2080      	movs	r0, #128	@ 0x80
 80009e4:	04c0      	lsls	r0, r0, #19
 80009e6:	4306      	orrs	r6, r0
 80009e8:	2b1b      	cmp	r3, #27
 80009ea:	dd24      	ble.n	8000a36 <__aeabi_fadd+0x316>
 80009ec:	0013      	movs	r3, r2
 80009ee:	1d4e      	adds	r6, r1, #5
 80009f0:	e6dc      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009f2:	464c      	mov	r4, r9
 80009f4:	1b8f      	subs	r7, r1, r6
 80009f6:	e6f9      	b.n	80007ec <__aeabi_fadd+0xcc>
 80009f8:	464c      	mov	r4, r9
 80009fa:	000e      	movs	r6, r1
 80009fc:	e6d6      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d149      	bne.n	8000a96 <__aeabi_fadd+0x376>
 8000a02:	2900      	cmp	r1, #0
 8000a04:	d068      	beq.n	8000ad8 <__aeabi_fadd+0x3b8>
 8000a06:	4667      	mov	r7, ip
 8000a08:	464c      	mov	r4, r9
 8000a0a:	e77c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a0c:	1870      	adds	r0, r6, r1
 8000a0e:	0143      	lsls	r3, r0, #5
 8000a10:	d574      	bpl.n	8000afc <__aeabi_fadd+0x3dc>
 8000a12:	4930      	ldr	r1, [pc, #192]	@ (8000ad4 <__aeabi_fadd+0x3b4>)
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	4001      	ands	r1, r0
 8000a18:	0743      	lsls	r3, r0, #29
 8000a1a:	d009      	beq.n	8000a30 <__aeabi_fadd+0x310>
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4003      	ands	r3, r0
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d005      	beq.n	8000a30 <__aeabi_fadd+0x310>
 8000a24:	2302      	movs	r3, #2
 8000a26:	1d0e      	adds	r6, r1, #4
 8000a28:	e6c0      	b.n	80007ac <__aeabi_fadd+0x8c>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	08cf      	lsrs	r7, r1, #3
 8000a2e:	e6c1      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a30:	2302      	movs	r3, #2
 8000a32:	08cf      	lsrs	r7, r1, #3
 8000a34:	e6be      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a36:	2520      	movs	r5, #32
 8000a38:	0030      	movs	r0, r6
 8000a3a:	40d8      	lsrs	r0, r3
 8000a3c:	1aeb      	subs	r3, r5, r3
 8000a3e:	409e      	lsls	r6, r3
 8000a40:	0033      	movs	r3, r6
 8000a42:	1e5d      	subs	r5, r3, #1
 8000a44:	41ab      	sbcs	r3, r5
 8000a46:	4303      	orrs	r3, r0
 8000a48:	0015      	movs	r5, r2
 8000a4a:	185e      	adds	r6, r3, r1
 8000a4c:	e7a0      	b.n	8000990 <__aeabi_fadd+0x270>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x334>
 8000a52:	e765      	b.n	8000920 <__aeabi_fadd+0x200>
 8000a54:	464c      	mov	r4, r9
 8000a56:	4667      	mov	r7, ip
 8000a58:	e6ac      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a5a:	1b8f      	subs	r7, r1, r6
 8000a5c:	017b      	lsls	r3, r7, #5
 8000a5e:	d52e      	bpl.n	8000abe <__aeabi_fadd+0x39e>
 8000a60:	01bf      	lsls	r7, r7, #6
 8000a62:	09bf      	lsrs	r7, r7, #6
 8000a64:	0038      	movs	r0, r7
 8000a66:	f002 fe45 	bl	80036f4 <__clzsi2>
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	3805      	subs	r0, #5
 8000a6e:	4083      	lsls	r3, r0
 8000a70:	464c      	mov	r4, r9
 8000a72:	3501      	adds	r5, #1
 8000a74:	e710      	b.n	8000898 <__aeabi_fadd+0x178>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x35c>
 8000a7a:	e740      	b.n	80008fe <__aeabi_fadd+0x1de>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x362>
 8000a80:	e741      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a82:	2380      	movs	r3, #128	@ 0x80
 8000a84:	03db      	lsls	r3, r3, #15
 8000a86:	429f      	cmp	r7, r3
 8000a88:	d200      	bcs.n	8000a8c <__aeabi_fadd+0x36c>
 8000a8a:	e73c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a8c:	459c      	cmp	ip, r3
 8000a8e:	d300      	bcc.n	8000a92 <__aeabi_fadd+0x372>
 8000a90:	e739      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a92:	4667      	mov	r7, ip
 8000a94:	e737      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fadd+0x37c>
 8000a9a:	e734      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	03db      	lsls	r3, r3, #15
 8000aa0:	429f      	cmp	r7, r3
 8000aa2:	d200      	bcs.n	8000aa6 <__aeabi_fadd+0x386>
 8000aa4:	e72f      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000aa6:	459c      	cmp	ip, r3
 8000aa8:	d300      	bcc.n	8000aac <__aeabi_fadd+0x38c>
 8000aaa:	e72c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000aac:	464c      	mov	r4, r9
 8000aae:	4667      	mov	r7, ip
 8000ab0:	e729      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fadd+0x398>
 8000ab6:	e734      	b.n	8000922 <__aeabi_fadd+0x202>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	08cf      	lsrs	r7, r1, #3
 8000abc:	e67a      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000abe:	464c      	mov	r4, r9
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	08ff      	lsrs	r7, r7, #3
 8000ac4:	e676      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ac6:	2f00      	cmp	r7, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x3ac>
 8000aca:	e729      	b.n	8000920 <__aeabi_fadd+0x200>
 8000acc:	08ff      	lsrs	r7, r7, #3
 8000ace:	e671      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ad0:	fbffffff 	.word	0xfbffffff
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	2400      	movs	r4, #0
 8000adc:	20ff      	movs	r0, #255	@ 0xff
 8000ade:	03d2      	lsls	r2, r2, #15
 8000ae0:	e69d      	b.n	800081e <__aeabi_fadd+0xfe>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e666      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	08d7      	lsrs	r7, r2, #3
 8000aea:	e663      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000aec:	2001      	movs	r0, #1
 8000aee:	0172      	lsls	r2, r6, #5
 8000af0:	d500      	bpl.n	8000af4 <__aeabi_fadd+0x3d4>
 8000af2:	e6e7      	b.n	80008c4 <__aeabi_fadd+0x1a4>
 8000af4:	0031      	movs	r1, r6
 8000af6:	2300      	movs	r3, #0
 8000af8:	08cf      	lsrs	r7, r1, #3
 8000afa:	e65b      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000afc:	2301      	movs	r3, #1
 8000afe:	08c7      	lsrs	r7, r0, #3
 8000b00:	e658      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000b02:	46c0      	nop			@ (mov r8, r8)

08000b04 <__aeabi_fdiv>:
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	4646      	mov	r6, r8
 8000b08:	464f      	mov	r7, r9
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	0245      	lsls	r5, r0, #9
 8000b0e:	b5c0      	push	{r6, r7, lr}
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0047      	lsls	r7, r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	1c0e      	adds	r6, r1, #0
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e3f      	lsrs	r7, r7, #24
 8000b1c:	d05b      	beq.n	8000bd6 <__aeabi_fdiv+0xd2>
 8000b1e:	2fff      	cmp	r7, #255	@ 0xff
 8000b20:	d021      	beq.n	8000b66 <__aeabi_fdiv+0x62>
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	00ed      	lsls	r5, r5, #3
 8000b26:	04db      	lsls	r3, r3, #19
 8000b28:	431d      	orrs	r5, r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	3f7f      	subs	r7, #127	@ 0x7f
 8000b32:	0274      	lsls	r4, r6, #9
 8000b34:	0073      	lsls	r3, r6, #1
 8000b36:	0a64      	lsrs	r4, r4, #9
 8000b38:	0e1b      	lsrs	r3, r3, #24
 8000b3a:	0ff6      	lsrs	r6, r6, #31
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d020      	beq.n	8000b82 <__aeabi_fdiv+0x7e>
 8000b40:	2bff      	cmp	r3, #255	@ 0xff
 8000b42:	d043      	beq.n	8000bcc <__aeabi_fdiv+0xc8>
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	2000      	movs	r0, #0
 8000b48:	00e4      	lsls	r4, r4, #3
 8000b4a:	04d2      	lsls	r2, r2, #19
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b50:	4642      	mov	r2, r8
 8000b52:	1aff      	subs	r7, r7, r3
 8000b54:	464b      	mov	r3, r9
 8000b56:	4072      	eors	r2, r6
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d900      	bls.n	8000b5e <__aeabi_fdiv+0x5a>
 8000b5c:	e09d      	b.n	8000c9a <__aeabi_fdiv+0x196>
 8000b5e:	4971      	ldr	r1, [pc, #452]	@ (8000d24 <__aeabi_fdiv+0x220>)
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	58cb      	ldr	r3, [r1, r3]
 8000b64:	469f      	mov	pc, r3
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d15a      	bne.n	8000c20 <__aeabi_fdiv+0x11c>
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	4699      	mov	r9, r3
 8000b6e:	3b06      	subs	r3, #6
 8000b70:	0274      	lsls	r4, r6, #9
 8000b72:	469a      	mov	sl, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	27ff      	movs	r7, #255	@ 0xff
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	0ff6      	lsrs	r6, r6, #31
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1de      	bne.n	8000b40 <__aeabi_fdiv+0x3c>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d13b      	bne.n	8000bfe <__aeabi_fdiv+0xfa>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4642      	mov	r2, r8
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	4072      	eors	r2, r6
 8000b8e:	4319      	orrs	r1, r3
 8000b90:	290e      	cmp	r1, #14
 8000b92:	d818      	bhi.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000b94:	4864      	ldr	r0, [pc, #400]	@ (8000d28 <__aeabi_fdiv+0x224>)
 8000b96:	0089      	lsls	r1, r1, #2
 8000b98:	5841      	ldr	r1, [r0, r1]
 8000b9a:	468f      	mov	pc, r1
 8000b9c:	4653      	mov	r3, sl
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fdiv+0xa0>
 8000ba2:	e0b8      	b.n	8000d16 <__aeabi_fdiv+0x212>
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d06e      	beq.n	8000c86 <__aeabi_fdiv+0x182>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	002c      	movs	r4, r5
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d140      	bne.n	8000c32 <__aeabi_fdiv+0x12e>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	05c0      	lsls	r0, r0, #23
 8000bb6:	4320      	orrs	r0, r4
 8000bb8:	07d2      	lsls	r2, r2, #31
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	bce0      	pop	{r5, r6, r7}
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	46b1      	mov	r9, r6
 8000bc2:	46a8      	mov	r8, r5
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	2400      	movs	r4, #0
 8000bca:	e7f3      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d120      	bne.n	8000c12 <__aeabi_fdiv+0x10e>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	3fff      	subs	r7, #255	@ 0xff
 8000bd4:	e7d8      	b.n	8000b88 <__aeabi_fdiv+0x84>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d105      	bne.n	8000be6 <__aeabi_fdiv+0xe2>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b03      	subs	r3, #3
 8000be0:	2700      	movs	r7, #0
 8000be2:	469a      	mov	sl, r3
 8000be4:	e7a5      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000be6:	0028      	movs	r0, r5
 8000be8:	f002 fd84 	bl	80036f4 <__clzsi2>
 8000bec:	2776      	movs	r7, #118	@ 0x76
 8000bee:	1f43      	subs	r3, r0, #5
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	1a3f      	subs	r7, r7, r0
 8000bfc:	e799      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f002 fd78 	bl	80036f4 <__clzsi2>
 8000c04:	1f43      	subs	r3, r0, #5
 8000c06:	409c      	lsls	r4, r3
 8000c08:	2376      	movs	r3, #118	@ 0x76
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	e79e      	b.n	8000b50 <__aeabi_fdiv+0x4c>
 8000c12:	2303      	movs	r3, #3
 8000c14:	464a      	mov	r2, r9
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	33fc      	adds	r3, #252	@ 0xfc
 8000c1e:	e797      	b.n	8000b50 <__aeabi_fdiv+0x4c>
 8000c20:	230c      	movs	r3, #12
 8000c22:	4699      	mov	r9, r3
 8000c24:	3b09      	subs	r3, #9
 8000c26:	27ff      	movs	r7, #255	@ 0xff
 8000c28:	469a      	mov	sl, r3
 8000c2a:	e782      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000c2c:	2803      	cmp	r0, #3
 8000c2e:	d02c      	beq.n	8000c8a <__aeabi_fdiv+0x186>
 8000c30:	0032      	movs	r2, r6
 8000c32:	0038      	movs	r0, r7
 8000c34:	307f      	adds	r0, #127	@ 0x7f
 8000c36:	2800      	cmp	r0, #0
 8000c38:	dd47      	ble.n	8000cca <__aeabi_fdiv+0x1c6>
 8000c3a:	0763      	lsls	r3, r4, #29
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_fdiv+0x144>
 8000c3e:	230f      	movs	r3, #15
 8000c40:	4023      	ands	r3, r4
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fdiv+0x144>
 8000c46:	3404      	adds	r4, #4
 8000c48:	0123      	lsls	r3, r4, #4
 8000c4a:	d503      	bpl.n	8000c54 <__aeabi_fdiv+0x150>
 8000c4c:	0038      	movs	r0, r7
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <__aeabi_fdiv+0x228>)
 8000c50:	3080      	adds	r0, #128	@ 0x80
 8000c52:	401c      	ands	r4, r3
 8000c54:	28fe      	cmp	r0, #254	@ 0xfe
 8000c56:	dcb6      	bgt.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000c58:	01a4      	lsls	r4, r4, #6
 8000c5a:	0a64      	lsrs	r4, r4, #9
 8000c5c:	b2c0      	uxtb	r0, r0
 8000c5e:	e7a9      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c60:	2480      	movs	r4, #128	@ 0x80
 8000c62:	2200      	movs	r2, #0
 8000c64:	20ff      	movs	r0, #255	@ 0xff
 8000c66:	03e4      	lsls	r4, r4, #15
 8000c68:	e7a4      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	03db      	lsls	r3, r3, #15
 8000c6e:	421d      	tst	r5, r3
 8000c70:	d001      	beq.n	8000c76 <__aeabi_fdiv+0x172>
 8000c72:	421c      	tst	r4, r3
 8000c74:	d00b      	beq.n	8000c8e <__aeabi_fdiv+0x18a>
 8000c76:	2480      	movs	r4, #128	@ 0x80
 8000c78:	03e4      	lsls	r4, r4, #15
 8000c7a:	432c      	orrs	r4, r5
 8000c7c:	0264      	lsls	r4, r4, #9
 8000c7e:	4642      	mov	r2, r8
 8000c80:	20ff      	movs	r0, #255	@ 0xff
 8000c82:	0a64      	lsrs	r4, r4, #9
 8000c84:	e796      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c86:	4646      	mov	r6, r8
 8000c88:	002c      	movs	r4, r5
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	03db      	lsls	r3, r3, #15
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	0264      	lsls	r4, r4, #9
 8000c92:	0032      	movs	r2, r6
 8000c94:	20ff      	movs	r0, #255	@ 0xff
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	e78c      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c9a:	016d      	lsls	r5, r5, #5
 8000c9c:	0160      	lsls	r0, r4, #5
 8000c9e:	4285      	cmp	r5, r0
 8000ca0:	d22d      	bcs.n	8000cfe <__aeabi_fdiv+0x1fa>
 8000ca2:	231b      	movs	r3, #27
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	3f01      	subs	r7, #1
 8000ca8:	2601      	movs	r6, #1
 8000caa:	0029      	movs	r1, r5
 8000cac:	0064      	lsls	r4, r4, #1
 8000cae:	006d      	lsls	r5, r5, #1
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	db01      	blt.n	8000cb8 <__aeabi_fdiv+0x1b4>
 8000cb4:	4285      	cmp	r5, r0
 8000cb6:	d301      	bcc.n	8000cbc <__aeabi_fdiv+0x1b8>
 8000cb8:	1a2d      	subs	r5, r5, r0
 8000cba:	4334      	orrs	r4, r6
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f3      	bne.n	8000caa <__aeabi_fdiv+0x1a6>
 8000cc2:	1e6b      	subs	r3, r5, #1
 8000cc4:	419d      	sbcs	r5, r3
 8000cc6:	432c      	orrs	r4, r5
 8000cc8:	e7b3      	b.n	8000c32 <__aeabi_fdiv+0x12e>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	1a1b      	subs	r3, r3, r0
 8000cce:	2b1b      	cmp	r3, #27
 8000cd0:	dd00      	ble.n	8000cd4 <__aeabi_fdiv+0x1d0>
 8000cd2:	e76d      	b.n	8000bb0 <__aeabi_fdiv+0xac>
 8000cd4:	0021      	movs	r1, r4
 8000cd6:	379e      	adds	r7, #158	@ 0x9e
 8000cd8:	40d9      	lsrs	r1, r3
 8000cda:	40bc      	lsls	r4, r7
 8000cdc:	000b      	movs	r3, r1
 8000cde:	1e61      	subs	r1, r4, #1
 8000ce0:	418c      	sbcs	r4, r1
 8000ce2:	4323      	orrs	r3, r4
 8000ce4:	0759      	lsls	r1, r3, #29
 8000ce6:	d004      	beq.n	8000cf2 <__aeabi_fdiv+0x1ee>
 8000ce8:	210f      	movs	r1, #15
 8000cea:	4019      	ands	r1, r3
 8000cec:	2904      	cmp	r1, #4
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fdiv+0x1ee>
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	0159      	lsls	r1, r3, #5
 8000cf4:	d413      	bmi.n	8000d1e <__aeabi_fdiv+0x21a>
 8000cf6:	019b      	lsls	r3, r3, #6
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	0a5c      	lsrs	r4, r3, #9
 8000cfc:	e75a      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000cfe:	231a      	movs	r3, #26
 8000d00:	2401      	movs	r4, #1
 8000d02:	1a2d      	subs	r5, r5, r0
 8000d04:	e7d0      	b.n	8000ca8 <__aeabi_fdiv+0x1a4>
 8000d06:	1e98      	subs	r0, r3, #2
 8000d08:	4243      	negs	r3, r0
 8000d0a:	4158      	adcs	r0, r3
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	0032      	movs	r2, r6
 8000d10:	2400      	movs	r4, #0
 8000d12:	b2c0      	uxtb	r0, r0
 8000d14:	e74e      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d16:	4642      	mov	r2, r8
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	e74a      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d1e:	2001      	movs	r0, #1
 8000d20:	2400      	movs	r4, #0
 8000d22:	e747      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d24:	0800e3d8 	.word	0x0800e3d8
 8000d28:	0800e418 	.word	0x0800e418
 8000d2c:	f7ffffff 	.word	0xf7ffffff

08000d30 <__eqsf2>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	0042      	lsls	r2, r0, #1
 8000d34:	024e      	lsls	r6, r1, #9
 8000d36:	004c      	lsls	r4, r1, #1
 8000d38:	0245      	lsls	r5, r0, #9
 8000d3a:	0a6d      	lsrs	r5, r5, #9
 8000d3c:	0e12      	lsrs	r2, r2, #24
 8000d3e:	0fc3      	lsrs	r3, r0, #31
 8000d40:	0a76      	lsrs	r6, r6, #9
 8000d42:	0e24      	lsrs	r4, r4, #24
 8000d44:	0fc9      	lsrs	r1, r1, #31
 8000d46:	2aff      	cmp	r2, #255	@ 0xff
 8000d48:	d010      	beq.n	8000d6c <__eqsf2+0x3c>
 8000d4a:	2cff      	cmp	r4, #255	@ 0xff
 8000d4c:	d00c      	beq.n	8000d68 <__eqsf2+0x38>
 8000d4e:	2001      	movs	r0, #1
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d10a      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d54:	42b5      	cmp	r5, r6
 8000d56:	d108      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d00f      	beq.n	8000d7c <__eqsf2+0x4c>
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	d104      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d60:	0028      	movs	r0, r5
 8000d62:	1e43      	subs	r3, r0, #1
 8000d64:	4198      	sbcs	r0, r3
 8000d66:	e000      	b.n	8000d6a <__eqsf2+0x3a>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d1fb      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d72:	4335      	orrs	r5, r6
 8000d74:	d1f9      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d76:	404b      	eors	r3, r1
 8000d78:	0018      	movs	r0, r3
 8000d7a:	e7f6      	b.n	8000d6a <__eqsf2+0x3a>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7f4      	b.n	8000d6a <__eqsf2+0x3a>

08000d80 <__gesf2>:
 8000d80:	b530      	push	{r4, r5, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0244      	lsls	r4, r0, #9
 8000d86:	024d      	lsls	r5, r1, #9
 8000d88:	0fc3      	lsrs	r3, r0, #31
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	0a6d      	lsrs	r5, r5, #9
 8000d92:	0e00      	lsrs	r0, r0, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d018      	beq.n	8000dcc <__gesf2+0x4c>
 8000d9a:	28ff      	cmp	r0, #255	@ 0xff
 8000d9c:	d00a      	beq.n	8000db4 <__gesf2+0x34>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d11e      	bne.n	8000de0 <__gesf2+0x60>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d10a      	bne.n	8000dbc <__gesf2+0x3c>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d029      	beq.n	8000dfe <__gesf2+0x7e>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d12d      	bne.n	8000e0a <__gesf2+0x8a>
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	3801      	subs	r0, #1
 8000db2:	bd30      	pop	{r4, r5, pc}
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d125      	bne.n	8000e04 <__gesf2+0x84>
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d101      	bne.n	8000dc0 <__gesf2+0x40>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0f6      	beq.n	8000dae <__gesf2+0x2e>
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d019      	beq.n	8000df8 <__gesf2+0x78>
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	e7f2      	b.n	8000db2 <__gesf2+0x32>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d119      	bne.n	8000e04 <__gesf2+0x84>
 8000dd0:	28ff      	cmp	r0, #255	@ 0xff
 8000dd2:	d1f7      	bne.n	8000dc4 <__gesf2+0x44>
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	d115      	bne.n	8000e04 <__gesf2+0x84>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d1f2      	bne.n	8000dc4 <__gesf2+0x44>
 8000dde:	e7e8      	b.n	8000db2 <__gesf2+0x32>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0ef      	beq.n	8000dc4 <__gesf2+0x44>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1ed      	bne.n	8000dc4 <__gesf2+0x44>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	dceb      	bgt.n	8000dc4 <__gesf2+0x44>
 8000dec:	db04      	blt.n	8000df8 <__gesf2+0x78>
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	d8e8      	bhi.n	8000dc4 <__gesf2+0x44>
 8000df2:	2000      	movs	r0, #0
 8000df4:	42ac      	cmp	r4, r5
 8000df6:	d2dc      	bcs.n	8000db2 <__gesf2+0x32>
 8000df8:	0058      	lsls	r0, r3, #1
 8000dfa:	3801      	subs	r0, #1
 8000dfc:	e7d9      	b.n	8000db2 <__gesf2+0x32>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d0d7      	beq.n	8000db2 <__gesf2+0x32>
 8000e02:	e7df      	b.n	8000dc4 <__gesf2+0x44>
 8000e04:	2002      	movs	r0, #2
 8000e06:	4240      	negs	r0, r0
 8000e08:	e7d3      	b.n	8000db2 <__gesf2+0x32>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d1da      	bne.n	8000dc4 <__gesf2+0x44>
 8000e0e:	e7ee      	b.n	8000dee <__gesf2+0x6e>

08000e10 <__lesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d017      	beq.n	8000e5a <__lesf2+0x4a>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00a      	beq.n	8000e44 <__lesf2+0x34>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11b      	bne.n	8000e6a <__lesf2+0x5a>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10a      	bne.n	8000e4c <__lesf2+0x3c>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d01d      	beq.n	8000e76 <__lesf2+0x66>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d12d      	bne.n	8000e9a <__lesf2+0x8a>
 8000e3e:	0048      	lsls	r0, r1, #1
 8000e40:	3801      	subs	r0, #1
 8000e42:	e011      	b.n	8000e68 <__lesf2+0x58>
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d10e      	bne.n	8000e66 <__lesf2+0x56>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d101      	bne.n	8000e50 <__lesf2+0x40>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d0f6      	beq.n	8000e3e <__lesf2+0x2e>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d10c      	bne.n	8000e6e <__lesf2+0x5e>
 8000e54:	0058      	lsls	r0, r3, #1
 8000e56:	3801      	subs	r0, #1
 8000e58:	e006      	b.n	8000e68 <__lesf2+0x58>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d103      	bne.n	8000e66 <__lesf2+0x56>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d105      	bne.n	8000e6e <__lesf2+0x5e>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d015      	beq.n	8000e92 <__lesf2+0x82>
 8000e66:	2002      	movs	r0, #2
 8000e68:	bd30      	pop	{r4, r5, pc}
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d106      	bne.n	8000e7c <__lesf2+0x6c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	4318      	orrs	r0, r3
 8000e74:	e7f8      	b.n	8000e68 <__lesf2+0x58>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d0f6      	beq.n	8000e68 <__lesf2+0x58>
 8000e7a:	e7f8      	b.n	8000e6e <__lesf2+0x5e>
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d1f6      	bne.n	8000e6e <__lesf2+0x5e>
 8000e80:	4282      	cmp	r2, r0
 8000e82:	dcf4      	bgt.n	8000e6e <__lesf2+0x5e>
 8000e84:	dbe6      	blt.n	8000e54 <__lesf2+0x44>
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	d8f1      	bhi.n	8000e6e <__lesf2+0x5e>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	42ac      	cmp	r4, r5
 8000e8e:	d2eb      	bcs.n	8000e68 <__lesf2+0x58>
 8000e90:	e7e0      	b.n	8000e54 <__lesf2+0x44>
 8000e92:	2000      	movs	r0, #0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ea      	bne.n	8000e6e <__lesf2+0x5e>
 8000e98:	e7e6      	b.n	8000e68 <__lesf2+0x58>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d1e7      	bne.n	8000e6e <__lesf2+0x5e>
 8000e9e:	e7f2      	b.n	8000e86 <__lesf2+0x76>

08000ea0 <__aeabi_fmul>:
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	464f      	mov	r7, r9
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	46d6      	mov	lr, sl
 8000ea8:	0044      	lsls	r4, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	0246      	lsls	r6, r0, #9
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0a76      	lsrs	r6, r6, #9
 8000eb2:	0e24      	lsrs	r4, r4, #24
 8000eb4:	0fc5      	lsrs	r5, r0, #31
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fmul+0x1c>
 8000eba:	e0da      	b.n	8001072 <__aeabi_fmul+0x1d2>
 8000ebc:	2cff      	cmp	r4, #255	@ 0xff
 8000ebe:	d074      	beq.n	8000faa <__aeabi_fmul+0x10a>
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	00f6      	lsls	r6, r6, #3
 8000ec4:	04db      	lsls	r3, r3, #19
 8000ec6:	431e      	orrs	r6, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4699      	mov	r9, r3
 8000ecc:	469a      	mov	sl, r3
 8000ece:	3c7f      	subs	r4, #127	@ 0x7f
 8000ed0:	027b      	lsls	r3, r7, #9
 8000ed2:	0a5b      	lsrs	r3, r3, #9
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	007b      	lsls	r3, r7, #1
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d074      	beq.n	8000fca <__aeabi_fmul+0x12a>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fmul+0x46>
 8000ee4:	e08e      	b.n	8001004 <__aeabi_fmul+0x164>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	00d2      	lsls	r2, r2, #3
 8000eec:	04c9      	lsls	r1, r1, #19
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef2:	002a      	movs	r2, r5
 8000ef4:	18e4      	adds	r4, r4, r3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	407a      	eors	r2, r7
 8000efa:	4688      	mov	r8, r1
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	dc75      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 8000f02:	464b      	mov	r3, r9
 8000f04:	2000      	movs	r0, #0
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	dd0f      	ble.n	8000f2a <__aeabi_fmul+0x8a>
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	21a6      	movs	r1, #166	@ 0xa6
 8000f12:	00c9      	lsls	r1, r1, #3
 8000f14:	420b      	tst	r3, r1
 8000f16:	d169      	bne.n	8000fec <__aeabi_fmul+0x14c>
 8000f18:	2190      	movs	r1, #144	@ 0x90
 8000f1a:	0089      	lsls	r1, r1, #2
 8000f1c:	420b      	tst	r3, r1
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fmul+0x82>
 8000f20:	e100      	b.n	8001124 <__aeabi_fmul+0x284>
 8000f22:	2188      	movs	r1, #136	@ 0x88
 8000f24:	4219      	tst	r1, r3
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x8a>
 8000f28:	e0f5      	b.n	8001116 <__aeabi_fmul+0x276>
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	0409      	lsls	r1, r1, #16
 8000f2e:	0c09      	lsrs	r1, r1, #16
 8000f30:	4643      	mov	r3, r8
 8000f32:	0008      	movs	r0, r1
 8000f34:	0c35      	lsrs	r5, r6, #16
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	0c36      	lsrs	r6, r6, #16
 8000f3c:	4370      	muls	r0, r6
 8000f3e:	4369      	muls	r1, r5
 8000f40:	435e      	muls	r6, r3
 8000f42:	435d      	muls	r5, r3
 8000f44:	1876      	adds	r6, r6, r1
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	199b      	adds	r3, r3, r6
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d903      	bls.n	8000f56 <__aeabi_fmul+0xb6>
 8000f4e:	2180      	movs	r1, #128	@ 0x80
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	468c      	mov	ip, r1
 8000f54:	4465      	add	r5, ip
 8000f56:	0400      	lsls	r0, r0, #16
 8000f58:	0419      	lsls	r1, r3, #16
 8000f5a:	0c00      	lsrs	r0, r0, #16
 8000f5c:	1809      	adds	r1, r1, r0
 8000f5e:	018e      	lsls	r6, r1, #6
 8000f60:	1e70      	subs	r0, r6, #1
 8000f62:	4186      	sbcs	r6, r0
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	0e89      	lsrs	r1, r1, #26
 8000f68:	195b      	adds	r3, r3, r5
 8000f6a:	430e      	orrs	r6, r1
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	d46c      	bmi.n	800104e <__aeabi_fmul+0x1ae>
 8000f74:	0023      	movs	r3, r4
 8000f76:	337f      	adds	r3, #127	@ 0x7f
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_fmul+0xde>
 8000f7c:	e0b1      	b.n	80010e2 <__aeabi_fmul+0x242>
 8000f7e:	0015      	movs	r5, r2
 8000f80:	0771      	lsls	r1, r6, #29
 8000f82:	d00b      	beq.n	8000f9c <__aeabi_fmul+0xfc>
 8000f84:	200f      	movs	r0, #15
 8000f86:	0021      	movs	r1, r4
 8000f88:	4030      	ands	r0, r6
 8000f8a:	2804      	cmp	r0, #4
 8000f8c:	d006      	beq.n	8000f9c <__aeabi_fmul+0xfc>
 8000f8e:	3604      	adds	r6, #4
 8000f90:	0132      	lsls	r2, r6, #4
 8000f92:	d503      	bpl.n	8000f9c <__aeabi_fmul+0xfc>
 8000f94:	4b6e      	ldr	r3, [pc, #440]	@ (8001150 <__aeabi_fmul+0x2b0>)
 8000f96:	401e      	ands	r6, r3
 8000f98:	000b      	movs	r3, r1
 8000f9a:	3380      	adds	r3, #128	@ 0x80
 8000f9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_fmul+0x102>
 8000fa0:	e0bd      	b.n	800111e <__aeabi_fmul+0x27e>
 8000fa2:	01b2      	lsls	r2, r6, #6
 8000fa4:	0a52      	lsrs	r2, r2, #9
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	e048      	b.n	800103c <__aeabi_fmul+0x19c>
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fmul+0x110>
 8000fae:	e092      	b.n	80010d6 <__aeabi_fmul+0x236>
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	3b06      	subs	r3, #6
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	027b      	lsls	r3, r7, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	007b      	lsls	r3, r7, #1
 8000fc0:	24ff      	movs	r4, #255	@ 0xff
 8000fc2:	0e1b      	lsrs	r3, r3, #24
 8000fc4:	0fff      	lsrs	r7, r7, #31
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d18a      	bne.n	8000ee0 <__aeabi_fmul+0x40>
 8000fca:	4642      	mov	r2, r8
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d164      	bne.n	800109a <__aeabi_fmul+0x1fa>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	4311      	orrs	r1, r2
 8000fd6:	4689      	mov	r9, r1
 8000fd8:	290a      	cmp	r1, #10
 8000fda:	dc08      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 8000fdc:	407d      	eors	r5, r7
 8000fde:	2001      	movs	r0, #1
 8000fe0:	b2ea      	uxtb	r2, r5
 8000fe2:	2902      	cmp	r1, #2
 8000fe4:	dc91      	bgt.n	8000f0a <__aeabi_fmul+0x6a>
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	e027      	b.n	800103c <__aeabi_fmul+0x19c>
 8000fec:	0015      	movs	r5, r2
 8000fee:	4653      	mov	r3, sl
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fmul+0x156>
 8000ff4:	e093      	b.n	800111e <__aeabi_fmul+0x27e>
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d01a      	beq.n	8001030 <__aeabi_fmul+0x190>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12c      	bne.n	8001058 <__aeabi_fmul+0x1b8>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	e01b      	b.n	800103c <__aeabi_fmul+0x19c>
 8001004:	4643      	mov	r3, r8
 8001006:	34ff      	adds	r4, #255	@ 0xff
 8001008:	2b00      	cmp	r3, #0
 800100a:	d055      	beq.n	80010b8 <__aeabi_fmul+0x218>
 800100c:	2103      	movs	r1, #3
 800100e:	464b      	mov	r3, r9
 8001010:	430b      	orrs	r3, r1
 8001012:	0019      	movs	r1, r3
 8001014:	2b0a      	cmp	r3, #10
 8001016:	dc00      	bgt.n	800101a <__aeabi_fmul+0x17a>
 8001018:	e092      	b.n	8001140 <__aeabi_fmul+0x2a0>
 800101a:	2b0f      	cmp	r3, #15
 800101c:	d000      	beq.n	8001020 <__aeabi_fmul+0x180>
 800101e:	e08c      	b.n	800113a <__aeabi_fmul+0x29a>
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	03d2      	lsls	r2, r2, #15
 8001024:	4216      	tst	r6, r2
 8001026:	d003      	beq.n	8001030 <__aeabi_fmul+0x190>
 8001028:	4643      	mov	r3, r8
 800102a:	4213      	tst	r3, r2
 800102c:	d100      	bne.n	8001030 <__aeabi_fmul+0x190>
 800102e:	e07d      	b.n	800112c <__aeabi_fmul+0x28c>
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	03d2      	lsls	r2, r2, #15
 8001034:	4332      	orrs	r2, r6
 8001036:	0252      	lsls	r2, r2, #9
 8001038:	0a52      	lsrs	r2, r2, #9
 800103a:	23ff      	movs	r3, #255	@ 0xff
 800103c:	05d8      	lsls	r0, r3, #23
 800103e:	07ed      	lsls	r5, r5, #31
 8001040:	4310      	orrs	r0, r2
 8001042:	4328      	orrs	r0, r5
 8001044:	bce0      	pop	{r5, r6, r7}
 8001046:	46ba      	mov	sl, r7
 8001048:	46b1      	mov	r9, r6
 800104a:	46a8      	mov	r8, r5
 800104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104e:	2301      	movs	r3, #1
 8001050:	0015      	movs	r5, r2
 8001052:	0871      	lsrs	r1, r6, #1
 8001054:	401e      	ands	r6, r3
 8001056:	430e      	orrs	r6, r1
 8001058:	0023      	movs	r3, r4
 800105a:	3380      	adds	r3, #128	@ 0x80
 800105c:	1c61      	adds	r1, r4, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	dd41      	ble.n	80010e6 <__aeabi_fmul+0x246>
 8001062:	0772      	lsls	r2, r6, #29
 8001064:	d094      	beq.n	8000f90 <__aeabi_fmul+0xf0>
 8001066:	220f      	movs	r2, #15
 8001068:	4032      	ands	r2, r6
 800106a:	2a04      	cmp	r2, #4
 800106c:	d000      	beq.n	8001070 <__aeabi_fmul+0x1d0>
 800106e:	e78e      	b.n	8000f8e <__aeabi_fmul+0xee>
 8001070:	e78e      	b.n	8000f90 <__aeabi_fmul+0xf0>
 8001072:	2e00      	cmp	r6, #0
 8001074:	d105      	bne.n	8001082 <__aeabi_fmul+0x1e2>
 8001076:	2304      	movs	r3, #4
 8001078:	4699      	mov	r9, r3
 800107a:	3b03      	subs	r3, #3
 800107c:	2400      	movs	r4, #0
 800107e:	469a      	mov	sl, r3
 8001080:	e726      	b.n	8000ed0 <__aeabi_fmul+0x30>
 8001082:	0030      	movs	r0, r6
 8001084:	f002 fb36 	bl	80036f4 <__clzsi2>
 8001088:	2476      	movs	r4, #118	@ 0x76
 800108a:	1f43      	subs	r3, r0, #5
 800108c:	409e      	lsls	r6, r3
 800108e:	2300      	movs	r3, #0
 8001090:	4264      	negs	r4, r4
 8001092:	4699      	mov	r9, r3
 8001094:	469a      	mov	sl, r3
 8001096:	1a24      	subs	r4, r4, r0
 8001098:	e71a      	b.n	8000ed0 <__aeabi_fmul+0x30>
 800109a:	4640      	mov	r0, r8
 800109c:	f002 fb2a 	bl	80036f4 <__clzsi2>
 80010a0:	464b      	mov	r3, r9
 80010a2:	1a24      	subs	r4, r4, r0
 80010a4:	3c76      	subs	r4, #118	@ 0x76
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	dca1      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 80010aa:	4643      	mov	r3, r8
 80010ac:	3805      	subs	r0, #5
 80010ae:	4083      	lsls	r3, r0
 80010b0:	407d      	eors	r5, r7
 80010b2:	4698      	mov	r8, r3
 80010b4:	b2ea      	uxtb	r2, r5
 80010b6:	e724      	b.n	8000f02 <__aeabi_fmul+0x62>
 80010b8:	464a      	mov	r2, r9
 80010ba:	3302      	adds	r3, #2
 80010bc:	4313      	orrs	r3, r2
 80010be:	002a      	movs	r2, r5
 80010c0:	407a      	eors	r2, r7
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	dc92      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	0015      	movs	r5, r2
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d026      	beq.n	800111e <__aeabi_fmul+0x27e>
 80010d0:	4699      	mov	r9, r3
 80010d2:	2002      	movs	r0, #2
 80010d4:	e719      	b.n	8000f0a <__aeabi_fmul+0x6a>
 80010d6:	230c      	movs	r3, #12
 80010d8:	4699      	mov	r9, r3
 80010da:	3b09      	subs	r3, #9
 80010dc:	24ff      	movs	r4, #255	@ 0xff
 80010de:	469a      	mov	sl, r3
 80010e0:	e6f6      	b.n	8000ed0 <__aeabi_fmul+0x30>
 80010e2:	0015      	movs	r5, r2
 80010e4:	0021      	movs	r1, r4
 80010e6:	2201      	movs	r2, #1
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b1b      	cmp	r3, #27
 80010ec:	dd00      	ble.n	80010f0 <__aeabi_fmul+0x250>
 80010ee:	e786      	b.n	8000ffe <__aeabi_fmul+0x15e>
 80010f0:	319e      	adds	r1, #158	@ 0x9e
 80010f2:	0032      	movs	r2, r6
 80010f4:	408e      	lsls	r6, r1
 80010f6:	40da      	lsrs	r2, r3
 80010f8:	1e73      	subs	r3, r6, #1
 80010fa:	419e      	sbcs	r6, r3
 80010fc:	4332      	orrs	r2, r6
 80010fe:	0753      	lsls	r3, r2, #29
 8001100:	d004      	beq.n	800110c <__aeabi_fmul+0x26c>
 8001102:	230f      	movs	r3, #15
 8001104:	4013      	ands	r3, r2
 8001106:	2b04      	cmp	r3, #4
 8001108:	d000      	beq.n	800110c <__aeabi_fmul+0x26c>
 800110a:	3204      	adds	r2, #4
 800110c:	0153      	lsls	r3, r2, #5
 800110e:	d510      	bpl.n	8001132 <__aeabi_fmul+0x292>
 8001110:	2301      	movs	r3, #1
 8001112:	2200      	movs	r2, #0
 8001114:	e792      	b.n	800103c <__aeabi_fmul+0x19c>
 8001116:	003d      	movs	r5, r7
 8001118:	4646      	mov	r6, r8
 800111a:	4682      	mov	sl, r0
 800111c:	e767      	b.n	8000fee <__aeabi_fmul+0x14e>
 800111e:	23ff      	movs	r3, #255	@ 0xff
 8001120:	2200      	movs	r2, #0
 8001122:	e78b      	b.n	800103c <__aeabi_fmul+0x19c>
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	2500      	movs	r5, #0
 8001128:	03d2      	lsls	r2, r2, #15
 800112a:	e786      	b.n	800103a <__aeabi_fmul+0x19a>
 800112c:	003d      	movs	r5, r7
 800112e:	431a      	orrs	r2, r3
 8001130:	e783      	b.n	800103a <__aeabi_fmul+0x19a>
 8001132:	0192      	lsls	r2, r2, #6
 8001134:	2300      	movs	r3, #0
 8001136:	0a52      	lsrs	r2, r2, #9
 8001138:	e780      	b.n	800103c <__aeabi_fmul+0x19c>
 800113a:	003d      	movs	r5, r7
 800113c:	4646      	mov	r6, r8
 800113e:	e777      	b.n	8001030 <__aeabi_fmul+0x190>
 8001140:	002a      	movs	r2, r5
 8001142:	2301      	movs	r3, #1
 8001144:	407a      	eors	r2, r7
 8001146:	408b      	lsls	r3, r1
 8001148:	2003      	movs	r0, #3
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	e6e9      	b.n	8000f22 <__aeabi_fmul+0x82>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	f7ffffff 	.word	0xf7ffffff

08001154 <__aeabi_fsub>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	4647      	mov	r7, r8
 8001158:	46ce      	mov	lr, r9
 800115a:	0243      	lsls	r3, r0, #9
 800115c:	b580      	push	{r7, lr}
 800115e:	0a5f      	lsrs	r7, r3, #9
 8001160:	099b      	lsrs	r3, r3, #6
 8001162:	0045      	lsls	r5, r0, #1
 8001164:	004a      	lsls	r2, r1, #1
 8001166:	469c      	mov	ip, r3
 8001168:	024b      	lsls	r3, r1, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0fce      	lsrs	r6, r1, #31
 800116e:	0e2d      	lsrs	r5, r5, #24
 8001170:	0a58      	lsrs	r0, r3, #9
 8001172:	0e12      	lsrs	r2, r2, #24
 8001174:	0999      	lsrs	r1, r3, #6
 8001176:	2aff      	cmp	r2, #255	@ 0xff
 8001178:	d06b      	beq.n	8001252 <__aeabi_fsub+0xfe>
 800117a:	2301      	movs	r3, #1
 800117c:	405e      	eors	r6, r3
 800117e:	1aab      	subs	r3, r5, r2
 8001180:	42b4      	cmp	r4, r6
 8001182:	d04b      	beq.n	800121c <__aeabi_fsub+0xc8>
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc00      	bgt.n	800118a <__aeabi_fsub+0x36>
 8001188:	e0ff      	b.n	800138a <__aeabi_fsub+0x236>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0x3c>
 800118e:	e088      	b.n	80012a2 <__aeabi_fsub+0x14e>
 8001190:	2dff      	cmp	r5, #255	@ 0xff
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0x42>
 8001194:	e0ef      	b.n	8001376 <__aeabi_fsub+0x222>
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	04d2      	lsls	r2, r2, #19
 800119a:	4311      	orrs	r1, r2
 800119c:	2001      	movs	r0, #1
 800119e:	2b1b      	cmp	r3, #27
 80011a0:	dc08      	bgt.n	80011b4 <__aeabi_fsub+0x60>
 80011a2:	0008      	movs	r0, r1
 80011a4:	2220      	movs	r2, #32
 80011a6:	40d8      	lsrs	r0, r3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4099      	lsls	r1, r3
 80011ac:	000b      	movs	r3, r1
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	4193      	sbcs	r3, r2
 80011b2:	4318      	orrs	r0, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	469c      	mov	ip, r3
 80011ba:	4663      	mov	r3, ip
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	d400      	bmi.n	80011c2 <__aeabi_fsub+0x6e>
 80011c0:	e0cd      	b.n	800135e <__aeabi_fsub+0x20a>
 80011c2:	4663      	mov	r3, ip
 80011c4:	019f      	lsls	r7, r3, #6
 80011c6:	09bf      	lsrs	r7, r7, #6
 80011c8:	0038      	movs	r0, r7
 80011ca:	f002 fa93 	bl	80036f4 <__clzsi2>
 80011ce:	003b      	movs	r3, r7
 80011d0:	3805      	subs	r0, #5
 80011d2:	4083      	lsls	r3, r0
 80011d4:	4285      	cmp	r5, r0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_fsub+0x86>
 80011d8:	e0a2      	b.n	8001320 <__aeabi_fsub+0x1cc>
 80011da:	4ab7      	ldr	r2, [pc, #732]	@ (80014b8 <__aeabi_fsub+0x364>)
 80011dc:	1a2d      	subs	r5, r5, r0
 80011de:	401a      	ands	r2, r3
 80011e0:	4694      	mov	ip, r2
 80011e2:	075a      	lsls	r2, r3, #29
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x94>
 80011e6:	e0c3      	b.n	8001370 <__aeabi_fsub+0x21c>
 80011e8:	220f      	movs	r2, #15
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x9e>
 80011f0:	e0be      	b.n	8001370 <__aeabi_fsub+0x21c>
 80011f2:	2304      	movs	r3, #4
 80011f4:	4698      	mov	r8, r3
 80011f6:	44c4      	add	ip, r8
 80011f8:	4663      	mov	r3, ip
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	d400      	bmi.n	8001200 <__aeabi_fsub+0xac>
 80011fe:	e0b7      	b.n	8001370 <__aeabi_fsub+0x21c>
 8001200:	1c68      	adds	r0, r5, #1
 8001202:	2dfe      	cmp	r5, #254	@ 0xfe
 8001204:	d000      	beq.n	8001208 <__aeabi_fsub+0xb4>
 8001206:	e0a5      	b.n	8001354 <__aeabi_fsub+0x200>
 8001208:	20ff      	movs	r0, #255	@ 0xff
 800120a:	2200      	movs	r2, #0
 800120c:	05c0      	lsls	r0, r0, #23
 800120e:	4310      	orrs	r0, r2
 8001210:	07e4      	lsls	r4, r4, #31
 8001212:	4320      	orrs	r0, r4
 8001214:	bcc0      	pop	{r6, r7}
 8001216:	46b9      	mov	r9, r7
 8001218:	46b0      	mov	r8, r6
 800121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121c:	2b00      	cmp	r3, #0
 800121e:	dc00      	bgt.n	8001222 <__aeabi_fsub+0xce>
 8001220:	e1eb      	b.n	80015fa <__aeabi_fsub+0x4a6>
 8001222:	2a00      	cmp	r2, #0
 8001224:	d046      	beq.n	80012b4 <__aeabi_fsub+0x160>
 8001226:	2dff      	cmp	r5, #255	@ 0xff
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0xd8>
 800122a:	e0a4      	b.n	8001376 <__aeabi_fsub+0x222>
 800122c:	2280      	movs	r2, #128	@ 0x80
 800122e:	04d2      	lsls	r2, r2, #19
 8001230:	4311      	orrs	r1, r2
 8001232:	2b1b      	cmp	r3, #27
 8001234:	dc00      	bgt.n	8001238 <__aeabi_fsub+0xe4>
 8001236:	e0fb      	b.n	8001430 <__aeabi_fsub+0x2dc>
 8001238:	2305      	movs	r3, #5
 800123a:	4698      	mov	r8, r3
 800123c:	002b      	movs	r3, r5
 800123e:	44c4      	add	ip, r8
 8001240:	4662      	mov	r2, ip
 8001242:	08d7      	lsrs	r7, r2, #3
 8001244:	2bff      	cmp	r3, #255	@ 0xff
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0xf6>
 8001248:	e095      	b.n	8001376 <__aeabi_fsub+0x222>
 800124a:	027a      	lsls	r2, r7, #9
 800124c:	0a52      	lsrs	r2, r2, #9
 800124e:	b2d8      	uxtb	r0, r3
 8001250:	e7dc      	b.n	800120c <__aeabi_fsub+0xb8>
 8001252:	002b      	movs	r3, r5
 8001254:	3bff      	subs	r3, #255	@ 0xff
 8001256:	4699      	mov	r9, r3
 8001258:	2900      	cmp	r1, #0
 800125a:	d118      	bne.n	800128e <__aeabi_fsub+0x13a>
 800125c:	2301      	movs	r3, #1
 800125e:	405e      	eors	r6, r3
 8001260:	42b4      	cmp	r4, r6
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x112>
 8001264:	e0ca      	b.n	80013fc <__aeabi_fsub+0x2a8>
 8001266:	464b      	mov	r3, r9
 8001268:	2b00      	cmp	r3, #0
 800126a:	d02d      	beq.n	80012c8 <__aeabi_fsub+0x174>
 800126c:	2d00      	cmp	r5, #0
 800126e:	d000      	beq.n	8001272 <__aeabi_fsub+0x11e>
 8001270:	e13c      	b.n	80014ec <__aeabi_fsub+0x398>
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	4664      	mov	r4, ip
 8001276:	2c00      	cmp	r4, #0
 8001278:	d100      	bne.n	800127c <__aeabi_fsub+0x128>
 800127a:	e15f      	b.n	800153c <__aeabi_fsub+0x3e8>
 800127c:	1e5d      	subs	r5, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d100      	bne.n	8001284 <__aeabi_fsub+0x130>
 8001282:	e174      	b.n	800156e <__aeabi_fsub+0x41a>
 8001284:	0034      	movs	r4, r6
 8001286:	2bff      	cmp	r3, #255	@ 0xff
 8001288:	d074      	beq.n	8001374 <__aeabi_fsub+0x220>
 800128a:	002b      	movs	r3, r5
 800128c:	e103      	b.n	8001496 <__aeabi_fsub+0x342>
 800128e:	42b4      	cmp	r4, r6
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x140>
 8001292:	e09c      	b.n	80013ce <__aeabi_fsub+0x27a>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <__aeabi_fsub+0x174>
 8001298:	2d00      	cmp	r5, #0
 800129a:	d0ea      	beq.n	8001272 <__aeabi_fsub+0x11e>
 800129c:	0007      	movs	r7, r0
 800129e:	0034      	movs	r4, r6
 80012a0:	e06c      	b.n	800137c <__aeabi_fsub+0x228>
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d0cc      	beq.n	8001240 <__aeabi_fsub+0xec>
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d02b      	beq.n	8001304 <__aeabi_fsub+0x1b0>
 80012ac:	2bff      	cmp	r3, #255	@ 0xff
 80012ae:	d062      	beq.n	8001376 <__aeabi_fsub+0x222>
 80012b0:	0013      	movs	r3, r2
 80012b2:	e773      	b.n	800119c <__aeabi_fsub+0x48>
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d0c3      	beq.n	8001240 <__aeabi_fsub+0xec>
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x16c>
 80012be:	e11e      	b.n	80014fe <__aeabi_fsub+0x3aa>
 80012c0:	2bff      	cmp	r3, #255	@ 0xff
 80012c2:	d058      	beq.n	8001376 <__aeabi_fsub+0x222>
 80012c4:	0013      	movs	r3, r2
 80012c6:	e7b4      	b.n	8001232 <__aeabi_fsub+0xde>
 80012c8:	22fe      	movs	r2, #254	@ 0xfe
 80012ca:	1c6b      	adds	r3, r5, #1
 80012cc:	421a      	tst	r2, r3
 80012ce:	d10d      	bne.n	80012ec <__aeabi_fsub+0x198>
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d060      	beq.n	8001396 <__aeabi_fsub+0x242>
 80012d4:	4663      	mov	r3, ip
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d000      	beq.n	80012dc <__aeabi_fsub+0x188>
 80012da:	e120      	b.n	800151e <__aeabi_fsub+0x3ca>
 80012dc:	2900      	cmp	r1, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_fsub+0x18e>
 80012e0:	e128      	b.n	8001534 <__aeabi_fsub+0x3e0>
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	2400      	movs	r4, #0
 80012e6:	20ff      	movs	r0, #255	@ 0xff
 80012e8:	03d2      	lsls	r2, r2, #15
 80012ea:	e78f      	b.n	800120c <__aeabi_fsub+0xb8>
 80012ec:	4663      	mov	r3, ip
 80012ee:	1a5f      	subs	r7, r3, r1
 80012f0:	017b      	lsls	r3, r7, #5
 80012f2:	d500      	bpl.n	80012f6 <__aeabi_fsub+0x1a2>
 80012f4:	e0fe      	b.n	80014f4 <__aeabi_fsub+0x3a0>
 80012f6:	2f00      	cmp	r7, #0
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0x1a8>
 80012fa:	e765      	b.n	80011c8 <__aeabi_fsub+0x74>
 80012fc:	2400      	movs	r4, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	2200      	movs	r2, #0
 8001302:	e783      	b.n	800120c <__aeabi_fsub+0xb8>
 8001304:	4663      	mov	r3, ip
 8001306:	1a59      	subs	r1, r3, r1
 8001308:	014b      	lsls	r3, r1, #5
 800130a:	d400      	bmi.n	800130e <__aeabi_fsub+0x1ba>
 800130c:	e119      	b.n	8001542 <__aeabi_fsub+0x3ee>
 800130e:	018f      	lsls	r7, r1, #6
 8001310:	09bf      	lsrs	r7, r7, #6
 8001312:	0038      	movs	r0, r7
 8001314:	f002 f9ee 	bl	80036f4 <__clzsi2>
 8001318:	003b      	movs	r3, r7
 800131a:	3805      	subs	r0, #5
 800131c:	4083      	lsls	r3, r0
 800131e:	2501      	movs	r5, #1
 8001320:	2220      	movs	r2, #32
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	3001      	adds	r0, #1
 8001326:	1a12      	subs	r2, r2, r0
 8001328:	0019      	movs	r1, r3
 800132a:	4093      	lsls	r3, r2
 800132c:	40c1      	lsrs	r1, r0
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	4193      	sbcs	r3, r2
 8001332:	4319      	orrs	r1, r3
 8001334:	468c      	mov	ip, r1
 8001336:	1e0b      	subs	r3, r1, #0
 8001338:	d0e1      	beq.n	80012fe <__aeabi_fsub+0x1aa>
 800133a:	075b      	lsls	r3, r3, #29
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x1ec>
 800133e:	e152      	b.n	80015e6 <__aeabi_fsub+0x492>
 8001340:	230f      	movs	r3, #15
 8001342:	2500      	movs	r5, #0
 8001344:	400b      	ands	r3, r1
 8001346:	2b04      	cmp	r3, #4
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x1f8>
 800134a:	e752      	b.n	80011f2 <__aeabi_fsub+0x9e>
 800134c:	2001      	movs	r0, #1
 800134e:	014a      	lsls	r2, r1, #5
 8001350:	d400      	bmi.n	8001354 <__aeabi_fsub+0x200>
 8001352:	e092      	b.n	800147a <__aeabi_fsub+0x326>
 8001354:	b2c0      	uxtb	r0, r0
 8001356:	4663      	mov	r3, ip
 8001358:	019a      	lsls	r2, r3, #6
 800135a:	0a52      	lsrs	r2, r2, #9
 800135c:	e756      	b.n	800120c <__aeabi_fsub+0xb8>
 800135e:	4663      	mov	r3, ip
 8001360:	075b      	lsls	r3, r3, #29
 8001362:	d005      	beq.n	8001370 <__aeabi_fsub+0x21c>
 8001364:	230f      	movs	r3, #15
 8001366:	4662      	mov	r2, ip
 8001368:	4013      	ands	r3, r2
 800136a:	2b04      	cmp	r3, #4
 800136c:	d000      	beq.n	8001370 <__aeabi_fsub+0x21c>
 800136e:	e740      	b.n	80011f2 <__aeabi_fsub+0x9e>
 8001370:	002b      	movs	r3, r5
 8001372:	e765      	b.n	8001240 <__aeabi_fsub+0xec>
 8001374:	0007      	movs	r7, r0
 8001376:	2f00      	cmp	r7, #0
 8001378:	d100      	bne.n	800137c <__aeabi_fsub+0x228>
 800137a:	e745      	b.n	8001208 <__aeabi_fsub+0xb4>
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	03d2      	lsls	r2, r2, #15
 8001380:	433a      	orrs	r2, r7
 8001382:	0252      	lsls	r2, r2, #9
 8001384:	20ff      	movs	r0, #255	@ 0xff
 8001386:	0a52      	lsrs	r2, r2, #9
 8001388:	e740      	b.n	800120c <__aeabi_fsub+0xb8>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d179      	bne.n	8001482 <__aeabi_fsub+0x32e>
 800138e:	22fe      	movs	r2, #254	@ 0xfe
 8001390:	1c6b      	adds	r3, r5, #1
 8001392:	421a      	tst	r2, r3
 8001394:	d1aa      	bne.n	80012ec <__aeabi_fsub+0x198>
 8001396:	4663      	mov	r3, ip
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x24a>
 800139c:	e0f5      	b.n	800158a <__aeabi_fsub+0x436>
 800139e:	2900      	cmp	r1, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_fsub+0x250>
 80013a2:	e0d1      	b.n	8001548 <__aeabi_fsub+0x3f4>
 80013a4:	1a5f      	subs	r7, r3, r1
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	04db      	lsls	r3, r3, #19
 80013aa:	421f      	tst	r7, r3
 80013ac:	d100      	bne.n	80013b0 <__aeabi_fsub+0x25c>
 80013ae:	e10e      	b.n	80015ce <__aeabi_fsub+0x47a>
 80013b0:	4662      	mov	r2, ip
 80013b2:	2401      	movs	r4, #1
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	4694      	mov	ip, r2
 80013b8:	2000      	movs	r0, #0
 80013ba:	4034      	ands	r4, r6
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_fsub+0x26e>
 80013c0:	e724      	b.n	800120c <__aeabi_fsub+0xb8>
 80013c2:	2001      	movs	r0, #1
 80013c4:	421a      	tst	r2, r3
 80013c6:	d1c6      	bne.n	8001356 <__aeabi_fsub+0x202>
 80013c8:	2300      	movs	r3, #0
 80013ca:	08d7      	lsrs	r7, r2, #3
 80013cc:	e73d      	b.n	800124a <__aeabi_fsub+0xf6>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d017      	beq.n	8001402 <__aeabi_fsub+0x2ae>
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d000      	beq.n	80013d8 <__aeabi_fsub+0x284>
 80013d6:	e0af      	b.n	8001538 <__aeabi_fsub+0x3e4>
 80013d8:	23ff      	movs	r3, #255	@ 0xff
 80013da:	4665      	mov	r5, ip
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d100      	bne.n	80013e2 <__aeabi_fsub+0x28e>
 80013e0:	e0ad      	b.n	800153e <__aeabi_fsub+0x3ea>
 80013e2:	1e5e      	subs	r6, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0x296>
 80013e8:	e089      	b.n	80014fe <__aeabi_fsub+0x3aa>
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d0c2      	beq.n	8001374 <__aeabi_fsub+0x220>
 80013ee:	2e1b      	cmp	r6, #27
 80013f0:	dc00      	bgt.n	80013f4 <__aeabi_fsub+0x2a0>
 80013f2:	e0ab      	b.n	800154c <__aeabi_fsub+0x3f8>
 80013f4:	1d4b      	adds	r3, r1, #5
 80013f6:	469c      	mov	ip, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	e721      	b.n	8001240 <__aeabi_fsub+0xec>
 80013fc:	464b      	mov	r3, r9
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d170      	bne.n	80014e4 <__aeabi_fsub+0x390>
 8001402:	22fe      	movs	r2, #254	@ 0xfe
 8001404:	1c6b      	adds	r3, r5, #1
 8001406:	421a      	tst	r2, r3
 8001408:	d15e      	bne.n	80014c8 <__aeabi_fsub+0x374>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d000      	beq.n	8001410 <__aeabi_fsub+0x2bc>
 800140e:	e0c3      	b.n	8001598 <__aeabi_fsub+0x444>
 8001410:	4663      	mov	r3, ip
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_fsub+0x2c4>
 8001416:	e0d0      	b.n	80015ba <__aeabi_fsub+0x466>
 8001418:	2900      	cmp	r1, #0
 800141a:	d100      	bne.n	800141e <__aeabi_fsub+0x2ca>
 800141c:	e094      	b.n	8001548 <__aeabi_fsub+0x3f4>
 800141e:	000a      	movs	r2, r1
 8001420:	4462      	add	r2, ip
 8001422:	0153      	lsls	r3, r2, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x2d4>
 8001426:	e0d8      	b.n	80015da <__aeabi_fsub+0x486>
 8001428:	0192      	lsls	r2, r2, #6
 800142a:	2001      	movs	r0, #1
 800142c:	0a52      	lsrs	r2, r2, #9
 800142e:	e6ed      	b.n	800120c <__aeabi_fsub+0xb8>
 8001430:	0008      	movs	r0, r1
 8001432:	2220      	movs	r2, #32
 8001434:	40d8      	lsrs	r0, r3
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4099      	lsls	r1, r3
 800143a:	000b      	movs	r3, r1
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	4193      	sbcs	r3, r2
 8001440:	4303      	orrs	r3, r0
 8001442:	449c      	add	ip, r3
 8001444:	4663      	mov	r3, ip
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	d589      	bpl.n	800135e <__aeabi_fsub+0x20a>
 800144a:	3501      	adds	r5, #1
 800144c:	2dff      	cmp	r5, #255	@ 0xff
 800144e:	d100      	bne.n	8001452 <__aeabi_fsub+0x2fe>
 8001450:	e6da      	b.n	8001208 <__aeabi_fsub+0xb4>
 8001452:	4662      	mov	r2, ip
 8001454:	2301      	movs	r3, #1
 8001456:	4919      	ldr	r1, [pc, #100]	@ (80014bc <__aeabi_fsub+0x368>)
 8001458:	4013      	ands	r3, r2
 800145a:	0852      	lsrs	r2, r2, #1
 800145c:	400a      	ands	r2, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4694      	mov	ip, r2
 8001464:	075b      	lsls	r3, r3, #29
 8001466:	d004      	beq.n	8001472 <__aeabi_fsub+0x31e>
 8001468:	230f      	movs	r3, #15
 800146a:	4013      	ands	r3, r2
 800146c:	2b04      	cmp	r3, #4
 800146e:	d000      	beq.n	8001472 <__aeabi_fsub+0x31e>
 8001470:	e6bf      	b.n	80011f2 <__aeabi_fsub+0x9e>
 8001472:	4663      	mov	r3, ip
 8001474:	015b      	lsls	r3, r3, #5
 8001476:	d500      	bpl.n	800147a <__aeabi_fsub+0x326>
 8001478:	e6c2      	b.n	8001200 <__aeabi_fsub+0xac>
 800147a:	4663      	mov	r3, ip
 800147c:	08df      	lsrs	r7, r3, #3
 800147e:	002b      	movs	r3, r5
 8001480:	e6e3      	b.n	800124a <__aeabi_fsub+0xf6>
 8001482:	1b53      	subs	r3, r2, r5
 8001484:	2d00      	cmp	r5, #0
 8001486:	d100      	bne.n	800148a <__aeabi_fsub+0x336>
 8001488:	e6f4      	b.n	8001274 <__aeabi_fsub+0x120>
 800148a:	2080      	movs	r0, #128	@ 0x80
 800148c:	4664      	mov	r4, ip
 800148e:	04c0      	lsls	r0, r0, #19
 8001490:	4304      	orrs	r4, r0
 8001492:	46a4      	mov	ip, r4
 8001494:	0034      	movs	r4, r6
 8001496:	2001      	movs	r0, #1
 8001498:	2b1b      	cmp	r3, #27
 800149a:	dc09      	bgt.n	80014b0 <__aeabi_fsub+0x35c>
 800149c:	2520      	movs	r5, #32
 800149e:	4660      	mov	r0, ip
 80014a0:	40d8      	lsrs	r0, r3
 80014a2:	1aeb      	subs	r3, r5, r3
 80014a4:	4665      	mov	r5, ip
 80014a6:	409d      	lsls	r5, r3
 80014a8:	002b      	movs	r3, r5
 80014aa:	1e5d      	subs	r5, r3, #1
 80014ac:	41ab      	sbcs	r3, r5
 80014ae:	4318      	orrs	r0, r3
 80014b0:	1a0b      	subs	r3, r1, r0
 80014b2:	469c      	mov	ip, r3
 80014b4:	0015      	movs	r5, r2
 80014b6:	e680      	b.n	80011ba <__aeabi_fsub+0x66>
 80014b8:	fbffffff 	.word	0xfbffffff
 80014bc:	7dffffff 	.word	0x7dffffff
 80014c0:	22fe      	movs	r2, #254	@ 0xfe
 80014c2:	1c6b      	adds	r3, r5, #1
 80014c4:	4213      	tst	r3, r2
 80014c6:	d0a3      	beq.n	8001410 <__aeabi_fsub+0x2bc>
 80014c8:	2bff      	cmp	r3, #255	@ 0xff
 80014ca:	d100      	bne.n	80014ce <__aeabi_fsub+0x37a>
 80014cc:	e69c      	b.n	8001208 <__aeabi_fsub+0xb4>
 80014ce:	4461      	add	r1, ip
 80014d0:	0849      	lsrs	r1, r1, #1
 80014d2:	074a      	lsls	r2, r1, #29
 80014d4:	d049      	beq.n	800156a <__aeabi_fsub+0x416>
 80014d6:	220f      	movs	r2, #15
 80014d8:	400a      	ands	r2, r1
 80014da:	2a04      	cmp	r2, #4
 80014dc:	d045      	beq.n	800156a <__aeabi_fsub+0x416>
 80014de:	1d0a      	adds	r2, r1, #4
 80014e0:	4694      	mov	ip, r2
 80014e2:	e6ad      	b.n	8001240 <__aeabi_fsub+0xec>
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d100      	bne.n	80014ea <__aeabi_fsub+0x396>
 80014e8:	e776      	b.n	80013d8 <__aeabi_fsub+0x284>
 80014ea:	e68d      	b.n	8001208 <__aeabi_fsub+0xb4>
 80014ec:	0034      	movs	r4, r6
 80014ee:	20ff      	movs	r0, #255	@ 0xff
 80014f0:	2200      	movs	r2, #0
 80014f2:	e68b      	b.n	800120c <__aeabi_fsub+0xb8>
 80014f4:	4663      	mov	r3, ip
 80014f6:	2401      	movs	r4, #1
 80014f8:	1acf      	subs	r7, r1, r3
 80014fa:	4034      	ands	r4, r6
 80014fc:	e664      	b.n	80011c8 <__aeabi_fsub+0x74>
 80014fe:	4461      	add	r1, ip
 8001500:	014b      	lsls	r3, r1, #5
 8001502:	d56d      	bpl.n	80015e0 <__aeabi_fsub+0x48c>
 8001504:	0848      	lsrs	r0, r1, #1
 8001506:	4944      	ldr	r1, [pc, #272]	@ (8001618 <__aeabi_fsub+0x4c4>)
 8001508:	4001      	ands	r1, r0
 800150a:	0743      	lsls	r3, r0, #29
 800150c:	d02c      	beq.n	8001568 <__aeabi_fsub+0x414>
 800150e:	230f      	movs	r3, #15
 8001510:	4003      	ands	r3, r0
 8001512:	2b04      	cmp	r3, #4
 8001514:	d028      	beq.n	8001568 <__aeabi_fsub+0x414>
 8001516:	1d0b      	adds	r3, r1, #4
 8001518:	469c      	mov	ip, r3
 800151a:	2302      	movs	r3, #2
 800151c:	e690      	b.n	8001240 <__aeabi_fsub+0xec>
 800151e:	2900      	cmp	r1, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_fsub+0x3d0>
 8001522:	e72b      	b.n	800137c <__aeabi_fsub+0x228>
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	03db      	lsls	r3, r3, #15
 8001528:	429f      	cmp	r7, r3
 800152a:	d200      	bcs.n	800152e <__aeabi_fsub+0x3da>
 800152c:	e726      	b.n	800137c <__aeabi_fsub+0x228>
 800152e:	4298      	cmp	r0, r3
 8001530:	d300      	bcc.n	8001534 <__aeabi_fsub+0x3e0>
 8001532:	e723      	b.n	800137c <__aeabi_fsub+0x228>
 8001534:	2401      	movs	r4, #1
 8001536:	4034      	ands	r4, r6
 8001538:	0007      	movs	r7, r0
 800153a:	e71f      	b.n	800137c <__aeabi_fsub+0x228>
 800153c:	0034      	movs	r4, r6
 800153e:	468c      	mov	ip, r1
 8001540:	e67e      	b.n	8001240 <__aeabi_fsub+0xec>
 8001542:	2301      	movs	r3, #1
 8001544:	08cf      	lsrs	r7, r1, #3
 8001546:	e680      	b.n	800124a <__aeabi_fsub+0xf6>
 8001548:	2300      	movs	r3, #0
 800154a:	e67e      	b.n	800124a <__aeabi_fsub+0xf6>
 800154c:	2020      	movs	r0, #32
 800154e:	4665      	mov	r5, ip
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	4085      	lsls	r5, r0
 8001554:	4663      	mov	r3, ip
 8001556:	0028      	movs	r0, r5
 8001558:	40f3      	lsrs	r3, r6
 800155a:	1e45      	subs	r5, r0, #1
 800155c:	41a8      	sbcs	r0, r5
 800155e:	4303      	orrs	r3, r0
 8001560:	469c      	mov	ip, r3
 8001562:	0015      	movs	r5, r2
 8001564:	448c      	add	ip, r1
 8001566:	e76d      	b.n	8001444 <__aeabi_fsub+0x2f0>
 8001568:	2302      	movs	r3, #2
 800156a:	08cf      	lsrs	r7, r1, #3
 800156c:	e66d      	b.n	800124a <__aeabi_fsub+0xf6>
 800156e:	1b0f      	subs	r7, r1, r4
 8001570:	017b      	lsls	r3, r7, #5
 8001572:	d528      	bpl.n	80015c6 <__aeabi_fsub+0x472>
 8001574:	01bf      	lsls	r7, r7, #6
 8001576:	09bf      	lsrs	r7, r7, #6
 8001578:	0038      	movs	r0, r7
 800157a:	f002 f8bb 	bl	80036f4 <__clzsi2>
 800157e:	003b      	movs	r3, r7
 8001580:	3805      	subs	r0, #5
 8001582:	4083      	lsls	r3, r0
 8001584:	0034      	movs	r4, r6
 8001586:	2501      	movs	r5, #1
 8001588:	e6ca      	b.n	8001320 <__aeabi_fsub+0x1cc>
 800158a:	2900      	cmp	r1, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_fsub+0x43c>
 800158e:	e6b5      	b.n	80012fc <__aeabi_fsub+0x1a8>
 8001590:	2401      	movs	r4, #1
 8001592:	0007      	movs	r7, r0
 8001594:	4034      	ands	r4, r6
 8001596:	e658      	b.n	800124a <__aeabi_fsub+0xf6>
 8001598:	4663      	mov	r3, ip
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <__aeabi_fsub+0x44c>
 800159e:	e6e9      	b.n	8001374 <__aeabi_fsub+0x220>
 80015a0:	2900      	cmp	r1, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_fsub+0x452>
 80015a4:	e6ea      	b.n	800137c <__aeabi_fsub+0x228>
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	03db      	lsls	r3, r3, #15
 80015aa:	429f      	cmp	r7, r3
 80015ac:	d200      	bcs.n	80015b0 <__aeabi_fsub+0x45c>
 80015ae:	e6e5      	b.n	800137c <__aeabi_fsub+0x228>
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d300      	bcc.n	80015b6 <__aeabi_fsub+0x462>
 80015b4:	e6e2      	b.n	800137c <__aeabi_fsub+0x228>
 80015b6:	0007      	movs	r7, r0
 80015b8:	e6e0      	b.n	800137c <__aeabi_fsub+0x228>
 80015ba:	2900      	cmp	r1, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_fsub+0x46c>
 80015be:	e69e      	b.n	80012fe <__aeabi_fsub+0x1aa>
 80015c0:	2300      	movs	r3, #0
 80015c2:	08cf      	lsrs	r7, r1, #3
 80015c4:	e641      	b.n	800124a <__aeabi_fsub+0xf6>
 80015c6:	0034      	movs	r4, r6
 80015c8:	2301      	movs	r3, #1
 80015ca:	08ff      	lsrs	r7, r7, #3
 80015cc:	e63d      	b.n	800124a <__aeabi_fsub+0xf6>
 80015ce:	2f00      	cmp	r7, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_fsub+0x480>
 80015d2:	e693      	b.n	80012fc <__aeabi_fsub+0x1a8>
 80015d4:	2300      	movs	r3, #0
 80015d6:	08ff      	lsrs	r7, r7, #3
 80015d8:	e637      	b.n	800124a <__aeabi_fsub+0xf6>
 80015da:	2300      	movs	r3, #0
 80015dc:	08d7      	lsrs	r7, r2, #3
 80015de:	e634      	b.n	800124a <__aeabi_fsub+0xf6>
 80015e0:	2301      	movs	r3, #1
 80015e2:	08cf      	lsrs	r7, r1, #3
 80015e4:	e631      	b.n	800124a <__aeabi_fsub+0xf6>
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	000b      	movs	r3, r1
 80015ea:	04d2      	lsls	r2, r2, #19
 80015ec:	2001      	movs	r0, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	4211      	tst	r1, r2
 80015f2:	d000      	beq.n	80015f6 <__aeabi_fsub+0x4a2>
 80015f4:	e6ae      	b.n	8001354 <__aeabi_fsub+0x200>
 80015f6:	08cf      	lsrs	r7, r1, #3
 80015f8:	e627      	b.n	800124a <__aeabi_fsub+0xf6>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_fsub+0x4ac>
 80015fe:	e75f      	b.n	80014c0 <__aeabi_fsub+0x36c>
 8001600:	1b56      	subs	r6, r2, r5
 8001602:	2d00      	cmp	r5, #0
 8001604:	d101      	bne.n	800160a <__aeabi_fsub+0x4b6>
 8001606:	0033      	movs	r3, r6
 8001608:	e6e7      	b.n	80013da <__aeabi_fsub+0x286>
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	4660      	mov	r0, ip
 800160e:	04db      	lsls	r3, r3, #19
 8001610:	4318      	orrs	r0, r3
 8001612:	4684      	mov	ip, r0
 8001614:	e6eb      	b.n	80013ee <__aeabi_fsub+0x29a>
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	7dffffff 	.word	0x7dffffff

0800161c <__aeabi_fcmpun>:
 800161c:	0243      	lsls	r3, r0, #9
 800161e:	024a      	lsls	r2, r1, #9
 8001620:	0040      	lsls	r0, r0, #1
 8001622:	0049      	lsls	r1, r1, #1
 8001624:	0a5b      	lsrs	r3, r3, #9
 8001626:	0a52      	lsrs	r2, r2, #9
 8001628:	0e09      	lsrs	r1, r1, #24
 800162a:	0e00      	lsrs	r0, r0, #24
 800162c:	28ff      	cmp	r0, #255	@ 0xff
 800162e:	d006      	beq.n	800163e <__aeabi_fcmpun+0x22>
 8001630:	2000      	movs	r0, #0
 8001632:	29ff      	cmp	r1, #255	@ 0xff
 8001634:	d102      	bne.n	800163c <__aeabi_fcmpun+0x20>
 8001636:	1e53      	subs	r3, r2, #1
 8001638:	419a      	sbcs	r2, r3
 800163a:	0010      	movs	r0, r2
 800163c:	4770      	bx	lr
 800163e:	38fe      	subs	r0, #254	@ 0xfe
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1fb      	bne.n	800163c <__aeabi_fcmpun+0x20>
 8001644:	e7f4      	b.n	8001630 <__aeabi_fcmpun+0x14>
 8001646:	46c0      	nop			@ (mov r8, r8)

08001648 <__aeabi_f2iz>:
 8001648:	0241      	lsls	r1, r0, #9
 800164a:	0042      	lsls	r2, r0, #1
 800164c:	0fc3      	lsrs	r3, r0, #31
 800164e:	0a49      	lsrs	r1, r1, #9
 8001650:	2000      	movs	r0, #0
 8001652:	0e12      	lsrs	r2, r2, #24
 8001654:	2a7e      	cmp	r2, #126	@ 0x7e
 8001656:	dd03      	ble.n	8001660 <__aeabi_f2iz+0x18>
 8001658:	2a9d      	cmp	r2, #157	@ 0x9d
 800165a:	dd02      	ble.n	8001662 <__aeabi_f2iz+0x1a>
 800165c:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <__aeabi_f2iz+0x3c>)
 800165e:	1898      	adds	r0, r3, r2
 8001660:	4770      	bx	lr
 8001662:	2080      	movs	r0, #128	@ 0x80
 8001664:	0400      	lsls	r0, r0, #16
 8001666:	4301      	orrs	r1, r0
 8001668:	2a95      	cmp	r2, #149	@ 0x95
 800166a:	dc07      	bgt.n	800167c <__aeabi_f2iz+0x34>
 800166c:	2096      	movs	r0, #150	@ 0x96
 800166e:	1a82      	subs	r2, r0, r2
 8001670:	40d1      	lsrs	r1, r2
 8001672:	4248      	negs	r0, r1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f3      	bne.n	8001660 <__aeabi_f2iz+0x18>
 8001678:	0008      	movs	r0, r1
 800167a:	e7f1      	b.n	8001660 <__aeabi_f2iz+0x18>
 800167c:	3a96      	subs	r2, #150	@ 0x96
 800167e:	4091      	lsls	r1, r2
 8001680:	e7f7      	b.n	8001672 <__aeabi_f2iz+0x2a>
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	7fffffff 	.word	0x7fffffff

08001688 <__aeabi_i2f>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	2800      	cmp	r0, #0
 800168c:	d012      	beq.n	80016b4 <__aeabi_i2f+0x2c>
 800168e:	17c3      	asrs	r3, r0, #31
 8001690:	18c5      	adds	r5, r0, r3
 8001692:	405d      	eors	r5, r3
 8001694:	0fc4      	lsrs	r4, r0, #31
 8001696:	0028      	movs	r0, r5
 8001698:	f002 f82c 	bl	80036f4 <__clzsi2>
 800169c:	239e      	movs	r3, #158	@ 0x9e
 800169e:	1a1b      	subs	r3, r3, r0
 80016a0:	2b96      	cmp	r3, #150	@ 0x96
 80016a2:	dc0f      	bgt.n	80016c4 <__aeabi_i2f+0x3c>
 80016a4:	2808      	cmp	r0, #8
 80016a6:	d038      	beq.n	800171a <__aeabi_i2f+0x92>
 80016a8:	3808      	subs	r0, #8
 80016aa:	4085      	lsls	r5, r0
 80016ac:	026d      	lsls	r5, r5, #9
 80016ae:	0a6d      	lsrs	r5, r5, #9
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	e002      	b.n	80016ba <__aeabi_i2f+0x32>
 80016b4:	2400      	movs	r4, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	05c0      	lsls	r0, r0, #23
 80016bc:	4328      	orrs	r0, r5
 80016be:	07e4      	lsls	r4, r4, #31
 80016c0:	4320      	orrs	r0, r4
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	2b99      	cmp	r3, #153	@ 0x99
 80016c6:	dc14      	bgt.n	80016f2 <__aeabi_i2f+0x6a>
 80016c8:	1f42      	subs	r2, r0, #5
 80016ca:	4095      	lsls	r5, r2
 80016cc:	002a      	movs	r2, r5
 80016ce:	4915      	ldr	r1, [pc, #84]	@ (8001724 <__aeabi_i2f+0x9c>)
 80016d0:	4011      	ands	r1, r2
 80016d2:	0755      	lsls	r5, r2, #29
 80016d4:	d01c      	beq.n	8001710 <__aeabi_i2f+0x88>
 80016d6:	250f      	movs	r5, #15
 80016d8:	402a      	ands	r2, r5
 80016da:	2a04      	cmp	r2, #4
 80016dc:	d018      	beq.n	8001710 <__aeabi_i2f+0x88>
 80016de:	3104      	adds	r1, #4
 80016e0:	08ca      	lsrs	r2, r1, #3
 80016e2:	0149      	lsls	r1, r1, #5
 80016e4:	d515      	bpl.n	8001712 <__aeabi_i2f+0x8a>
 80016e6:	239f      	movs	r3, #159	@ 0x9f
 80016e8:	0252      	lsls	r2, r2, #9
 80016ea:	1a18      	subs	r0, r3, r0
 80016ec:	0a55      	lsrs	r5, r2, #9
 80016ee:	b2c0      	uxtb	r0, r0
 80016f0:	e7e3      	b.n	80016ba <__aeabi_i2f+0x32>
 80016f2:	2205      	movs	r2, #5
 80016f4:	0029      	movs	r1, r5
 80016f6:	1a12      	subs	r2, r2, r0
 80016f8:	40d1      	lsrs	r1, r2
 80016fa:	0002      	movs	r2, r0
 80016fc:	321b      	adds	r2, #27
 80016fe:	4095      	lsls	r5, r2
 8001700:	002a      	movs	r2, r5
 8001702:	1e55      	subs	r5, r2, #1
 8001704:	41aa      	sbcs	r2, r5
 8001706:	430a      	orrs	r2, r1
 8001708:	4906      	ldr	r1, [pc, #24]	@ (8001724 <__aeabi_i2f+0x9c>)
 800170a:	4011      	ands	r1, r2
 800170c:	0755      	lsls	r5, r2, #29
 800170e:	d1e2      	bne.n	80016d6 <__aeabi_i2f+0x4e>
 8001710:	08ca      	lsrs	r2, r1, #3
 8001712:	0252      	lsls	r2, r2, #9
 8001714:	0a55      	lsrs	r5, r2, #9
 8001716:	b2d8      	uxtb	r0, r3
 8001718:	e7cf      	b.n	80016ba <__aeabi_i2f+0x32>
 800171a:	026d      	lsls	r5, r5, #9
 800171c:	0a6d      	lsrs	r5, r5, #9
 800171e:	308e      	adds	r0, #142	@ 0x8e
 8001720:	e7cb      	b.n	80016ba <__aeabi_i2f+0x32>
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	fbffffff 	.word	0xfbffffff

08001728 <__aeabi_ui2f>:
 8001728:	b510      	push	{r4, lr}
 800172a:	1e04      	subs	r4, r0, #0
 800172c:	d00d      	beq.n	800174a <__aeabi_ui2f+0x22>
 800172e:	f001 ffe1 	bl	80036f4 <__clzsi2>
 8001732:	239e      	movs	r3, #158	@ 0x9e
 8001734:	1a1b      	subs	r3, r3, r0
 8001736:	2b96      	cmp	r3, #150	@ 0x96
 8001738:	dc0c      	bgt.n	8001754 <__aeabi_ui2f+0x2c>
 800173a:	2808      	cmp	r0, #8
 800173c:	d034      	beq.n	80017a8 <__aeabi_ui2f+0x80>
 800173e:	3808      	subs	r0, #8
 8001740:	4084      	lsls	r4, r0
 8001742:	0264      	lsls	r4, r4, #9
 8001744:	0a64      	lsrs	r4, r4, #9
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	e001      	b.n	800174e <__aeabi_ui2f+0x26>
 800174a:	2000      	movs	r0, #0
 800174c:	2400      	movs	r4, #0
 800174e:	05c0      	lsls	r0, r0, #23
 8001750:	4320      	orrs	r0, r4
 8001752:	bd10      	pop	{r4, pc}
 8001754:	2b99      	cmp	r3, #153	@ 0x99
 8001756:	dc13      	bgt.n	8001780 <__aeabi_ui2f+0x58>
 8001758:	1f42      	subs	r2, r0, #5
 800175a:	4094      	lsls	r4, r2
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <__aeabi_ui2f+0x88>)
 800175e:	4022      	ands	r2, r4
 8001760:	0761      	lsls	r1, r4, #29
 8001762:	d01c      	beq.n	800179e <__aeabi_ui2f+0x76>
 8001764:	210f      	movs	r1, #15
 8001766:	4021      	ands	r1, r4
 8001768:	2904      	cmp	r1, #4
 800176a:	d018      	beq.n	800179e <__aeabi_ui2f+0x76>
 800176c:	3204      	adds	r2, #4
 800176e:	08d4      	lsrs	r4, r2, #3
 8001770:	0152      	lsls	r2, r2, #5
 8001772:	d515      	bpl.n	80017a0 <__aeabi_ui2f+0x78>
 8001774:	239f      	movs	r3, #159	@ 0x9f
 8001776:	0264      	lsls	r4, r4, #9
 8001778:	1a18      	subs	r0, r3, r0
 800177a:	0a64      	lsrs	r4, r4, #9
 800177c:	b2c0      	uxtb	r0, r0
 800177e:	e7e6      	b.n	800174e <__aeabi_ui2f+0x26>
 8001780:	0002      	movs	r2, r0
 8001782:	0021      	movs	r1, r4
 8001784:	321b      	adds	r2, #27
 8001786:	4091      	lsls	r1, r2
 8001788:	000a      	movs	r2, r1
 800178a:	1e51      	subs	r1, r2, #1
 800178c:	418a      	sbcs	r2, r1
 800178e:	2105      	movs	r1, #5
 8001790:	1a09      	subs	r1, r1, r0
 8001792:	40cc      	lsrs	r4, r1
 8001794:	4314      	orrs	r4, r2
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <__aeabi_ui2f+0x88>)
 8001798:	4022      	ands	r2, r4
 800179a:	0761      	lsls	r1, r4, #29
 800179c:	d1e2      	bne.n	8001764 <__aeabi_ui2f+0x3c>
 800179e:	08d4      	lsrs	r4, r2, #3
 80017a0:	0264      	lsls	r4, r4, #9
 80017a2:	0a64      	lsrs	r4, r4, #9
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	e7d2      	b.n	800174e <__aeabi_ui2f+0x26>
 80017a8:	0264      	lsls	r4, r4, #9
 80017aa:	0a64      	lsrs	r4, r4, #9
 80017ac:	308e      	adds	r0, #142	@ 0x8e
 80017ae:	e7ce      	b.n	800174e <__aeabi_ui2f+0x26>
 80017b0:	fbffffff 	.word	0xfbffffff

080017b4 <__aeabi_dadd>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	464f      	mov	r7, r9
 80017b8:	4646      	mov	r6, r8
 80017ba:	46d6      	mov	lr, sl
 80017bc:	b5c0      	push	{r6, r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	9000      	str	r0, [sp, #0]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	030e      	lsls	r6, r1, #12
 80017c6:	004c      	lsls	r4, r1, #1
 80017c8:	0fcd      	lsrs	r5, r1, #31
 80017ca:	0a71      	lsrs	r1, r6, #9
 80017cc:	9e00      	ldr	r6, [sp, #0]
 80017ce:	005f      	lsls	r7, r3, #1
 80017d0:	0f76      	lsrs	r6, r6, #29
 80017d2:	430e      	orrs	r6, r1
 80017d4:	9900      	ldr	r1, [sp, #0]
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4689      	mov	r9, r1
 80017de:	0319      	lsls	r1, r3, #12
 80017e0:	0d7b      	lsrs	r3, r7, #21
 80017e2:	4698      	mov	r8, r3
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	0a49      	lsrs	r1, r1, #9
 80017e8:	0fdb      	lsrs	r3, r3, #31
 80017ea:	469c      	mov	ip, r3
 80017ec:	9b00      	ldr	r3, [sp, #0]
 80017ee:	9a00      	ldr	r2, [sp, #0]
 80017f0:	0f5b      	lsrs	r3, r3, #29
 80017f2:	430b      	orrs	r3, r1
 80017f4:	4641      	mov	r1, r8
 80017f6:	0d64      	lsrs	r4, r4, #21
 80017f8:	00d2      	lsls	r2, r2, #3
 80017fa:	1a61      	subs	r1, r4, r1
 80017fc:	4565      	cmp	r5, ip
 80017fe:	d100      	bne.n	8001802 <__aeabi_dadd+0x4e>
 8001800:	e0a6      	b.n	8001950 <__aeabi_dadd+0x19c>
 8001802:	2900      	cmp	r1, #0
 8001804:	dd72      	ble.n	80018ec <__aeabi_dadd+0x138>
 8001806:	4647      	mov	r7, r8
 8001808:	2f00      	cmp	r7, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x5a>
 800180c:	e0dd      	b.n	80019ca <__aeabi_dadd+0x216>
 800180e:	4fcc      	ldr	r7, [pc, #816]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001810:	42bc      	cmp	r4, r7
 8001812:	d100      	bne.n	8001816 <__aeabi_dadd+0x62>
 8001814:	e19a      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001816:	2701      	movs	r7, #1
 8001818:	2938      	cmp	r1, #56	@ 0x38
 800181a:	dc17      	bgt.n	800184c <__aeabi_dadd+0x98>
 800181c:	2780      	movs	r7, #128	@ 0x80
 800181e:	043f      	lsls	r7, r7, #16
 8001820:	433b      	orrs	r3, r7
 8001822:	291f      	cmp	r1, #31
 8001824:	dd00      	ble.n	8001828 <__aeabi_dadd+0x74>
 8001826:	e1dd      	b.n	8001be4 <__aeabi_dadd+0x430>
 8001828:	2720      	movs	r7, #32
 800182a:	1a78      	subs	r0, r7, r1
 800182c:	001f      	movs	r7, r3
 800182e:	4087      	lsls	r7, r0
 8001830:	46ba      	mov	sl, r7
 8001832:	0017      	movs	r7, r2
 8001834:	40cf      	lsrs	r7, r1
 8001836:	4684      	mov	ip, r0
 8001838:	0038      	movs	r0, r7
 800183a:	4657      	mov	r7, sl
 800183c:	4307      	orrs	r7, r0
 800183e:	4660      	mov	r0, ip
 8001840:	4082      	lsls	r2, r0
 8001842:	40cb      	lsrs	r3, r1
 8001844:	1e50      	subs	r0, r2, #1
 8001846:	4182      	sbcs	r2, r0
 8001848:	1af6      	subs	r6, r6, r3
 800184a:	4317      	orrs	r7, r2
 800184c:	464b      	mov	r3, r9
 800184e:	1bdf      	subs	r7, r3, r7
 8001850:	45b9      	cmp	r9, r7
 8001852:	4180      	sbcs	r0, r0
 8001854:	4240      	negs	r0, r0
 8001856:	1a36      	subs	r6, r6, r0
 8001858:	0233      	lsls	r3, r6, #8
 800185a:	d400      	bmi.n	800185e <__aeabi_dadd+0xaa>
 800185c:	e0ff      	b.n	8001a5e <__aeabi_dadd+0x2aa>
 800185e:	0276      	lsls	r6, r6, #9
 8001860:	0a76      	lsrs	r6, r6, #9
 8001862:	2e00      	cmp	r6, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0xb4>
 8001866:	e13c      	b.n	8001ae2 <__aeabi_dadd+0x32e>
 8001868:	0030      	movs	r0, r6
 800186a:	f001 ff43 	bl	80036f4 <__clzsi2>
 800186e:	0003      	movs	r3, r0
 8001870:	3b08      	subs	r3, #8
 8001872:	2120      	movs	r1, #32
 8001874:	0038      	movs	r0, r7
 8001876:	1aca      	subs	r2, r1, r3
 8001878:	40d0      	lsrs	r0, r2
 800187a:	409e      	lsls	r6, r3
 800187c:	0002      	movs	r2, r0
 800187e:	409f      	lsls	r7, r3
 8001880:	4332      	orrs	r2, r6
 8001882:	429c      	cmp	r4, r3
 8001884:	dd00      	ble.n	8001888 <__aeabi_dadd+0xd4>
 8001886:	e1a6      	b.n	8001bd6 <__aeabi_dadd+0x422>
 8001888:	1b18      	subs	r0, r3, r4
 800188a:	3001      	adds	r0, #1
 800188c:	1a09      	subs	r1, r1, r0
 800188e:	003e      	movs	r6, r7
 8001890:	408f      	lsls	r7, r1
 8001892:	40c6      	lsrs	r6, r0
 8001894:	1e7b      	subs	r3, r7, #1
 8001896:	419f      	sbcs	r7, r3
 8001898:	0013      	movs	r3, r2
 800189a:	408b      	lsls	r3, r1
 800189c:	4337      	orrs	r7, r6
 800189e:	431f      	orrs	r7, r3
 80018a0:	40c2      	lsrs	r2, r0
 80018a2:	003b      	movs	r3, r7
 80018a4:	0016      	movs	r6, r2
 80018a6:	2400      	movs	r4, #0
 80018a8:	4313      	orrs	r3, r2
 80018aa:	d100      	bne.n	80018ae <__aeabi_dadd+0xfa>
 80018ac:	e1df      	b.n	8001c6e <__aeabi_dadd+0x4ba>
 80018ae:	077b      	lsls	r3, r7, #29
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dadd+0x100>
 80018b2:	e332      	b.n	8001f1a <__aeabi_dadd+0x766>
 80018b4:	230f      	movs	r3, #15
 80018b6:	003a      	movs	r2, r7
 80018b8:	403b      	ands	r3, r7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d004      	beq.n	80018c8 <__aeabi_dadd+0x114>
 80018be:	1d3a      	adds	r2, r7, #4
 80018c0:	42ba      	cmp	r2, r7
 80018c2:	41bf      	sbcs	r7, r7
 80018c4:	427f      	negs	r7, r7
 80018c6:	19f6      	adds	r6, r6, r7
 80018c8:	0233      	lsls	r3, r6, #8
 80018ca:	d400      	bmi.n	80018ce <__aeabi_dadd+0x11a>
 80018cc:	e323      	b.n	8001f16 <__aeabi_dadd+0x762>
 80018ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80018d0:	3401      	adds	r4, #1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x124>
 80018d6:	e0b4      	b.n	8001a42 <__aeabi_dadd+0x28e>
 80018d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b44 <__aeabi_dadd+0x390>)
 80018da:	0564      	lsls	r4, r4, #21
 80018dc:	401e      	ands	r6, r3
 80018de:	0d64      	lsrs	r4, r4, #21
 80018e0:	0777      	lsls	r7, r6, #29
 80018e2:	08d2      	lsrs	r2, r2, #3
 80018e4:	0276      	lsls	r6, r6, #9
 80018e6:	4317      	orrs	r7, r2
 80018e8:	0b36      	lsrs	r6, r6, #12
 80018ea:	e0ac      	b.n	8001a46 <__aeabi_dadd+0x292>
 80018ec:	2900      	cmp	r1, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dadd+0x13e>
 80018f0:	e07e      	b.n	80019f0 <__aeabi_dadd+0x23c>
 80018f2:	4641      	mov	r1, r8
 80018f4:	1b09      	subs	r1, r1, r4
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d000      	beq.n	80018fc <__aeabi_dadd+0x148>
 80018fa:	e160      	b.n	8001bbe <__aeabi_dadd+0x40a>
 80018fc:	0034      	movs	r4, r6
 80018fe:	4648      	mov	r0, r9
 8001900:	4304      	orrs	r4, r0
 8001902:	d100      	bne.n	8001906 <__aeabi_dadd+0x152>
 8001904:	e1c9      	b.n	8001c9a <__aeabi_dadd+0x4e6>
 8001906:	1e4c      	subs	r4, r1, #1
 8001908:	2901      	cmp	r1, #1
 800190a:	d100      	bne.n	800190e <__aeabi_dadd+0x15a>
 800190c:	e22e      	b.n	8001d6c <__aeabi_dadd+0x5b8>
 800190e:	4d8c      	ldr	r5, [pc, #560]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001910:	42a9      	cmp	r1, r5
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x162>
 8001914:	e224      	b.n	8001d60 <__aeabi_dadd+0x5ac>
 8001916:	2701      	movs	r7, #1
 8001918:	2c38      	cmp	r4, #56	@ 0x38
 800191a:	dc11      	bgt.n	8001940 <__aeabi_dadd+0x18c>
 800191c:	0021      	movs	r1, r4
 800191e:	291f      	cmp	r1, #31
 8001920:	dd00      	ble.n	8001924 <__aeabi_dadd+0x170>
 8001922:	e20b      	b.n	8001d3c <__aeabi_dadd+0x588>
 8001924:	2420      	movs	r4, #32
 8001926:	0037      	movs	r7, r6
 8001928:	4648      	mov	r0, r9
 800192a:	1a64      	subs	r4, r4, r1
 800192c:	40a7      	lsls	r7, r4
 800192e:	40c8      	lsrs	r0, r1
 8001930:	4307      	orrs	r7, r0
 8001932:	4648      	mov	r0, r9
 8001934:	40a0      	lsls	r0, r4
 8001936:	40ce      	lsrs	r6, r1
 8001938:	1e44      	subs	r4, r0, #1
 800193a:	41a0      	sbcs	r0, r4
 800193c:	1b9b      	subs	r3, r3, r6
 800193e:	4307      	orrs	r7, r0
 8001940:	1bd7      	subs	r7, r2, r7
 8001942:	42ba      	cmp	r2, r7
 8001944:	4192      	sbcs	r2, r2
 8001946:	4252      	negs	r2, r2
 8001948:	4665      	mov	r5, ip
 800194a:	4644      	mov	r4, r8
 800194c:	1a9e      	subs	r6, r3, r2
 800194e:	e783      	b.n	8001858 <__aeabi_dadd+0xa4>
 8001950:	2900      	cmp	r1, #0
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dadd+0x1a2>
 8001954:	e09c      	b.n	8001a90 <__aeabi_dadd+0x2dc>
 8001956:	4647      	mov	r7, r8
 8001958:	2f00      	cmp	r7, #0
 800195a:	d167      	bne.n	8001a2c <__aeabi_dadd+0x278>
 800195c:	001f      	movs	r7, r3
 800195e:	4317      	orrs	r7, r2
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x1b0>
 8001962:	e0e4      	b.n	8001b2e <__aeabi_dadd+0x37a>
 8001964:	1e48      	subs	r0, r1, #1
 8001966:	2901      	cmp	r1, #1
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x1b8>
 800196a:	e19b      	b.n	8001ca4 <__aeabi_dadd+0x4f0>
 800196c:	4f74      	ldr	r7, [pc, #464]	@ (8001b40 <__aeabi_dadd+0x38c>)
 800196e:	42b9      	cmp	r1, r7
 8001970:	d100      	bne.n	8001974 <__aeabi_dadd+0x1c0>
 8001972:	e0eb      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001974:	2701      	movs	r7, #1
 8001976:	0001      	movs	r1, r0
 8001978:	2838      	cmp	r0, #56	@ 0x38
 800197a:	dc11      	bgt.n	80019a0 <__aeabi_dadd+0x1ec>
 800197c:	291f      	cmp	r1, #31
 800197e:	dd00      	ble.n	8001982 <__aeabi_dadd+0x1ce>
 8001980:	e1c7      	b.n	8001d12 <__aeabi_dadd+0x55e>
 8001982:	2720      	movs	r7, #32
 8001984:	1a78      	subs	r0, r7, r1
 8001986:	001f      	movs	r7, r3
 8001988:	4684      	mov	ip, r0
 800198a:	4087      	lsls	r7, r0
 800198c:	0010      	movs	r0, r2
 800198e:	40c8      	lsrs	r0, r1
 8001990:	4307      	orrs	r7, r0
 8001992:	4660      	mov	r0, ip
 8001994:	4082      	lsls	r2, r0
 8001996:	40cb      	lsrs	r3, r1
 8001998:	1e50      	subs	r0, r2, #1
 800199a:	4182      	sbcs	r2, r0
 800199c:	18f6      	adds	r6, r6, r3
 800199e:	4317      	orrs	r7, r2
 80019a0:	444f      	add	r7, r9
 80019a2:	454f      	cmp	r7, r9
 80019a4:	4180      	sbcs	r0, r0
 80019a6:	4240      	negs	r0, r0
 80019a8:	1836      	adds	r6, r6, r0
 80019aa:	0233      	lsls	r3, r6, #8
 80019ac:	d557      	bpl.n	8001a5e <__aeabi_dadd+0x2aa>
 80019ae:	4b64      	ldr	r3, [pc, #400]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80019b0:	3401      	adds	r4, #1
 80019b2:	429c      	cmp	r4, r3
 80019b4:	d045      	beq.n	8001a42 <__aeabi_dadd+0x28e>
 80019b6:	2101      	movs	r1, #1
 80019b8:	4b62      	ldr	r3, [pc, #392]	@ (8001b44 <__aeabi_dadd+0x390>)
 80019ba:	087a      	lsrs	r2, r7, #1
 80019bc:	401e      	ands	r6, r3
 80019be:	4039      	ands	r1, r7
 80019c0:	430a      	orrs	r2, r1
 80019c2:	07f7      	lsls	r7, r6, #31
 80019c4:	4317      	orrs	r7, r2
 80019c6:	0876      	lsrs	r6, r6, #1
 80019c8:	e771      	b.n	80018ae <__aeabi_dadd+0xfa>
 80019ca:	001f      	movs	r7, r3
 80019cc:	4317      	orrs	r7, r2
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x21e>
 80019d0:	e0ad      	b.n	8001b2e <__aeabi_dadd+0x37a>
 80019d2:	1e4f      	subs	r7, r1, #1
 80019d4:	46bc      	mov	ip, r7
 80019d6:	2901      	cmp	r1, #1
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x228>
 80019da:	e182      	b.n	8001ce2 <__aeabi_dadd+0x52e>
 80019dc:	4f58      	ldr	r7, [pc, #352]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80019de:	42b9      	cmp	r1, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dadd+0x230>
 80019e2:	e190      	b.n	8001d06 <__aeabi_dadd+0x552>
 80019e4:	4661      	mov	r1, ip
 80019e6:	2701      	movs	r7, #1
 80019e8:	2938      	cmp	r1, #56	@ 0x38
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dadd+0x23a>
 80019ec:	e72e      	b.n	800184c <__aeabi_dadd+0x98>
 80019ee:	e718      	b.n	8001822 <__aeabi_dadd+0x6e>
 80019f0:	4f55      	ldr	r7, [pc, #340]	@ (8001b48 <__aeabi_dadd+0x394>)
 80019f2:	1c61      	adds	r1, r4, #1
 80019f4:	4239      	tst	r1, r7
 80019f6:	d000      	beq.n	80019fa <__aeabi_dadd+0x246>
 80019f8:	e0d0      	b.n	8001b9c <__aeabi_dadd+0x3e8>
 80019fa:	0031      	movs	r1, r6
 80019fc:	4648      	mov	r0, r9
 80019fe:	001f      	movs	r7, r3
 8001a00:	4301      	orrs	r1, r0
 8001a02:	4317      	orrs	r7, r2
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dadd+0x256>
 8001a08:	e13d      	b.n	8001c86 <__aeabi_dadd+0x4d2>
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x25c>
 8001a0e:	e1bc      	b.n	8001d8a <__aeabi_dadd+0x5d6>
 8001a10:	2f00      	cmp	r7, #0
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x262>
 8001a14:	e1bf      	b.n	8001d96 <__aeabi_dadd+0x5e2>
 8001a16:	464b      	mov	r3, r9
 8001a18:	2100      	movs	r1, #0
 8001a1a:	08d8      	lsrs	r0, r3, #3
 8001a1c:	0777      	lsls	r7, r6, #29
 8001a1e:	4307      	orrs	r7, r0
 8001a20:	08f0      	lsrs	r0, r6, #3
 8001a22:	0306      	lsls	r6, r0, #12
 8001a24:	054c      	lsls	r4, r1, #21
 8001a26:	0b36      	lsrs	r6, r6, #12
 8001a28:	0d64      	lsrs	r4, r4, #21
 8001a2a:	e00c      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001a2c:	4f44      	ldr	r7, [pc, #272]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a2e:	42bc      	cmp	r4, r7
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dadd+0x280>
 8001a32:	e08b      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001a34:	2701      	movs	r7, #1
 8001a36:	2938      	cmp	r1, #56	@ 0x38
 8001a38:	dcb2      	bgt.n	80019a0 <__aeabi_dadd+0x1ec>
 8001a3a:	2780      	movs	r7, #128	@ 0x80
 8001a3c:	043f      	lsls	r7, r7, #16
 8001a3e:	433b      	orrs	r3, r7
 8001a40:	e79c      	b.n	800197c <__aeabi_dadd+0x1c8>
 8001a42:	2600      	movs	r6, #0
 8001a44:	2700      	movs	r7, #0
 8001a46:	0524      	lsls	r4, r4, #20
 8001a48:	4334      	orrs	r4, r6
 8001a4a:	07ed      	lsls	r5, r5, #31
 8001a4c:	432c      	orrs	r4, r5
 8001a4e:	0038      	movs	r0, r7
 8001a50:	0021      	movs	r1, r4
 8001a52:	b002      	add	sp, #8
 8001a54:	bce0      	pop	{r5, r6, r7}
 8001a56:	46ba      	mov	sl, r7
 8001a58:	46b1      	mov	r9, r6
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	077b      	lsls	r3, r7, #29
 8001a60:	d004      	beq.n	8001a6c <__aeabi_dadd+0x2b8>
 8001a62:	230f      	movs	r3, #15
 8001a64:	403b      	ands	r3, r7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dadd+0x2b8>
 8001a6a:	e728      	b.n	80018be <__aeabi_dadd+0x10a>
 8001a6c:	08f8      	lsrs	r0, r7, #3
 8001a6e:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a70:	0777      	lsls	r7, r6, #29
 8001a72:	4307      	orrs	r7, r0
 8001a74:	08f0      	lsrs	r0, r6, #3
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dadd+0x2c8>
 8001a7a:	e24a      	b.n	8001f12 <__aeabi_dadd+0x75e>
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	d059      	beq.n	8001b36 <__aeabi_dadd+0x382>
 8001a82:	2680      	movs	r6, #128	@ 0x80
 8001a84:	0336      	lsls	r6, r6, #12
 8001a86:	4306      	orrs	r6, r0
 8001a88:	0336      	lsls	r6, r6, #12
 8001a8a:	4c2d      	ldr	r4, [pc, #180]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a8c:	0b36      	lsrs	r6, r6, #12
 8001a8e:	e7da      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d061      	beq.n	8001b58 <__aeabi_dadd+0x3a4>
 8001a94:	4641      	mov	r1, r8
 8001a96:	1b09      	subs	r1, r1, r4
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x2ea>
 8001a9c:	e0b9      	b.n	8001c12 <__aeabi_dadd+0x45e>
 8001a9e:	4c28      	ldr	r4, [pc, #160]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001aa0:	45a0      	cmp	r8, r4
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x2f2>
 8001aa4:	e1a5      	b.n	8001df2 <__aeabi_dadd+0x63e>
 8001aa6:	2701      	movs	r7, #1
 8001aa8:	2938      	cmp	r1, #56	@ 0x38
 8001aaa:	dc13      	bgt.n	8001ad4 <__aeabi_dadd+0x320>
 8001aac:	2480      	movs	r4, #128	@ 0x80
 8001aae:	0424      	lsls	r4, r4, #16
 8001ab0:	4326      	orrs	r6, r4
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dadd+0x304>
 8001ab6:	e1c8      	b.n	8001e4a <__aeabi_dadd+0x696>
 8001ab8:	2420      	movs	r4, #32
 8001aba:	0037      	movs	r7, r6
 8001abc:	4648      	mov	r0, r9
 8001abe:	1a64      	subs	r4, r4, r1
 8001ac0:	40a7      	lsls	r7, r4
 8001ac2:	40c8      	lsrs	r0, r1
 8001ac4:	4307      	orrs	r7, r0
 8001ac6:	4648      	mov	r0, r9
 8001ac8:	40a0      	lsls	r0, r4
 8001aca:	40ce      	lsrs	r6, r1
 8001acc:	1e44      	subs	r4, r0, #1
 8001ace:	41a0      	sbcs	r0, r4
 8001ad0:	199b      	adds	r3, r3, r6
 8001ad2:	4307      	orrs	r7, r0
 8001ad4:	18bf      	adds	r7, r7, r2
 8001ad6:	4297      	cmp	r7, r2
 8001ad8:	4192      	sbcs	r2, r2
 8001ada:	4252      	negs	r2, r2
 8001adc:	4644      	mov	r4, r8
 8001ade:	18d6      	adds	r6, r2, r3
 8001ae0:	e763      	b.n	80019aa <__aeabi_dadd+0x1f6>
 8001ae2:	0038      	movs	r0, r7
 8001ae4:	f001 fe06 	bl	80036f4 <__clzsi2>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	3318      	adds	r3, #24
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dadd+0x33e>
 8001af0:	e6bf      	b.n	8001872 <__aeabi_dadd+0xbe>
 8001af2:	003a      	movs	r2, r7
 8001af4:	3808      	subs	r0, #8
 8001af6:	4082      	lsls	r2, r0
 8001af8:	429c      	cmp	r4, r3
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dadd+0x34a>
 8001afc:	e083      	b.n	8001c06 <__aeabi_dadd+0x452>
 8001afe:	1b1b      	subs	r3, r3, r4
 8001b00:	1c58      	adds	r0, r3, #1
 8001b02:	281f      	cmp	r0, #31
 8001b04:	dc00      	bgt.n	8001b08 <__aeabi_dadd+0x354>
 8001b06:	e1b4      	b.n	8001e72 <__aeabi_dadd+0x6be>
 8001b08:	0017      	movs	r7, r2
 8001b0a:	3b1f      	subs	r3, #31
 8001b0c:	40df      	lsrs	r7, r3
 8001b0e:	2820      	cmp	r0, #32
 8001b10:	d005      	beq.n	8001b1e <__aeabi_dadd+0x36a>
 8001b12:	2340      	movs	r3, #64	@ 0x40
 8001b14:	1a1b      	subs	r3, r3, r0
 8001b16:	409a      	lsls	r2, r3
 8001b18:	1e53      	subs	r3, r2, #1
 8001b1a:	419a      	sbcs	r2, r3
 8001b1c:	4317      	orrs	r7, r2
 8001b1e:	2400      	movs	r4, #0
 8001b20:	2f00      	cmp	r7, #0
 8001b22:	d00a      	beq.n	8001b3a <__aeabi_dadd+0x386>
 8001b24:	077b      	lsls	r3, r7, #29
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dadd+0x376>
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dadd+0x100>
 8001b2a:	0026      	movs	r6, r4
 8001b2c:	e79e      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001b2e:	464b      	mov	r3, r9
 8001b30:	000c      	movs	r4, r1
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	e79b      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001b36:	2700      	movs	r7, #0
 8001b38:	4c01      	ldr	r4, [pc, #4]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	e783      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	ff7fffff 	.word	0xff7fffff
 8001b48:	000007fe 	.word	0x000007fe
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	0777      	lsls	r7, r6, #29
 8001b50:	08d8      	lsrs	r0, r3, #3
 8001b52:	4307      	orrs	r7, r0
 8001b54:	08f0      	lsrs	r0, r6, #3
 8001b56:	e791      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001b58:	4fcd      	ldr	r7, [pc, #820]	@ (8001e90 <__aeabi_dadd+0x6dc>)
 8001b5a:	1c61      	adds	r1, r4, #1
 8001b5c:	4239      	tst	r1, r7
 8001b5e:	d16b      	bne.n	8001c38 <__aeabi_dadd+0x484>
 8001b60:	0031      	movs	r1, r6
 8001b62:	4648      	mov	r0, r9
 8001b64:	4301      	orrs	r1, r0
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x3b8>
 8001b6a:	e14b      	b.n	8001e04 <__aeabi_dadd+0x650>
 8001b6c:	001f      	movs	r7, r3
 8001b6e:	4317      	orrs	r7, r2
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dadd+0x3c2>
 8001b74:	e181      	b.n	8001e7a <__aeabi_dadd+0x6c6>
 8001b76:	2f00      	cmp	r7, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x3c8>
 8001b7a:	e74c      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001b7c:	444a      	add	r2, r9
 8001b7e:	454a      	cmp	r2, r9
 8001b80:	4180      	sbcs	r0, r0
 8001b82:	18f6      	adds	r6, r6, r3
 8001b84:	4240      	negs	r0, r0
 8001b86:	1836      	adds	r6, r6, r0
 8001b88:	0233      	lsls	r3, r6, #8
 8001b8a:	d500      	bpl.n	8001b8e <__aeabi_dadd+0x3da>
 8001b8c:	e1b0      	b.n	8001ef0 <__aeabi_dadd+0x73c>
 8001b8e:	0017      	movs	r7, r2
 8001b90:	4691      	mov	r9, r2
 8001b92:	4337      	orrs	r7, r6
 8001b94:	d000      	beq.n	8001b98 <__aeabi_dadd+0x3e4>
 8001b96:	e73e      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001b98:	2600      	movs	r6, #0
 8001b9a:	e754      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	1a89      	subs	r1, r1, r2
 8001ba0:	4688      	mov	r8, r1
 8001ba2:	45c1      	cmp	r9, r8
 8001ba4:	41bf      	sbcs	r7, r7
 8001ba6:	1af1      	subs	r1, r6, r3
 8001ba8:	427f      	negs	r7, r7
 8001baa:	1bc9      	subs	r1, r1, r7
 8001bac:	020f      	lsls	r7, r1, #8
 8001bae:	d461      	bmi.n	8001c74 <__aeabi_dadd+0x4c0>
 8001bb0:	4647      	mov	r7, r8
 8001bb2:	430f      	orrs	r7, r1
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dadd+0x404>
 8001bb6:	e0bd      	b.n	8001d34 <__aeabi_dadd+0x580>
 8001bb8:	000e      	movs	r6, r1
 8001bba:	4647      	mov	r7, r8
 8001bbc:	e651      	b.n	8001862 <__aeabi_dadd+0xae>
 8001bbe:	4cb5      	ldr	r4, [pc, #724]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001bc0:	45a0      	cmp	r8, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dadd+0x412>
 8001bc4:	e100      	b.n	8001dc8 <__aeabi_dadd+0x614>
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	2938      	cmp	r1, #56	@ 0x38
 8001bca:	dd00      	ble.n	8001bce <__aeabi_dadd+0x41a>
 8001bcc:	e6b8      	b.n	8001940 <__aeabi_dadd+0x18c>
 8001bce:	2480      	movs	r4, #128	@ 0x80
 8001bd0:	0424      	lsls	r4, r4, #16
 8001bd2:	4326      	orrs	r6, r4
 8001bd4:	e6a3      	b.n	800191e <__aeabi_dadd+0x16a>
 8001bd6:	4eb0      	ldr	r6, [pc, #704]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001bd8:	1ae4      	subs	r4, r4, r3
 8001bda:	4016      	ands	r6, r2
 8001bdc:	077b      	lsls	r3, r7, #29
 8001bde:	d000      	beq.n	8001be2 <__aeabi_dadd+0x42e>
 8001be0:	e73f      	b.n	8001a62 <__aeabi_dadd+0x2ae>
 8001be2:	e743      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001be4:	000f      	movs	r7, r1
 8001be6:	0018      	movs	r0, r3
 8001be8:	3f20      	subs	r7, #32
 8001bea:	40f8      	lsrs	r0, r7
 8001bec:	4684      	mov	ip, r0
 8001bee:	2920      	cmp	r1, #32
 8001bf0:	d003      	beq.n	8001bfa <__aeabi_dadd+0x446>
 8001bf2:	2740      	movs	r7, #64	@ 0x40
 8001bf4:	1a79      	subs	r1, r7, r1
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	1e53      	subs	r3, r2, #1
 8001bfc:	419a      	sbcs	r2, r3
 8001bfe:	4663      	mov	r3, ip
 8001c00:	0017      	movs	r7, r2
 8001c02:	431f      	orrs	r7, r3
 8001c04:	e622      	b.n	800184c <__aeabi_dadd+0x98>
 8001c06:	48a4      	ldr	r0, [pc, #656]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001c08:	1ae1      	subs	r1, r4, r3
 8001c0a:	4010      	ands	r0, r2
 8001c0c:	0747      	lsls	r7, r0, #29
 8001c0e:	08c0      	lsrs	r0, r0, #3
 8001c10:	e707      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001c12:	0034      	movs	r4, r6
 8001c14:	4648      	mov	r0, r9
 8001c16:	4304      	orrs	r4, r0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dadd+0x468>
 8001c1a:	e0fa      	b.n	8001e12 <__aeabi_dadd+0x65e>
 8001c1c:	1e4c      	subs	r4, r1, #1
 8001c1e:	2901      	cmp	r1, #1
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dadd+0x470>
 8001c22:	e0d7      	b.n	8001dd4 <__aeabi_dadd+0x620>
 8001c24:	4f9b      	ldr	r7, [pc, #620]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c26:	42b9      	cmp	r1, r7
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dadd+0x478>
 8001c2a:	e0e2      	b.n	8001df2 <__aeabi_dadd+0x63e>
 8001c2c:	2701      	movs	r7, #1
 8001c2e:	2c38      	cmp	r4, #56	@ 0x38
 8001c30:	dd00      	ble.n	8001c34 <__aeabi_dadd+0x480>
 8001c32:	e74f      	b.n	8001ad4 <__aeabi_dadd+0x320>
 8001c34:	0021      	movs	r1, r4
 8001c36:	e73c      	b.n	8001ab2 <__aeabi_dadd+0x2fe>
 8001c38:	4c96      	ldr	r4, [pc, #600]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c3a:	42a1      	cmp	r1, r4
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dadd+0x48c>
 8001c3e:	e0dd      	b.n	8001dfc <__aeabi_dadd+0x648>
 8001c40:	444a      	add	r2, r9
 8001c42:	454a      	cmp	r2, r9
 8001c44:	4180      	sbcs	r0, r0
 8001c46:	18f3      	adds	r3, r6, r3
 8001c48:	4240      	negs	r0, r0
 8001c4a:	1818      	adds	r0, r3, r0
 8001c4c:	07c7      	lsls	r7, r0, #31
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	4317      	orrs	r7, r2
 8001c52:	0846      	lsrs	r6, r0, #1
 8001c54:	0752      	lsls	r2, r2, #29
 8001c56:	d005      	beq.n	8001c64 <__aeabi_dadd+0x4b0>
 8001c58:	220f      	movs	r2, #15
 8001c5a:	000c      	movs	r4, r1
 8001c5c:	403a      	ands	r2, r7
 8001c5e:	2a04      	cmp	r2, #4
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dadd+0x4b0>
 8001c62:	e62c      	b.n	80018be <__aeabi_dadd+0x10a>
 8001c64:	0776      	lsls	r6, r6, #29
 8001c66:	08ff      	lsrs	r7, r7, #3
 8001c68:	4337      	orrs	r7, r6
 8001c6a:	0900      	lsrs	r0, r0, #4
 8001c6c:	e6d9      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001c6e:	2700      	movs	r7, #0
 8001c70:	2600      	movs	r6, #0
 8001c72:	e6e8      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001c74:	4649      	mov	r1, r9
 8001c76:	1a57      	subs	r7, r2, r1
 8001c78:	42ba      	cmp	r2, r7
 8001c7a:	4192      	sbcs	r2, r2
 8001c7c:	1b9e      	subs	r6, r3, r6
 8001c7e:	4252      	negs	r2, r2
 8001c80:	4665      	mov	r5, ip
 8001c82:	1ab6      	subs	r6, r6, r2
 8001c84:	e5ed      	b.n	8001862 <__aeabi_dadd+0xae>
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dadd+0x4d8>
 8001c8a:	e0c6      	b.n	8001e1a <__aeabi_dadd+0x666>
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	d167      	bne.n	8001d60 <__aeabi_dadd+0x5ac>
 8001c90:	2680      	movs	r6, #128	@ 0x80
 8001c92:	2500      	movs	r5, #0
 8001c94:	4c7f      	ldr	r4, [pc, #508]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c96:	0336      	lsls	r6, r6, #12
 8001c98:	e6d5      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001c9a:	4665      	mov	r5, ip
 8001c9c:	000c      	movs	r4, r1
 8001c9e:	001e      	movs	r6, r3
 8001ca0:	08d0      	lsrs	r0, r2, #3
 8001ca2:	e6e4      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001ca4:	444a      	add	r2, r9
 8001ca6:	454a      	cmp	r2, r9
 8001ca8:	4180      	sbcs	r0, r0
 8001caa:	18f3      	adds	r3, r6, r3
 8001cac:	4240      	negs	r0, r0
 8001cae:	1818      	adds	r0, r3, r0
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0203      	lsls	r3, r0, #8
 8001cb4:	d400      	bmi.n	8001cb8 <__aeabi_dadd+0x504>
 8001cb6:	e096      	b.n	8001de6 <__aeabi_dadd+0x632>
 8001cb8:	4b77      	ldr	r3, [pc, #476]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001cba:	0849      	lsrs	r1, r1, #1
 8001cbc:	4018      	ands	r0, r3
 8001cbe:	07c3      	lsls	r3, r0, #31
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	0844      	lsrs	r4, r0, #1
 8001cc4:	0749      	lsls	r1, r1, #29
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dadd+0x516>
 8001cc8:	e129      	b.n	8001f1e <__aeabi_dadd+0x76a>
 8001cca:	220f      	movs	r2, #15
 8001ccc:	401a      	ands	r2, r3
 8001cce:	2a04      	cmp	r2, #4
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dadd+0x520>
 8001cd2:	e0ea      	b.n	8001eaa <__aeabi_dadd+0x6f6>
 8001cd4:	1d1f      	adds	r7, r3, #4
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	41b6      	sbcs	r6, r6
 8001cda:	4276      	negs	r6, r6
 8001cdc:	1936      	adds	r6, r6, r4
 8001cde:	2402      	movs	r4, #2
 8001ce0:	e6c4      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	1a8f      	subs	r7, r1, r2
 8001ce6:	45b9      	cmp	r9, r7
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	1af6      	subs	r6, r6, r3
 8001cec:	4240      	negs	r0, r0
 8001cee:	1a36      	subs	r6, r6, r0
 8001cf0:	0233      	lsls	r3, r6, #8
 8001cf2:	d406      	bmi.n	8001d02 <__aeabi_dadd+0x54e>
 8001cf4:	0773      	lsls	r3, r6, #29
 8001cf6:	08ff      	lsrs	r7, r7, #3
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	431f      	orrs	r7, r3
 8001cfc:	08f0      	lsrs	r0, r6, #3
 8001cfe:	e690      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001d00:	4665      	mov	r5, ip
 8001d02:	2401      	movs	r4, #1
 8001d04:	e5ab      	b.n	800185e <__aeabi_dadd+0xaa>
 8001d06:	464b      	mov	r3, r9
 8001d08:	0777      	lsls	r7, r6, #29
 8001d0a:	08d8      	lsrs	r0, r3, #3
 8001d0c:	4307      	orrs	r7, r0
 8001d0e:	08f0      	lsrs	r0, r6, #3
 8001d10:	e6b4      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001d12:	000f      	movs	r7, r1
 8001d14:	0018      	movs	r0, r3
 8001d16:	3f20      	subs	r7, #32
 8001d18:	40f8      	lsrs	r0, r7
 8001d1a:	4684      	mov	ip, r0
 8001d1c:	2920      	cmp	r1, #32
 8001d1e:	d003      	beq.n	8001d28 <__aeabi_dadd+0x574>
 8001d20:	2740      	movs	r7, #64	@ 0x40
 8001d22:	1a79      	subs	r1, r7, r1
 8001d24:	408b      	lsls	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	1e53      	subs	r3, r2, #1
 8001d2a:	419a      	sbcs	r2, r3
 8001d2c:	4663      	mov	r3, ip
 8001d2e:	0017      	movs	r7, r2
 8001d30:	431f      	orrs	r7, r3
 8001d32:	e635      	b.n	80019a0 <__aeabi_dadd+0x1ec>
 8001d34:	2500      	movs	r5, #0
 8001d36:	2400      	movs	r4, #0
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e684      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	0035      	movs	r5, r6
 8001d40:	3c20      	subs	r4, #32
 8001d42:	40e5      	lsrs	r5, r4
 8001d44:	2920      	cmp	r1, #32
 8001d46:	d005      	beq.n	8001d54 <__aeabi_dadd+0x5a0>
 8001d48:	2440      	movs	r4, #64	@ 0x40
 8001d4a:	1a61      	subs	r1, r4, r1
 8001d4c:	408e      	lsls	r6, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	4331      	orrs	r1, r6
 8001d52:	4689      	mov	r9, r1
 8001d54:	4648      	mov	r0, r9
 8001d56:	1e41      	subs	r1, r0, #1
 8001d58:	4188      	sbcs	r0, r1
 8001d5a:	0007      	movs	r7, r0
 8001d5c:	432f      	orrs	r7, r5
 8001d5e:	e5ef      	b.n	8001940 <__aeabi_dadd+0x18c>
 8001d60:	08d2      	lsrs	r2, r2, #3
 8001d62:	075f      	lsls	r7, r3, #29
 8001d64:	4665      	mov	r5, ip
 8001d66:	4317      	orrs	r7, r2
 8001d68:	08d8      	lsrs	r0, r3, #3
 8001d6a:	e687      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001d6c:	1a17      	subs	r7, r2, r0
 8001d6e:	42ba      	cmp	r2, r7
 8001d70:	4192      	sbcs	r2, r2
 8001d72:	1b9e      	subs	r6, r3, r6
 8001d74:	4252      	negs	r2, r2
 8001d76:	1ab6      	subs	r6, r6, r2
 8001d78:	0233      	lsls	r3, r6, #8
 8001d7a:	d4c1      	bmi.n	8001d00 <__aeabi_dadd+0x54c>
 8001d7c:	0773      	lsls	r3, r6, #29
 8001d7e:	08ff      	lsrs	r7, r7, #3
 8001d80:	4665      	mov	r5, ip
 8001d82:	2101      	movs	r1, #1
 8001d84:	431f      	orrs	r7, r3
 8001d86:	08f0      	lsrs	r0, r6, #3
 8001d88:	e64b      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001d8a:	2f00      	cmp	r7, #0
 8001d8c:	d07b      	beq.n	8001e86 <__aeabi_dadd+0x6d2>
 8001d8e:	4665      	mov	r5, ip
 8001d90:	001e      	movs	r6, r3
 8001d92:	4691      	mov	r9, r2
 8001d94:	e63f      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001d96:	1a81      	subs	r1, r0, r2
 8001d98:	4688      	mov	r8, r1
 8001d9a:	45c1      	cmp	r9, r8
 8001d9c:	41a4      	sbcs	r4, r4
 8001d9e:	1af1      	subs	r1, r6, r3
 8001da0:	4264      	negs	r4, r4
 8001da2:	1b09      	subs	r1, r1, r4
 8001da4:	2480      	movs	r4, #128	@ 0x80
 8001da6:	0424      	lsls	r4, r4, #16
 8001da8:	4221      	tst	r1, r4
 8001daa:	d077      	beq.n	8001e9c <__aeabi_dadd+0x6e8>
 8001dac:	1a10      	subs	r0, r2, r0
 8001dae:	4282      	cmp	r2, r0
 8001db0:	4192      	sbcs	r2, r2
 8001db2:	0007      	movs	r7, r0
 8001db4:	1b9e      	subs	r6, r3, r6
 8001db6:	4252      	negs	r2, r2
 8001db8:	1ab6      	subs	r6, r6, r2
 8001dba:	4337      	orrs	r7, r6
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dadd+0x60c>
 8001dbe:	e0a0      	b.n	8001f02 <__aeabi_dadd+0x74e>
 8001dc0:	4665      	mov	r5, ip
 8001dc2:	2400      	movs	r4, #0
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	e63e      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001dc8:	075f      	lsls	r7, r3, #29
 8001dca:	08d2      	lsrs	r2, r2, #3
 8001dcc:	4665      	mov	r5, ip
 8001dce:	4317      	orrs	r7, r2
 8001dd0:	08d8      	lsrs	r0, r3, #3
 8001dd2:	e653      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001dd4:	1881      	adds	r1, r0, r2
 8001dd6:	4291      	cmp	r1, r2
 8001dd8:	4192      	sbcs	r2, r2
 8001dda:	18f0      	adds	r0, r6, r3
 8001ddc:	4252      	negs	r2, r2
 8001dde:	1880      	adds	r0, r0, r2
 8001de0:	0203      	lsls	r3, r0, #8
 8001de2:	d500      	bpl.n	8001de6 <__aeabi_dadd+0x632>
 8001de4:	e768      	b.n	8001cb8 <__aeabi_dadd+0x504>
 8001de6:	0747      	lsls	r7, r0, #29
 8001de8:	08c9      	lsrs	r1, r1, #3
 8001dea:	430f      	orrs	r7, r1
 8001dec:	08c0      	lsrs	r0, r0, #3
 8001dee:	2101      	movs	r1, #1
 8001df0:	e617      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001df2:	08d2      	lsrs	r2, r2, #3
 8001df4:	075f      	lsls	r7, r3, #29
 8001df6:	4317      	orrs	r7, r2
 8001df8:	08d8      	lsrs	r0, r3, #3
 8001dfa:	e63f      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	2600      	movs	r6, #0
 8001e00:	2700      	movs	r7, #0
 8001e02:	e620      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001e04:	2900      	cmp	r1, #0
 8001e06:	d156      	bne.n	8001eb6 <__aeabi_dadd+0x702>
 8001e08:	075f      	lsls	r7, r3, #29
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	4317      	orrs	r7, r2
 8001e0e:	08d8      	lsrs	r0, r3, #3
 8001e10:	e634      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001e12:	000c      	movs	r4, r1
 8001e14:	001e      	movs	r6, r3
 8001e16:	08d0      	lsrs	r0, r2, #3
 8001e18:	e629      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001e1a:	08c1      	lsrs	r1, r0, #3
 8001e1c:	0770      	lsls	r0, r6, #29
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	08f0      	lsrs	r0, r6, #3
 8001e22:	2f00      	cmp	r7, #0
 8001e24:	d062      	beq.n	8001eec <__aeabi_dadd+0x738>
 8001e26:	2480      	movs	r4, #128	@ 0x80
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	4220      	tst	r0, r4
 8001e2c:	d007      	beq.n	8001e3e <__aeabi_dadd+0x68a>
 8001e2e:	08de      	lsrs	r6, r3, #3
 8001e30:	4226      	tst	r6, r4
 8001e32:	d104      	bne.n	8001e3e <__aeabi_dadd+0x68a>
 8001e34:	4665      	mov	r5, ip
 8001e36:	0030      	movs	r0, r6
 8001e38:	08d1      	lsrs	r1, r2, #3
 8001e3a:	075b      	lsls	r3, r3, #29
 8001e3c:	4319      	orrs	r1, r3
 8001e3e:	0f4f      	lsrs	r7, r1, #29
 8001e40:	00c9      	lsls	r1, r1, #3
 8001e42:	08c9      	lsrs	r1, r1, #3
 8001e44:	077f      	lsls	r7, r7, #29
 8001e46:	430f      	orrs	r7, r1
 8001e48:	e618      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001e4a:	000c      	movs	r4, r1
 8001e4c:	0030      	movs	r0, r6
 8001e4e:	3c20      	subs	r4, #32
 8001e50:	40e0      	lsrs	r0, r4
 8001e52:	4684      	mov	ip, r0
 8001e54:	2920      	cmp	r1, #32
 8001e56:	d005      	beq.n	8001e64 <__aeabi_dadd+0x6b0>
 8001e58:	2440      	movs	r4, #64	@ 0x40
 8001e5a:	1a61      	subs	r1, r4, r1
 8001e5c:	408e      	lsls	r6, r1
 8001e5e:	4649      	mov	r1, r9
 8001e60:	4331      	orrs	r1, r6
 8001e62:	4689      	mov	r9, r1
 8001e64:	4648      	mov	r0, r9
 8001e66:	1e41      	subs	r1, r0, #1
 8001e68:	4188      	sbcs	r0, r1
 8001e6a:	4661      	mov	r1, ip
 8001e6c:	0007      	movs	r7, r0
 8001e6e:	430f      	orrs	r7, r1
 8001e70:	e630      	b.n	8001ad4 <__aeabi_dadd+0x320>
 8001e72:	2120      	movs	r1, #32
 8001e74:	2700      	movs	r7, #0
 8001e76:	1a09      	subs	r1, r1, r0
 8001e78:	e50e      	b.n	8001898 <__aeabi_dadd+0xe4>
 8001e7a:	001e      	movs	r6, r3
 8001e7c:	2f00      	cmp	r7, #0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dadd+0x6ce>
 8001e80:	e522      	b.n	80018c8 <__aeabi_dadd+0x114>
 8001e82:	2400      	movs	r4, #0
 8001e84:	e758      	b.n	8001d38 <__aeabi_dadd+0x584>
 8001e86:	2500      	movs	r5, #0
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	e5db      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	000007fe 	.word	0x000007fe
 8001e94:	000007ff 	.word	0x000007ff
 8001e98:	ff7fffff 	.word	0xff7fffff
 8001e9c:	4647      	mov	r7, r8
 8001e9e:	430f      	orrs	r7, r1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dadd+0x6f0>
 8001ea2:	e747      	b.n	8001d34 <__aeabi_dadd+0x580>
 8001ea4:	000e      	movs	r6, r1
 8001ea6:	46c1      	mov	r9, r8
 8001ea8:	e5b5      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001eaa:	08df      	lsrs	r7, r3, #3
 8001eac:	0764      	lsls	r4, r4, #29
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4327      	orrs	r7, r4
 8001eb2:	0900      	lsrs	r0, r0, #4
 8001eb4:	e5b5      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	08c0      	lsrs	r0, r0, #3
 8001eba:	0777      	lsls	r7, r6, #29
 8001ebc:	4307      	orrs	r7, r0
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	08f0      	lsrs	r0, r6, #3
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dadd+0x714>
 8001ec6:	e5d9      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	0309      	lsls	r1, r1, #12
 8001ecc:	4208      	tst	r0, r1
 8001ece:	d007      	beq.n	8001ee0 <__aeabi_dadd+0x72c>
 8001ed0:	08dc      	lsrs	r4, r3, #3
 8001ed2:	420c      	tst	r4, r1
 8001ed4:	d104      	bne.n	8001ee0 <__aeabi_dadd+0x72c>
 8001ed6:	08d2      	lsrs	r2, r2, #3
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	431a      	orrs	r2, r3
 8001edc:	0017      	movs	r7, r2
 8001ede:	0020      	movs	r0, r4
 8001ee0:	0f7b      	lsrs	r3, r7, #29
 8001ee2:	00ff      	lsls	r7, r7, #3
 8001ee4:	08ff      	lsrs	r7, r7, #3
 8001ee6:	075b      	lsls	r3, r3, #29
 8001ee8:	431f      	orrs	r7, r3
 8001eea:	e5c7      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001eec:	000f      	movs	r7, r1
 8001eee:	e5c5      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <__aeabi_dadd+0x788>)
 8001ef2:	08d2      	lsrs	r2, r2, #3
 8001ef4:	4033      	ands	r3, r6
 8001ef6:	075f      	lsls	r7, r3, #29
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	2401      	movs	r4, #1
 8001efc:	4317      	orrs	r7, r2
 8001efe:	0b1e      	lsrs	r6, r3, #12
 8001f00:	e5a1      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001f02:	4226      	tst	r6, r4
 8001f04:	d012      	beq.n	8001f2c <__aeabi_dadd+0x778>
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <__aeabi_dadd+0x788>)
 8001f08:	4665      	mov	r5, ip
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	2401      	movs	r4, #1
 8001f0e:	401e      	ands	r6, r3
 8001f10:	e4e6      	b.n	80018e0 <__aeabi_dadd+0x12c>
 8001f12:	0021      	movs	r1, r4
 8001f14:	e585      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f16:	0017      	movs	r7, r2
 8001f18:	e5a8      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001f1a:	003a      	movs	r2, r7
 8001f1c:	e4d4      	b.n	80018c8 <__aeabi_dadd+0x114>
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	0764      	lsls	r4, r4, #29
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0027      	movs	r7, r4
 8001f26:	2102      	movs	r1, #2
 8001f28:	0900      	lsrs	r0, r0, #4
 8001f2a:	e57a      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f2c:	08c0      	lsrs	r0, r0, #3
 8001f2e:	0777      	lsls	r7, r6, #29
 8001f30:	4307      	orrs	r7, r0
 8001f32:	4665      	mov	r5, ip
 8001f34:	2100      	movs	r1, #0
 8001f36:	08f0      	lsrs	r0, r6, #3
 8001f38:	e573      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	ff7fffff 	.word	0xff7fffff

08001f40 <__aeabi_ddiv>:
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	46de      	mov	lr, fp
 8001f44:	4645      	mov	r5, r8
 8001f46:	4657      	mov	r7, sl
 8001f48:	464e      	mov	r6, r9
 8001f4a:	b5e0      	push	{r5, r6, r7, lr}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	9200      	str	r2, [sp, #0]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	030b      	lsls	r3, r1, #12
 8001f54:	0b1b      	lsrs	r3, r3, #12
 8001f56:	469b      	mov	fp, r3
 8001f58:	0fca      	lsrs	r2, r1, #31
 8001f5a:	004b      	lsls	r3, r1, #1
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	4680      	mov	r8, r0
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	9202      	str	r2, [sp, #8]
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x28>
 8001f66:	e098      	b.n	800209a <__aeabi_ddiv+0x15a>
 8001f68:	4a7c      	ldr	r2, [pc, #496]	@ (800215c <__aeabi_ddiv+0x21c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d037      	beq.n	8001fde <__aeabi_ddiv+0x9e>
 8001f6e:	4659      	mov	r1, fp
 8001f70:	0f42      	lsrs	r2, r0, #29
 8001f72:	00c9      	lsls	r1, r1, #3
 8001f74:	430a      	orrs	r2, r1
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0409      	lsls	r1, r1, #16
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	00c2      	lsls	r2, r0, #3
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <__aeabi_ddiv+0x220>)
 8001f82:	4689      	mov	r9, r1
 8001f84:	4692      	mov	sl, r2
 8001f86:	449a      	add	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	9e00      	ldr	r6, [sp, #0]
 8001f90:	9f01      	ldr	r7, [sp, #4]
 8001f92:	033b      	lsls	r3, r7, #12
 8001f94:	0b1b      	lsrs	r3, r3, #12
 8001f96:	469b      	mov	fp, r3
 8001f98:	007b      	lsls	r3, r7, #1
 8001f9a:	0030      	movs	r0, r6
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	0ffd      	lsrs	r5, r7, #31
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d059      	beq.n	8002058 <__aeabi_ddiv+0x118>
 8001fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800215c <__aeabi_ddiv+0x21c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d048      	beq.n	800203c <__aeabi_ddiv+0xfc>
 8001faa:	4659      	mov	r1, fp
 8001fac:	0f72      	lsrs	r2, r6, #29
 8001fae:	00c9      	lsls	r1, r1, #3
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0409      	lsls	r1, r1, #16
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	468b      	mov	fp, r1
 8001fba:	4969      	ldr	r1, [pc, #420]	@ (8002160 <__aeabi_ddiv+0x220>)
 8001fbc:	00f2      	lsls	r2, r6, #3
 8001fbe:	468c      	mov	ip, r1
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	4463      	add	r3, ip
 8001fc4:	1acb      	subs	r3, r1, r3
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	9e02      	ldr	r6, [sp, #8]
 8001fcc:	406e      	eors	r6, r5
 8001fce:	b2f6      	uxtb	r6, r6
 8001fd0:	2c0f      	cmp	r4, #15
 8001fd2:	d900      	bls.n	8001fd6 <__aeabi_ddiv+0x96>
 8001fd4:	e0ce      	b.n	8002174 <__aeabi_ddiv+0x234>
 8001fd6:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <__aeabi_ddiv+0x224>)
 8001fd8:	00a4      	lsls	r4, r4, #2
 8001fda:	591b      	ldr	r3, [r3, r4]
 8001fdc:	469f      	mov	pc, r3
 8001fde:	465a      	mov	r2, fp
 8001fe0:	4302      	orrs	r2, r0
 8001fe2:	4691      	mov	r9, r2
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_ddiv+0xa8>
 8001fe6:	e090      	b.n	800210a <__aeabi_ddiv+0x1ca>
 8001fe8:	469a      	mov	sl, r3
 8001fea:	2302      	movs	r3, #2
 8001fec:	4690      	mov	r8, r2
 8001fee:	2408      	movs	r4, #8
 8001ff0:	9303      	str	r3, [sp, #12]
 8001ff2:	e7cc      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 8001ff4:	46cb      	mov	fp, r9
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	9d02      	ldr	r5, [sp, #8]
 8001ffa:	9903      	ldr	r1, [sp, #12]
 8001ffc:	2902      	cmp	r1, #2
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0xc2>
 8002000:	e1de      	b.n	80023c0 <__aeabi_ddiv+0x480>
 8002002:	2903      	cmp	r1, #3
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0xc8>
 8002006:	e08d      	b.n	8002124 <__aeabi_ddiv+0x1e4>
 8002008:	2901      	cmp	r1, #1
 800200a:	d000      	beq.n	800200e <__aeabi_ddiv+0xce>
 800200c:	e179      	b.n	8002302 <__aeabi_ddiv+0x3c2>
 800200e:	002e      	movs	r6, r5
 8002010:	2200      	movs	r2, #0
 8002012:	2300      	movs	r3, #0
 8002014:	2400      	movs	r4, #0
 8002016:	4690      	mov	r8, r2
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	4323      	orrs	r3, r4
 800201c:	07f6      	lsls	r6, r6, #31
 800201e:	4333      	orrs	r3, r6
 8002020:	4640      	mov	r0, r8
 8002022:	0019      	movs	r1, r3
 8002024:	b007      	add	sp, #28
 8002026:	bcf0      	pop	{r4, r5, r6, r7}
 8002028:	46bb      	mov	fp, r7
 800202a:	46b2      	mov	sl, r6
 800202c:	46a9      	mov	r9, r5
 800202e:	46a0      	mov	r8, r4
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	2200      	movs	r2, #0
 8002034:	2400      	movs	r4, #0
 8002036:	4690      	mov	r8, r2
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <__aeabi_ddiv+0x21c>)
 800203a:	e7ed      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800203c:	465a      	mov	r2, fp
 800203e:	9b00      	ldr	r3, [sp, #0]
 8002040:	431a      	orrs	r2, r3
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <__aeabi_ddiv+0x228>)
 8002044:	469c      	mov	ip, r3
 8002046:	44e2      	add	sl, ip
 8002048:	2a00      	cmp	r2, #0
 800204a:	d159      	bne.n	8002100 <__aeabi_ddiv+0x1c0>
 800204c:	2302      	movs	r3, #2
 800204e:	431c      	orrs	r4, r3
 8002050:	2300      	movs	r3, #0
 8002052:	2102      	movs	r1, #2
 8002054:	469b      	mov	fp, r3
 8002056:	e7b8      	b.n	8001fca <__aeabi_ddiv+0x8a>
 8002058:	465a      	mov	r2, fp
 800205a:	9b00      	ldr	r3, [sp, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	d049      	beq.n	80020f4 <__aeabi_ddiv+0x1b4>
 8002060:	465b      	mov	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_ddiv+0x128>
 8002066:	e19c      	b.n	80023a2 <__aeabi_ddiv+0x462>
 8002068:	4658      	mov	r0, fp
 800206a:	f001 fb43 	bl	80036f4 <__clzsi2>
 800206e:	0002      	movs	r2, r0
 8002070:	0003      	movs	r3, r0
 8002072:	3a0b      	subs	r2, #11
 8002074:	271d      	movs	r7, #29
 8002076:	9e00      	ldr	r6, [sp, #0]
 8002078:	1aba      	subs	r2, r7, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4658      	mov	r0, fp
 800207e:	40d6      	lsrs	r6, r2
 8002080:	3908      	subs	r1, #8
 8002082:	4088      	lsls	r0, r1
 8002084:	0032      	movs	r2, r6
 8002086:	4302      	orrs	r2, r0
 8002088:	4693      	mov	fp, r2
 800208a:	9a00      	ldr	r2, [sp, #0]
 800208c:	408a      	lsls	r2, r1
 800208e:	4937      	ldr	r1, [pc, #220]	@ (800216c <__aeabi_ddiv+0x22c>)
 8002090:	4453      	add	r3, sl
 8002092:	468a      	mov	sl, r1
 8002094:	2100      	movs	r1, #0
 8002096:	449a      	add	sl, r3
 8002098:	e797      	b.n	8001fca <__aeabi_ddiv+0x8a>
 800209a:	465b      	mov	r3, fp
 800209c:	4303      	orrs	r3, r0
 800209e:	4699      	mov	r9, r3
 80020a0:	d021      	beq.n	80020e6 <__aeabi_ddiv+0x1a6>
 80020a2:	465b      	mov	r3, fp
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d100      	bne.n	80020aa <__aeabi_ddiv+0x16a>
 80020a8:	e169      	b.n	800237e <__aeabi_ddiv+0x43e>
 80020aa:	4658      	mov	r0, fp
 80020ac:	f001 fb22 	bl	80036f4 <__clzsi2>
 80020b0:	230b      	movs	r3, #11
 80020b2:	425b      	negs	r3, r3
 80020b4:	469c      	mov	ip, r3
 80020b6:	0002      	movs	r2, r0
 80020b8:	4484      	add	ip, r0
 80020ba:	4666      	mov	r6, ip
 80020bc:	231d      	movs	r3, #29
 80020be:	1b9b      	subs	r3, r3, r6
 80020c0:	0026      	movs	r6, r4
 80020c2:	0011      	movs	r1, r2
 80020c4:	4658      	mov	r0, fp
 80020c6:	40de      	lsrs	r6, r3
 80020c8:	3908      	subs	r1, #8
 80020ca:	4088      	lsls	r0, r1
 80020cc:	0033      	movs	r3, r6
 80020ce:	4303      	orrs	r3, r0
 80020d0:	4699      	mov	r9, r3
 80020d2:	0023      	movs	r3, r4
 80020d4:	408b      	lsls	r3, r1
 80020d6:	4698      	mov	r8, r3
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <__aeabi_ddiv+0x230>)
 80020da:	2400      	movs	r4, #0
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	469a      	mov	sl, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	9303      	str	r3, [sp, #12]
 80020e4:	e753      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4698      	mov	r8, r3
 80020ea:	469a      	mov	sl, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	2404      	movs	r4, #4
 80020f0:	9303      	str	r3, [sp, #12]
 80020f2:	e74c      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 80020f4:	2301      	movs	r3, #1
 80020f6:	431c      	orrs	r4, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	2101      	movs	r1, #1
 80020fc:	469b      	mov	fp, r3
 80020fe:	e764      	b.n	8001fca <__aeabi_ddiv+0x8a>
 8002100:	2303      	movs	r3, #3
 8002102:	0032      	movs	r2, r6
 8002104:	2103      	movs	r1, #3
 8002106:	431c      	orrs	r4, r3
 8002108:	e75f      	b.n	8001fca <__aeabi_ddiv+0x8a>
 800210a:	469a      	mov	sl, r3
 800210c:	2303      	movs	r3, #3
 800210e:	46d9      	mov	r9, fp
 8002110:	240c      	movs	r4, #12
 8002112:	9303      	str	r3, [sp, #12]
 8002114:	e73b      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 8002116:	2300      	movs	r3, #0
 8002118:	2480      	movs	r4, #128	@ 0x80
 800211a:	4698      	mov	r8, r3
 800211c:	2600      	movs	r6, #0
 800211e:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	e779      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002124:	2480      	movs	r4, #128	@ 0x80
 8002126:	465b      	mov	r3, fp
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	431c      	orrs	r4, r3
 800212c:	0324      	lsls	r4, r4, #12
 800212e:	002e      	movs	r6, r5
 8002130:	4690      	mov	r8, r2
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002134:	0b24      	lsrs	r4, r4, #12
 8002136:	e76f      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002138:	2480      	movs	r4, #128	@ 0x80
 800213a:	464b      	mov	r3, r9
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	4223      	tst	r3, r4
 8002140:	d002      	beq.n	8002148 <__aeabi_ddiv+0x208>
 8002142:	465b      	mov	r3, fp
 8002144:	4223      	tst	r3, r4
 8002146:	d0f0      	beq.n	800212a <__aeabi_ddiv+0x1ea>
 8002148:	2480      	movs	r4, #128	@ 0x80
 800214a:	464b      	mov	r3, r9
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	431c      	orrs	r4, r3
 8002150:	0324      	lsls	r4, r4, #12
 8002152:	9e02      	ldr	r6, [sp, #8]
 8002154:	4b01      	ldr	r3, [pc, #4]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002156:	0b24      	lsrs	r4, r4, #12
 8002158:	e75e      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	000007ff 	.word	0x000007ff
 8002160:	fffffc01 	.word	0xfffffc01
 8002164:	0800e454 	.word	0x0800e454
 8002168:	fffff801 	.word	0xfffff801
 800216c:	000003f3 	.word	0x000003f3
 8002170:	fffffc0d 	.word	0xfffffc0d
 8002174:	45cb      	cmp	fp, r9
 8002176:	d200      	bcs.n	800217a <__aeabi_ddiv+0x23a>
 8002178:	e0f8      	b.n	800236c <__aeabi_ddiv+0x42c>
 800217a:	d100      	bne.n	800217e <__aeabi_ddiv+0x23e>
 800217c:	e0f3      	b.n	8002366 <__aeabi_ddiv+0x426>
 800217e:	2301      	movs	r3, #1
 8002180:	425b      	negs	r3, r3
 8002182:	469c      	mov	ip, r3
 8002184:	4644      	mov	r4, r8
 8002186:	4648      	mov	r0, r9
 8002188:	2500      	movs	r5, #0
 800218a:	44e2      	add	sl, ip
 800218c:	465b      	mov	r3, fp
 800218e:	0e17      	lsrs	r7, r2, #24
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	431f      	orrs	r7, r3
 8002194:	0c19      	lsrs	r1, r3, #16
 8002196:	043b      	lsls	r3, r7, #16
 8002198:	0212      	lsls	r2, r2, #8
 800219a:	9700      	str	r7, [sp, #0]
 800219c:	0c1f      	lsrs	r7, r3, #16
 800219e:	4691      	mov	r9, r2
 80021a0:	9102      	str	r1, [sp, #8]
 80021a2:	9703      	str	r7, [sp, #12]
 80021a4:	f7fe f850 	bl	8000248 <__aeabi_uidivmod>
 80021a8:	0002      	movs	r2, r0
 80021aa:	437a      	muls	r2, r7
 80021ac:	040b      	lsls	r3, r1, #16
 80021ae:	0c21      	lsrs	r1, r4, #16
 80021b0:	4680      	mov	r8, r0
 80021b2:	4319      	orrs	r1, r3
 80021b4:	428a      	cmp	r2, r1
 80021b6:	d909      	bls.n	80021cc <__aeabi_ddiv+0x28c>
 80021b8:	9f00      	ldr	r7, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	46bc      	mov	ip, r7
 80021be:	425b      	negs	r3, r3
 80021c0:	4461      	add	r1, ip
 80021c2:	469c      	mov	ip, r3
 80021c4:	44e0      	add	r8, ip
 80021c6:	428f      	cmp	r7, r1
 80021c8:	d800      	bhi.n	80021cc <__aeabi_ddiv+0x28c>
 80021ca:	e15c      	b.n	8002486 <__aeabi_ddiv+0x546>
 80021cc:	1a88      	subs	r0, r1, r2
 80021ce:	9902      	ldr	r1, [sp, #8]
 80021d0:	f7fe f83a 	bl	8000248 <__aeabi_uidivmod>
 80021d4:	9a03      	ldr	r2, [sp, #12]
 80021d6:	0424      	lsls	r4, r4, #16
 80021d8:	4342      	muls	r2, r0
 80021da:	0409      	lsls	r1, r1, #16
 80021dc:	0c24      	lsrs	r4, r4, #16
 80021de:	0003      	movs	r3, r0
 80021e0:	430c      	orrs	r4, r1
 80021e2:	42a2      	cmp	r2, r4
 80021e4:	d906      	bls.n	80021f4 <__aeabi_ddiv+0x2b4>
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	468c      	mov	ip, r1
 80021ec:	4464      	add	r4, ip
 80021ee:	42a1      	cmp	r1, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x2b4>
 80021f2:	e142      	b.n	800247a <__aeabi_ddiv+0x53a>
 80021f4:	1aa0      	subs	r0, r4, r2
 80021f6:	4642      	mov	r2, r8
 80021f8:	0412      	lsls	r2, r2, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	4693      	mov	fp, r2
 80021fe:	464b      	mov	r3, r9
 8002200:	4659      	mov	r1, fp
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	001f      	movs	r7, r3
 8002206:	9304      	str	r3, [sp, #16]
 8002208:	040b      	lsls	r3, r1, #16
 800220a:	4649      	mov	r1, r9
 800220c:	0409      	lsls	r1, r1, #16
 800220e:	0c09      	lsrs	r1, r1, #16
 8002210:	000c      	movs	r4, r1
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	435c      	muls	r4, r3
 8002216:	0c12      	lsrs	r2, r2, #16
 8002218:	437b      	muls	r3, r7
 800221a:	4688      	mov	r8, r1
 800221c:	4351      	muls	r1, r2
 800221e:	437a      	muls	r2, r7
 8002220:	0c27      	lsrs	r7, r4, #16
 8002222:	46bc      	mov	ip, r7
 8002224:	185b      	adds	r3, r3, r1
 8002226:	4463      	add	r3, ip
 8002228:	4299      	cmp	r1, r3
 800222a:	d903      	bls.n	8002234 <__aeabi_ddiv+0x2f4>
 800222c:	2180      	movs	r1, #128	@ 0x80
 800222e:	0249      	lsls	r1, r1, #9
 8002230:	468c      	mov	ip, r1
 8002232:	4462      	add	r2, ip
 8002234:	0c19      	lsrs	r1, r3, #16
 8002236:	0424      	lsls	r4, r4, #16
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	0c24      	lsrs	r4, r4, #16
 800223c:	188a      	adds	r2, r1, r2
 800223e:	191c      	adds	r4, r3, r4
 8002240:	4290      	cmp	r0, r2
 8002242:	d302      	bcc.n	800224a <__aeabi_ddiv+0x30a>
 8002244:	d116      	bne.n	8002274 <__aeabi_ddiv+0x334>
 8002246:	42a5      	cmp	r5, r4
 8002248:	d214      	bcs.n	8002274 <__aeabi_ddiv+0x334>
 800224a:	465b      	mov	r3, fp
 800224c:	9f00      	ldr	r7, [sp, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	444d      	add	r5, r9
 8002252:	9305      	str	r3, [sp, #20]
 8002254:	454d      	cmp	r5, r9
 8002256:	419b      	sbcs	r3, r3
 8002258:	46bc      	mov	ip, r7
 800225a:	425b      	negs	r3, r3
 800225c:	4463      	add	r3, ip
 800225e:	18c0      	adds	r0, r0, r3
 8002260:	4287      	cmp	r7, r0
 8002262:	d300      	bcc.n	8002266 <__aeabi_ddiv+0x326>
 8002264:	e102      	b.n	800246c <__aeabi_ddiv+0x52c>
 8002266:	4282      	cmp	r2, r0
 8002268:	d900      	bls.n	800226c <__aeabi_ddiv+0x32c>
 800226a:	e129      	b.n	80024c0 <__aeabi_ddiv+0x580>
 800226c:	d100      	bne.n	8002270 <__aeabi_ddiv+0x330>
 800226e:	e124      	b.n	80024ba <__aeabi_ddiv+0x57a>
 8002270:	9b05      	ldr	r3, [sp, #20]
 8002272:	469b      	mov	fp, r3
 8002274:	1b2c      	subs	r4, r5, r4
 8002276:	42a5      	cmp	r5, r4
 8002278:	41ad      	sbcs	r5, r5
 800227a:	9b00      	ldr	r3, [sp, #0]
 800227c:	1a80      	subs	r0, r0, r2
 800227e:	426d      	negs	r5, r5
 8002280:	1b40      	subs	r0, r0, r5
 8002282:	4283      	cmp	r3, r0
 8002284:	d100      	bne.n	8002288 <__aeabi_ddiv+0x348>
 8002286:	e10f      	b.n	80024a8 <__aeabi_ddiv+0x568>
 8002288:	9902      	ldr	r1, [sp, #8]
 800228a:	f7fd ffdd 	bl	8000248 <__aeabi_uidivmod>
 800228e:	9a03      	ldr	r2, [sp, #12]
 8002290:	040b      	lsls	r3, r1, #16
 8002292:	4342      	muls	r2, r0
 8002294:	0c21      	lsrs	r1, r4, #16
 8002296:	0005      	movs	r5, r0
 8002298:	4319      	orrs	r1, r3
 800229a:	428a      	cmp	r2, r1
 800229c:	d900      	bls.n	80022a0 <__aeabi_ddiv+0x360>
 800229e:	e0cb      	b.n	8002438 <__aeabi_ddiv+0x4f8>
 80022a0:	1a88      	subs	r0, r1, r2
 80022a2:	9902      	ldr	r1, [sp, #8]
 80022a4:	f7fd ffd0 	bl	8000248 <__aeabi_uidivmod>
 80022a8:	9a03      	ldr	r2, [sp, #12]
 80022aa:	0424      	lsls	r4, r4, #16
 80022ac:	4342      	muls	r2, r0
 80022ae:	0409      	lsls	r1, r1, #16
 80022b0:	0c24      	lsrs	r4, r4, #16
 80022b2:	0003      	movs	r3, r0
 80022b4:	430c      	orrs	r4, r1
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d900      	bls.n	80022bc <__aeabi_ddiv+0x37c>
 80022ba:	e0ca      	b.n	8002452 <__aeabi_ddiv+0x512>
 80022bc:	4641      	mov	r1, r8
 80022be:	1aa4      	subs	r4, r4, r2
 80022c0:	042a      	lsls	r2, r5, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	9f04      	ldr	r7, [sp, #16]
 80022c6:	0413      	lsls	r3, r2, #16
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	4359      	muls	r1, r3
 80022cc:	4640      	mov	r0, r8
 80022ce:	437b      	muls	r3, r7
 80022d0:	469c      	mov	ip, r3
 80022d2:	0c15      	lsrs	r5, r2, #16
 80022d4:	4368      	muls	r0, r5
 80022d6:	0c0b      	lsrs	r3, r1, #16
 80022d8:	4484      	add	ip, r0
 80022da:	4463      	add	r3, ip
 80022dc:	437d      	muls	r5, r7
 80022de:	4298      	cmp	r0, r3
 80022e0:	d903      	bls.n	80022ea <__aeabi_ddiv+0x3aa>
 80022e2:	2080      	movs	r0, #128	@ 0x80
 80022e4:	0240      	lsls	r0, r0, #9
 80022e6:	4684      	mov	ip, r0
 80022e8:	4465      	add	r5, ip
 80022ea:	0c18      	lsrs	r0, r3, #16
 80022ec:	0409      	lsls	r1, r1, #16
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	0c09      	lsrs	r1, r1, #16
 80022f2:	1940      	adds	r0, r0, r5
 80022f4:	185b      	adds	r3, r3, r1
 80022f6:	4284      	cmp	r4, r0
 80022f8:	d327      	bcc.n	800234a <__aeabi_ddiv+0x40a>
 80022fa:	d023      	beq.n	8002344 <__aeabi_ddiv+0x404>
 80022fc:	2301      	movs	r3, #1
 80022fe:	0035      	movs	r5, r6
 8002300:	431a      	orrs	r2, r3
 8002302:	4b94      	ldr	r3, [pc, #592]	@ (8002554 <__aeabi_ddiv+0x614>)
 8002304:	4453      	add	r3, sl
 8002306:	2b00      	cmp	r3, #0
 8002308:	dd60      	ble.n	80023cc <__aeabi_ddiv+0x48c>
 800230a:	0751      	lsls	r1, r2, #29
 800230c:	d000      	beq.n	8002310 <__aeabi_ddiv+0x3d0>
 800230e:	e086      	b.n	800241e <__aeabi_ddiv+0x4de>
 8002310:	002e      	movs	r6, r5
 8002312:	08d1      	lsrs	r1, r2, #3
 8002314:	465a      	mov	r2, fp
 8002316:	01d2      	lsls	r2, r2, #7
 8002318:	d506      	bpl.n	8002328 <__aeabi_ddiv+0x3e8>
 800231a:	465a      	mov	r2, fp
 800231c:	4b8e      	ldr	r3, [pc, #568]	@ (8002558 <__aeabi_ddiv+0x618>)
 800231e:	401a      	ands	r2, r3
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	4693      	mov	fp, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4453      	add	r3, sl
 8002328:	4a8c      	ldr	r2, [pc, #560]	@ (800255c <__aeabi_ddiv+0x61c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	dd00      	ble.n	8002330 <__aeabi_ddiv+0x3f0>
 800232e:	e680      	b.n	8002032 <__aeabi_ddiv+0xf2>
 8002330:	465a      	mov	r2, fp
 8002332:	0752      	lsls	r2, r2, #29
 8002334:	430a      	orrs	r2, r1
 8002336:	4690      	mov	r8, r2
 8002338:	465a      	mov	r2, fp
 800233a:	055b      	lsls	r3, r3, #21
 800233c:	0254      	lsls	r4, r2, #9
 800233e:	0b24      	lsrs	r4, r4, #12
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	e669      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002344:	0035      	movs	r5, r6
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0db      	beq.n	8002302 <__aeabi_ddiv+0x3c2>
 800234a:	9d00      	ldr	r5, [sp, #0]
 800234c:	1e51      	subs	r1, r2, #1
 800234e:	46ac      	mov	ip, r5
 8002350:	4464      	add	r4, ip
 8002352:	42ac      	cmp	r4, r5
 8002354:	d200      	bcs.n	8002358 <__aeabi_ddiv+0x418>
 8002356:	e09e      	b.n	8002496 <__aeabi_ddiv+0x556>
 8002358:	4284      	cmp	r4, r0
 800235a:	d200      	bcs.n	800235e <__aeabi_ddiv+0x41e>
 800235c:	e0e1      	b.n	8002522 <__aeabi_ddiv+0x5e2>
 800235e:	d100      	bne.n	8002362 <__aeabi_ddiv+0x422>
 8002360:	e0ee      	b.n	8002540 <__aeabi_ddiv+0x600>
 8002362:	000a      	movs	r2, r1
 8002364:	e7ca      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 8002366:	4542      	cmp	r2, r8
 8002368:	d900      	bls.n	800236c <__aeabi_ddiv+0x42c>
 800236a:	e708      	b.n	800217e <__aeabi_ddiv+0x23e>
 800236c:	464b      	mov	r3, r9
 800236e:	07dc      	lsls	r4, r3, #31
 8002370:	0858      	lsrs	r0, r3, #1
 8002372:	4643      	mov	r3, r8
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	431c      	orrs	r4, r3
 8002378:	4643      	mov	r3, r8
 800237a:	07dd      	lsls	r5, r3, #31
 800237c:	e706      	b.n	800218c <__aeabi_ddiv+0x24c>
 800237e:	f001 f9b9 	bl	80036f4 <__clzsi2>
 8002382:	2315      	movs	r3, #21
 8002384:	469c      	mov	ip, r3
 8002386:	4484      	add	ip, r0
 8002388:	0002      	movs	r2, r0
 800238a:	4663      	mov	r3, ip
 800238c:	3220      	adds	r2, #32
 800238e:	2b1c      	cmp	r3, #28
 8002390:	dc00      	bgt.n	8002394 <__aeabi_ddiv+0x454>
 8002392:	e692      	b.n	80020ba <__aeabi_ddiv+0x17a>
 8002394:	0023      	movs	r3, r4
 8002396:	3808      	subs	r0, #8
 8002398:	4083      	lsls	r3, r0
 800239a:	4699      	mov	r9, r3
 800239c:	2300      	movs	r3, #0
 800239e:	4698      	mov	r8, r3
 80023a0:	e69a      	b.n	80020d8 <__aeabi_ddiv+0x198>
 80023a2:	f001 f9a7 	bl	80036f4 <__clzsi2>
 80023a6:	0002      	movs	r2, r0
 80023a8:	0003      	movs	r3, r0
 80023aa:	3215      	adds	r2, #21
 80023ac:	3320      	adds	r3, #32
 80023ae:	2a1c      	cmp	r2, #28
 80023b0:	dc00      	bgt.n	80023b4 <__aeabi_ddiv+0x474>
 80023b2:	e65f      	b.n	8002074 <__aeabi_ddiv+0x134>
 80023b4:	9900      	ldr	r1, [sp, #0]
 80023b6:	3808      	subs	r0, #8
 80023b8:	4081      	lsls	r1, r0
 80023ba:	2200      	movs	r2, #0
 80023bc:	468b      	mov	fp, r1
 80023be:	e666      	b.n	800208e <__aeabi_ddiv+0x14e>
 80023c0:	2200      	movs	r2, #0
 80023c2:	002e      	movs	r6, r5
 80023c4:	2400      	movs	r4, #0
 80023c6:	4690      	mov	r8, r2
 80023c8:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <__aeabi_ddiv+0x620>)
 80023ca:	e625      	b.n	8002018 <__aeabi_ddiv+0xd8>
 80023cc:	002e      	movs	r6, r5
 80023ce:	2101      	movs	r1, #1
 80023d0:	1ac9      	subs	r1, r1, r3
 80023d2:	2938      	cmp	r1, #56	@ 0x38
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_ddiv+0x498>
 80023d6:	e61b      	b.n	8002010 <__aeabi_ddiv+0xd0>
 80023d8:	291f      	cmp	r1, #31
 80023da:	dc7e      	bgt.n	80024da <__aeabi_ddiv+0x59a>
 80023dc:	4861      	ldr	r0, [pc, #388]	@ (8002564 <__aeabi_ddiv+0x624>)
 80023de:	0014      	movs	r4, r2
 80023e0:	4450      	add	r0, sl
 80023e2:	465b      	mov	r3, fp
 80023e4:	4082      	lsls	r2, r0
 80023e6:	4083      	lsls	r3, r0
 80023e8:	40cc      	lsrs	r4, r1
 80023ea:	1e50      	subs	r0, r2, #1
 80023ec:	4182      	sbcs	r2, r0
 80023ee:	4323      	orrs	r3, r4
 80023f0:	431a      	orrs	r2, r3
 80023f2:	465b      	mov	r3, fp
 80023f4:	40cb      	lsrs	r3, r1
 80023f6:	0751      	lsls	r1, r2, #29
 80023f8:	d009      	beq.n	800240e <__aeabi_ddiv+0x4ce>
 80023fa:	210f      	movs	r1, #15
 80023fc:	4011      	ands	r1, r2
 80023fe:	2904      	cmp	r1, #4
 8002400:	d005      	beq.n	800240e <__aeabi_ddiv+0x4ce>
 8002402:	1d11      	adds	r1, r2, #4
 8002404:	4291      	cmp	r1, r2
 8002406:	4192      	sbcs	r2, r2
 8002408:	4252      	negs	r2, r2
 800240a:	189b      	adds	r3, r3, r2
 800240c:	000a      	movs	r2, r1
 800240e:	0219      	lsls	r1, r3, #8
 8002410:	d400      	bmi.n	8002414 <__aeabi_ddiv+0x4d4>
 8002412:	e09b      	b.n	800254c <__aeabi_ddiv+0x60c>
 8002414:	2200      	movs	r2, #0
 8002416:	2301      	movs	r3, #1
 8002418:	2400      	movs	r4, #0
 800241a:	4690      	mov	r8, r2
 800241c:	e5fc      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800241e:	210f      	movs	r1, #15
 8002420:	4011      	ands	r1, r2
 8002422:	2904      	cmp	r1, #4
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x4e8>
 8002426:	e773      	b.n	8002310 <__aeabi_ddiv+0x3d0>
 8002428:	1d11      	adds	r1, r2, #4
 800242a:	4291      	cmp	r1, r2
 800242c:	4192      	sbcs	r2, r2
 800242e:	4252      	negs	r2, r2
 8002430:	002e      	movs	r6, r5
 8002432:	08c9      	lsrs	r1, r1, #3
 8002434:	4493      	add	fp, r2
 8002436:	e76d      	b.n	8002314 <__aeabi_ddiv+0x3d4>
 8002438:	9b00      	ldr	r3, [sp, #0]
 800243a:	3d01      	subs	r5, #1
 800243c:	469c      	mov	ip, r3
 800243e:	4461      	add	r1, ip
 8002440:	428b      	cmp	r3, r1
 8002442:	d900      	bls.n	8002446 <__aeabi_ddiv+0x506>
 8002444:	e72c      	b.n	80022a0 <__aeabi_ddiv+0x360>
 8002446:	428a      	cmp	r2, r1
 8002448:	d800      	bhi.n	800244c <__aeabi_ddiv+0x50c>
 800244a:	e729      	b.n	80022a0 <__aeabi_ddiv+0x360>
 800244c:	1e85      	subs	r5, r0, #2
 800244e:	4461      	add	r1, ip
 8002450:	e726      	b.n	80022a0 <__aeabi_ddiv+0x360>
 8002452:	9900      	ldr	r1, [sp, #0]
 8002454:	3b01      	subs	r3, #1
 8002456:	468c      	mov	ip, r1
 8002458:	4464      	add	r4, ip
 800245a:	42a1      	cmp	r1, r4
 800245c:	d900      	bls.n	8002460 <__aeabi_ddiv+0x520>
 800245e:	e72d      	b.n	80022bc <__aeabi_ddiv+0x37c>
 8002460:	42a2      	cmp	r2, r4
 8002462:	d800      	bhi.n	8002466 <__aeabi_ddiv+0x526>
 8002464:	e72a      	b.n	80022bc <__aeabi_ddiv+0x37c>
 8002466:	1e83      	subs	r3, r0, #2
 8002468:	4464      	add	r4, ip
 800246a:	e727      	b.n	80022bc <__aeabi_ddiv+0x37c>
 800246c:	4287      	cmp	r7, r0
 800246e:	d000      	beq.n	8002472 <__aeabi_ddiv+0x532>
 8002470:	e6fe      	b.n	8002270 <__aeabi_ddiv+0x330>
 8002472:	45a9      	cmp	r9, r5
 8002474:	d900      	bls.n	8002478 <__aeabi_ddiv+0x538>
 8002476:	e6fb      	b.n	8002270 <__aeabi_ddiv+0x330>
 8002478:	e6f5      	b.n	8002266 <__aeabi_ddiv+0x326>
 800247a:	42a2      	cmp	r2, r4
 800247c:	d800      	bhi.n	8002480 <__aeabi_ddiv+0x540>
 800247e:	e6b9      	b.n	80021f4 <__aeabi_ddiv+0x2b4>
 8002480:	1e83      	subs	r3, r0, #2
 8002482:	4464      	add	r4, ip
 8002484:	e6b6      	b.n	80021f4 <__aeabi_ddiv+0x2b4>
 8002486:	428a      	cmp	r2, r1
 8002488:	d800      	bhi.n	800248c <__aeabi_ddiv+0x54c>
 800248a:	e69f      	b.n	80021cc <__aeabi_ddiv+0x28c>
 800248c:	46bc      	mov	ip, r7
 800248e:	1e83      	subs	r3, r0, #2
 8002490:	4698      	mov	r8, r3
 8002492:	4461      	add	r1, ip
 8002494:	e69a      	b.n	80021cc <__aeabi_ddiv+0x28c>
 8002496:	000a      	movs	r2, r1
 8002498:	4284      	cmp	r4, r0
 800249a:	d000      	beq.n	800249e <__aeabi_ddiv+0x55e>
 800249c:	e72e      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 800249e:	454b      	cmp	r3, r9
 80024a0:	d000      	beq.n	80024a4 <__aeabi_ddiv+0x564>
 80024a2:	e72b      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 80024a4:	0035      	movs	r5, r6
 80024a6:	e72c      	b.n	8002302 <__aeabi_ddiv+0x3c2>
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <__aeabi_ddiv+0x614>)
 80024aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002568 <__aeabi_ddiv+0x628>)
 80024ac:	4453      	add	r3, sl
 80024ae:	4592      	cmp	sl, r2
 80024b0:	db43      	blt.n	800253a <__aeabi_ddiv+0x5fa>
 80024b2:	2201      	movs	r2, #1
 80024b4:	2100      	movs	r1, #0
 80024b6:	4493      	add	fp, r2
 80024b8:	e72c      	b.n	8002314 <__aeabi_ddiv+0x3d4>
 80024ba:	42ac      	cmp	r4, r5
 80024bc:	d800      	bhi.n	80024c0 <__aeabi_ddiv+0x580>
 80024be:	e6d7      	b.n	8002270 <__aeabi_ddiv+0x330>
 80024c0:	2302      	movs	r3, #2
 80024c2:	425b      	negs	r3, r3
 80024c4:	469c      	mov	ip, r3
 80024c6:	9900      	ldr	r1, [sp, #0]
 80024c8:	444d      	add	r5, r9
 80024ca:	454d      	cmp	r5, r9
 80024cc:	419b      	sbcs	r3, r3
 80024ce:	44e3      	add	fp, ip
 80024d0:	468c      	mov	ip, r1
 80024d2:	425b      	negs	r3, r3
 80024d4:	4463      	add	r3, ip
 80024d6:	18c0      	adds	r0, r0, r3
 80024d8:	e6cc      	b.n	8002274 <__aeabi_ddiv+0x334>
 80024da:	201f      	movs	r0, #31
 80024dc:	4240      	negs	r0, r0
 80024de:	1ac3      	subs	r3, r0, r3
 80024e0:	4658      	mov	r0, fp
 80024e2:	40d8      	lsrs	r0, r3
 80024e4:	2920      	cmp	r1, #32
 80024e6:	d004      	beq.n	80024f2 <__aeabi_ddiv+0x5b2>
 80024e8:	4659      	mov	r1, fp
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <__aeabi_ddiv+0x62c>)
 80024ec:	4453      	add	r3, sl
 80024ee:	4099      	lsls	r1, r3
 80024f0:	430a      	orrs	r2, r1
 80024f2:	1e53      	subs	r3, r2, #1
 80024f4:	419a      	sbcs	r2, r3
 80024f6:	2307      	movs	r3, #7
 80024f8:	0019      	movs	r1, r3
 80024fa:	4302      	orrs	r2, r0
 80024fc:	2400      	movs	r4, #0
 80024fe:	4011      	ands	r1, r2
 8002500:	4213      	tst	r3, r2
 8002502:	d009      	beq.n	8002518 <__aeabi_ddiv+0x5d8>
 8002504:	3308      	adds	r3, #8
 8002506:	4013      	ands	r3, r2
 8002508:	2b04      	cmp	r3, #4
 800250a:	d01d      	beq.n	8002548 <__aeabi_ddiv+0x608>
 800250c:	1d13      	adds	r3, r2, #4
 800250e:	4293      	cmp	r3, r2
 8002510:	4189      	sbcs	r1, r1
 8002512:	001a      	movs	r2, r3
 8002514:	4249      	negs	r1, r1
 8002516:	0749      	lsls	r1, r1, #29
 8002518:	08d2      	lsrs	r2, r2, #3
 800251a:	430a      	orrs	r2, r1
 800251c:	4690      	mov	r8, r2
 800251e:	2300      	movs	r3, #0
 8002520:	e57a      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002522:	4649      	mov	r1, r9
 8002524:	9f00      	ldr	r7, [sp, #0]
 8002526:	004d      	lsls	r5, r1, #1
 8002528:	454d      	cmp	r5, r9
 800252a:	4189      	sbcs	r1, r1
 800252c:	46bc      	mov	ip, r7
 800252e:	4249      	negs	r1, r1
 8002530:	4461      	add	r1, ip
 8002532:	46a9      	mov	r9, r5
 8002534:	3a02      	subs	r2, #2
 8002536:	1864      	adds	r4, r4, r1
 8002538:	e7ae      	b.n	8002498 <__aeabi_ddiv+0x558>
 800253a:	2201      	movs	r2, #1
 800253c:	4252      	negs	r2, r2
 800253e:	e746      	b.n	80023ce <__aeabi_ddiv+0x48e>
 8002540:	4599      	cmp	r9, r3
 8002542:	d3ee      	bcc.n	8002522 <__aeabi_ddiv+0x5e2>
 8002544:	000a      	movs	r2, r1
 8002546:	e7aa      	b.n	800249e <__aeabi_ddiv+0x55e>
 8002548:	2100      	movs	r1, #0
 800254a:	e7e5      	b.n	8002518 <__aeabi_ddiv+0x5d8>
 800254c:	0759      	lsls	r1, r3, #29
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	0b1c      	lsrs	r4, r3, #12
 8002552:	e7e1      	b.n	8002518 <__aeabi_ddiv+0x5d8>
 8002554:	000003ff 	.word	0x000003ff
 8002558:	feffffff 	.word	0xfeffffff
 800255c:	000007fe 	.word	0x000007fe
 8002560:	000007ff 	.word	0x000007ff
 8002564:	0000041e 	.word	0x0000041e
 8002568:	fffffc02 	.word	0xfffffc02
 800256c:	0000043e 	.word	0x0000043e

08002570 <__eqdf2>:
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	4657      	mov	r7, sl
 8002574:	46de      	mov	lr, fp
 8002576:	464e      	mov	r6, r9
 8002578:	4645      	mov	r5, r8
 800257a:	b5e0      	push	{r5, r6, r7, lr}
 800257c:	000d      	movs	r5, r1
 800257e:	0004      	movs	r4, r0
 8002580:	0fe8      	lsrs	r0, r5, #31
 8002582:	4683      	mov	fp, r0
 8002584:	0309      	lsls	r1, r1, #12
 8002586:	0fd8      	lsrs	r0, r3, #31
 8002588:	0b09      	lsrs	r1, r1, #12
 800258a:	4682      	mov	sl, r0
 800258c:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <__eqdf2+0x84>)
 800258e:	468c      	mov	ip, r1
 8002590:	031f      	lsls	r7, r3, #12
 8002592:	0069      	lsls	r1, r5, #1
 8002594:	005e      	lsls	r6, r3, #1
 8002596:	0d49      	lsrs	r1, r1, #21
 8002598:	0b3f      	lsrs	r7, r7, #12
 800259a:	0d76      	lsrs	r6, r6, #21
 800259c:	4281      	cmp	r1, r0
 800259e:	d018      	beq.n	80025d2 <__eqdf2+0x62>
 80025a0:	4286      	cmp	r6, r0
 80025a2:	d00f      	beq.n	80025c4 <__eqdf2+0x54>
 80025a4:	2001      	movs	r0, #1
 80025a6:	42b1      	cmp	r1, r6
 80025a8:	d10d      	bne.n	80025c6 <__eqdf2+0x56>
 80025aa:	45bc      	cmp	ip, r7
 80025ac:	d10b      	bne.n	80025c6 <__eqdf2+0x56>
 80025ae:	4294      	cmp	r4, r2
 80025b0:	d109      	bne.n	80025c6 <__eqdf2+0x56>
 80025b2:	45d3      	cmp	fp, sl
 80025b4:	d01c      	beq.n	80025f0 <__eqdf2+0x80>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d105      	bne.n	80025c6 <__eqdf2+0x56>
 80025ba:	4660      	mov	r0, ip
 80025bc:	4320      	orrs	r0, r4
 80025be:	1e43      	subs	r3, r0, #1
 80025c0:	4198      	sbcs	r0, r3
 80025c2:	e000      	b.n	80025c6 <__eqdf2+0x56>
 80025c4:	2001      	movs	r0, #1
 80025c6:	bcf0      	pop	{r4, r5, r6, r7}
 80025c8:	46bb      	mov	fp, r7
 80025ca:	46b2      	mov	sl, r6
 80025cc:	46a9      	mov	r9, r5
 80025ce:	46a0      	mov	r8, r4
 80025d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d2:	2001      	movs	r0, #1
 80025d4:	428e      	cmp	r6, r1
 80025d6:	d1f6      	bne.n	80025c6 <__eqdf2+0x56>
 80025d8:	4661      	mov	r1, ip
 80025da:	4339      	orrs	r1, r7
 80025dc:	000f      	movs	r7, r1
 80025de:	4317      	orrs	r7, r2
 80025e0:	4327      	orrs	r7, r4
 80025e2:	d1f0      	bne.n	80025c6 <__eqdf2+0x56>
 80025e4:	465b      	mov	r3, fp
 80025e6:	4652      	mov	r2, sl
 80025e8:	1a98      	subs	r0, r3, r2
 80025ea:	1e43      	subs	r3, r0, #1
 80025ec:	4198      	sbcs	r0, r3
 80025ee:	e7ea      	b.n	80025c6 <__eqdf2+0x56>
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7e8      	b.n	80025c6 <__eqdf2+0x56>
 80025f4:	000007ff 	.word	0x000007ff

080025f8 <__gedf2>:
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	4657      	mov	r7, sl
 80025fc:	464e      	mov	r6, r9
 80025fe:	4645      	mov	r5, r8
 8002600:	46de      	mov	lr, fp
 8002602:	b5e0      	push	{r5, r6, r7, lr}
 8002604:	000d      	movs	r5, r1
 8002606:	030e      	lsls	r6, r1, #12
 8002608:	0049      	lsls	r1, r1, #1
 800260a:	0d49      	lsrs	r1, r1, #21
 800260c:	468a      	mov	sl, r1
 800260e:	0fdf      	lsrs	r7, r3, #31
 8002610:	0fe9      	lsrs	r1, r5, #31
 8002612:	46bc      	mov	ip, r7
 8002614:	b083      	sub	sp, #12
 8002616:	4f2f      	ldr	r7, [pc, #188]	@ (80026d4 <__gedf2+0xdc>)
 8002618:	0004      	movs	r4, r0
 800261a:	4680      	mov	r8, r0
 800261c:	9101      	str	r1, [sp, #4]
 800261e:	0058      	lsls	r0, r3, #1
 8002620:	0319      	lsls	r1, r3, #12
 8002622:	4691      	mov	r9, r2
 8002624:	0b36      	lsrs	r6, r6, #12
 8002626:	0b09      	lsrs	r1, r1, #12
 8002628:	0d40      	lsrs	r0, r0, #21
 800262a:	45ba      	cmp	sl, r7
 800262c:	d01d      	beq.n	800266a <__gedf2+0x72>
 800262e:	42b8      	cmp	r0, r7
 8002630:	d00d      	beq.n	800264e <__gedf2+0x56>
 8002632:	4657      	mov	r7, sl
 8002634:	2f00      	cmp	r7, #0
 8002636:	d12a      	bne.n	800268e <__gedf2+0x96>
 8002638:	4334      	orrs	r4, r6
 800263a:	2800      	cmp	r0, #0
 800263c:	d124      	bne.n	8002688 <__gedf2+0x90>
 800263e:	430a      	orrs	r2, r1
 8002640:	d036      	beq.n	80026b0 <__gedf2+0xb8>
 8002642:	2c00      	cmp	r4, #0
 8002644:	d141      	bne.n	80026ca <__gedf2+0xd2>
 8002646:	4663      	mov	r3, ip
 8002648:	0058      	lsls	r0, r3, #1
 800264a:	3801      	subs	r0, #1
 800264c:	e015      	b.n	800267a <__gedf2+0x82>
 800264e:	4311      	orrs	r1, r2
 8002650:	d138      	bne.n	80026c4 <__gedf2+0xcc>
 8002652:	4653      	mov	r3, sl
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <__gedf2+0x64>
 8002658:	4326      	orrs	r6, r4
 800265a:	d0f4      	beq.n	8002646 <__gedf2+0x4e>
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	4563      	cmp	r3, ip
 8002660:	d107      	bne.n	8002672 <__gedf2+0x7a>
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	0058      	lsls	r0, r3, #1
 8002666:	3801      	subs	r0, #1
 8002668:	e007      	b.n	800267a <__gedf2+0x82>
 800266a:	4326      	orrs	r6, r4
 800266c:	d12a      	bne.n	80026c4 <__gedf2+0xcc>
 800266e:	4550      	cmp	r0, sl
 8002670:	d021      	beq.n	80026b6 <__gedf2+0xbe>
 8002672:	2001      	movs	r0, #1
 8002674:	9b01      	ldr	r3, [sp, #4]
 8002676:	425f      	negs	r7, r3
 8002678:	4338      	orrs	r0, r7
 800267a:	b003      	add	sp, #12
 800267c:	bcf0      	pop	{r4, r5, r6, r7}
 800267e:	46bb      	mov	fp, r7
 8002680:	46b2      	mov	sl, r6
 8002682:	46a9      	mov	r9, r5
 8002684:	46a0      	mov	r8, r4
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002688:	2c00      	cmp	r4, #0
 800268a:	d0dc      	beq.n	8002646 <__gedf2+0x4e>
 800268c:	e7e6      	b.n	800265c <__gedf2+0x64>
 800268e:	2800      	cmp	r0, #0
 8002690:	d0ef      	beq.n	8002672 <__gedf2+0x7a>
 8002692:	9b01      	ldr	r3, [sp, #4]
 8002694:	4563      	cmp	r3, ip
 8002696:	d1ec      	bne.n	8002672 <__gedf2+0x7a>
 8002698:	4582      	cmp	sl, r0
 800269a:	dcea      	bgt.n	8002672 <__gedf2+0x7a>
 800269c:	dbe1      	blt.n	8002662 <__gedf2+0x6a>
 800269e:	428e      	cmp	r6, r1
 80026a0:	d8e7      	bhi.n	8002672 <__gedf2+0x7a>
 80026a2:	d1de      	bne.n	8002662 <__gedf2+0x6a>
 80026a4:	45c8      	cmp	r8, r9
 80026a6:	d8e4      	bhi.n	8002672 <__gedf2+0x7a>
 80026a8:	2000      	movs	r0, #0
 80026aa:	45c8      	cmp	r8, r9
 80026ac:	d2e5      	bcs.n	800267a <__gedf2+0x82>
 80026ae:	e7d8      	b.n	8002662 <__gedf2+0x6a>
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d0e2      	beq.n	800267a <__gedf2+0x82>
 80026b4:	e7dd      	b.n	8002672 <__gedf2+0x7a>
 80026b6:	4311      	orrs	r1, r2
 80026b8:	d104      	bne.n	80026c4 <__gedf2+0xcc>
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	4563      	cmp	r3, ip
 80026be:	d1d8      	bne.n	8002672 <__gedf2+0x7a>
 80026c0:	2000      	movs	r0, #0
 80026c2:	e7da      	b.n	800267a <__gedf2+0x82>
 80026c4:	2002      	movs	r0, #2
 80026c6:	4240      	negs	r0, r0
 80026c8:	e7d7      	b.n	800267a <__gedf2+0x82>
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	4563      	cmp	r3, ip
 80026ce:	d0e6      	beq.n	800269e <__gedf2+0xa6>
 80026d0:	e7cf      	b.n	8002672 <__gedf2+0x7a>
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	000007ff 	.word	0x000007ff

080026d8 <__ledf2>:
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	4657      	mov	r7, sl
 80026dc:	464e      	mov	r6, r9
 80026de:	4645      	mov	r5, r8
 80026e0:	46de      	mov	lr, fp
 80026e2:	b5e0      	push	{r5, r6, r7, lr}
 80026e4:	000d      	movs	r5, r1
 80026e6:	030e      	lsls	r6, r1, #12
 80026e8:	0049      	lsls	r1, r1, #1
 80026ea:	0d49      	lsrs	r1, r1, #21
 80026ec:	468a      	mov	sl, r1
 80026ee:	0fdf      	lsrs	r7, r3, #31
 80026f0:	0fe9      	lsrs	r1, r5, #31
 80026f2:	46bc      	mov	ip, r7
 80026f4:	b083      	sub	sp, #12
 80026f6:	4f2e      	ldr	r7, [pc, #184]	@ (80027b0 <__ledf2+0xd8>)
 80026f8:	0004      	movs	r4, r0
 80026fa:	4680      	mov	r8, r0
 80026fc:	9101      	str	r1, [sp, #4]
 80026fe:	0058      	lsls	r0, r3, #1
 8002700:	0319      	lsls	r1, r3, #12
 8002702:	4691      	mov	r9, r2
 8002704:	0b36      	lsrs	r6, r6, #12
 8002706:	0b09      	lsrs	r1, r1, #12
 8002708:	0d40      	lsrs	r0, r0, #21
 800270a:	45ba      	cmp	sl, r7
 800270c:	d01e      	beq.n	800274c <__ledf2+0x74>
 800270e:	42b8      	cmp	r0, r7
 8002710:	d00d      	beq.n	800272e <__ledf2+0x56>
 8002712:	4657      	mov	r7, sl
 8002714:	2f00      	cmp	r7, #0
 8002716:	d127      	bne.n	8002768 <__ledf2+0x90>
 8002718:	4334      	orrs	r4, r6
 800271a:	2800      	cmp	r0, #0
 800271c:	d133      	bne.n	8002786 <__ledf2+0xae>
 800271e:	430a      	orrs	r2, r1
 8002720:	d034      	beq.n	800278c <__ledf2+0xb4>
 8002722:	2c00      	cmp	r4, #0
 8002724:	d140      	bne.n	80027a8 <__ledf2+0xd0>
 8002726:	4663      	mov	r3, ip
 8002728:	0058      	lsls	r0, r3, #1
 800272a:	3801      	subs	r0, #1
 800272c:	e015      	b.n	800275a <__ledf2+0x82>
 800272e:	4311      	orrs	r1, r2
 8002730:	d112      	bne.n	8002758 <__ledf2+0x80>
 8002732:	4653      	mov	r3, sl
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <__ledf2+0x64>
 8002738:	4326      	orrs	r6, r4
 800273a:	d0f4      	beq.n	8002726 <__ledf2+0x4e>
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	4563      	cmp	r3, ip
 8002740:	d01d      	beq.n	800277e <__ledf2+0xa6>
 8002742:	2001      	movs	r0, #1
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	425f      	negs	r7, r3
 8002748:	4338      	orrs	r0, r7
 800274a:	e006      	b.n	800275a <__ledf2+0x82>
 800274c:	4326      	orrs	r6, r4
 800274e:	d103      	bne.n	8002758 <__ledf2+0x80>
 8002750:	4550      	cmp	r0, sl
 8002752:	d1f6      	bne.n	8002742 <__ledf2+0x6a>
 8002754:	4311      	orrs	r1, r2
 8002756:	d01c      	beq.n	8002792 <__ledf2+0xba>
 8002758:	2002      	movs	r0, #2
 800275a:	b003      	add	sp, #12
 800275c:	bcf0      	pop	{r4, r5, r6, r7}
 800275e:	46bb      	mov	fp, r7
 8002760:	46b2      	mov	sl, r6
 8002762:	46a9      	mov	r9, r5
 8002764:	46a0      	mov	r8, r4
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002768:	2800      	cmp	r0, #0
 800276a:	d0ea      	beq.n	8002742 <__ledf2+0x6a>
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	4563      	cmp	r3, ip
 8002770:	d1e7      	bne.n	8002742 <__ledf2+0x6a>
 8002772:	4582      	cmp	sl, r0
 8002774:	dce5      	bgt.n	8002742 <__ledf2+0x6a>
 8002776:	db02      	blt.n	800277e <__ledf2+0xa6>
 8002778:	428e      	cmp	r6, r1
 800277a:	d8e2      	bhi.n	8002742 <__ledf2+0x6a>
 800277c:	d00e      	beq.n	800279c <__ledf2+0xc4>
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	0058      	lsls	r0, r3, #1
 8002782:	3801      	subs	r0, #1
 8002784:	e7e9      	b.n	800275a <__ledf2+0x82>
 8002786:	2c00      	cmp	r4, #0
 8002788:	d0cd      	beq.n	8002726 <__ledf2+0x4e>
 800278a:	e7d7      	b.n	800273c <__ledf2+0x64>
 800278c:	2c00      	cmp	r4, #0
 800278e:	d0e4      	beq.n	800275a <__ledf2+0x82>
 8002790:	e7d7      	b.n	8002742 <__ledf2+0x6a>
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	2000      	movs	r0, #0
 8002796:	4563      	cmp	r3, ip
 8002798:	d0df      	beq.n	800275a <__ledf2+0x82>
 800279a:	e7d2      	b.n	8002742 <__ledf2+0x6a>
 800279c:	45c8      	cmp	r8, r9
 800279e:	d8d0      	bhi.n	8002742 <__ledf2+0x6a>
 80027a0:	2000      	movs	r0, #0
 80027a2:	45c8      	cmp	r8, r9
 80027a4:	d2d9      	bcs.n	800275a <__ledf2+0x82>
 80027a6:	e7ea      	b.n	800277e <__ledf2+0xa6>
 80027a8:	9b01      	ldr	r3, [sp, #4]
 80027aa:	4563      	cmp	r3, ip
 80027ac:	d0e4      	beq.n	8002778 <__ledf2+0xa0>
 80027ae:	e7c8      	b.n	8002742 <__ledf2+0x6a>
 80027b0:	000007ff 	.word	0x000007ff

080027b4 <__aeabi_dmul>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	4657      	mov	r7, sl
 80027b8:	464e      	mov	r6, r9
 80027ba:	46de      	mov	lr, fp
 80027bc:	4645      	mov	r5, r8
 80027be:	b5e0      	push	{r5, r6, r7, lr}
 80027c0:	001f      	movs	r7, r3
 80027c2:	030b      	lsls	r3, r1, #12
 80027c4:	0b1b      	lsrs	r3, r3, #12
 80027c6:	0016      	movs	r6, r2
 80027c8:	469a      	mov	sl, r3
 80027ca:	0fca      	lsrs	r2, r1, #31
 80027cc:	004b      	lsls	r3, r1, #1
 80027ce:	0004      	movs	r4, r0
 80027d0:	4691      	mov	r9, r2
 80027d2:	b085      	sub	sp, #20
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	d100      	bne.n	80027da <__aeabi_dmul+0x26>
 80027d8:	e1cf      	b.n	8002b7a <__aeabi_dmul+0x3c6>
 80027da:	4acd      	ldr	r2, [pc, #820]	@ (8002b10 <__aeabi_dmul+0x35c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d055      	beq.n	800288c <__aeabi_dmul+0xd8>
 80027e0:	4651      	mov	r1, sl
 80027e2:	0f42      	lsrs	r2, r0, #29
 80027e4:	00c9      	lsls	r1, r1, #3
 80027e6:	430a      	orrs	r2, r1
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0409      	lsls	r1, r1, #16
 80027ec:	4311      	orrs	r1, r2
 80027ee:	00c2      	lsls	r2, r0, #3
 80027f0:	4690      	mov	r8, r2
 80027f2:	4ac8      	ldr	r2, [pc, #800]	@ (8002b14 <__aeabi_dmul+0x360>)
 80027f4:	468a      	mov	sl, r1
 80027f6:	4693      	mov	fp, r2
 80027f8:	449b      	add	fp, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	2500      	movs	r5, #0
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	033c      	lsls	r4, r7, #12
 8002802:	007b      	lsls	r3, r7, #1
 8002804:	0ffa      	lsrs	r2, r7, #31
 8002806:	9601      	str	r6, [sp, #4]
 8002808:	0b24      	lsrs	r4, r4, #12
 800280a:	0d5b      	lsrs	r3, r3, #21
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	d100      	bne.n	8002812 <__aeabi_dmul+0x5e>
 8002810:	e188      	b.n	8002b24 <__aeabi_dmul+0x370>
 8002812:	4abf      	ldr	r2, [pc, #764]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <__aeabi_dmul+0x66>
 8002818:	e092      	b.n	8002940 <__aeabi_dmul+0x18c>
 800281a:	4abe      	ldr	r2, [pc, #760]	@ (8002b14 <__aeabi_dmul+0x360>)
 800281c:	4694      	mov	ip, r2
 800281e:	4463      	add	r3, ip
 8002820:	449b      	add	fp, r3
 8002822:	2d0a      	cmp	r5, #10
 8002824:	dc42      	bgt.n	80028ac <__aeabi_dmul+0xf8>
 8002826:	00e4      	lsls	r4, r4, #3
 8002828:	0f73      	lsrs	r3, r6, #29
 800282a:	4323      	orrs	r3, r4
 800282c:	2480      	movs	r4, #128	@ 0x80
 800282e:	4649      	mov	r1, r9
 8002830:	0424      	lsls	r4, r4, #16
 8002832:	431c      	orrs	r4, r3
 8002834:	00f3      	lsls	r3, r6, #3
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9b00      	ldr	r3, [sp, #0]
 800283a:	2000      	movs	r0, #0
 800283c:	4059      	eors	r1, r3
 800283e:	b2cb      	uxtb	r3, r1
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	2d02      	cmp	r5, #2
 8002844:	dc00      	bgt.n	8002848 <__aeabi_dmul+0x94>
 8002846:	e094      	b.n	8002972 <__aeabi_dmul+0x1be>
 8002848:	2301      	movs	r3, #1
 800284a:	40ab      	lsls	r3, r5
 800284c:	001d      	movs	r5, r3
 800284e:	23a6      	movs	r3, #166	@ 0xa6
 8002850:	002a      	movs	r2, r5
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	401a      	ands	r2, r3
 8002856:	421d      	tst	r5, r3
 8002858:	d000      	beq.n	800285c <__aeabi_dmul+0xa8>
 800285a:	e229      	b.n	8002cb0 <__aeabi_dmul+0x4fc>
 800285c:	2390      	movs	r3, #144	@ 0x90
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	421d      	tst	r5, r3
 8002862:	d100      	bne.n	8002866 <__aeabi_dmul+0xb2>
 8002864:	e24d      	b.n	8002d02 <__aeabi_dmul+0x54e>
 8002866:	2300      	movs	r3, #0
 8002868:	2480      	movs	r4, #128	@ 0x80
 800286a:	4699      	mov	r9, r3
 800286c:	0324      	lsls	r4, r4, #12
 800286e:	4ba8      	ldr	r3, [pc, #672]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002870:	0010      	movs	r0, r2
 8002872:	464a      	mov	r2, r9
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	4323      	orrs	r3, r4
 8002878:	07d2      	lsls	r2, r2, #31
 800287a:	4313      	orrs	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	b005      	add	sp, #20
 8002880:	bcf0      	pop	{r4, r5, r6, r7}
 8002882:	46bb      	mov	fp, r7
 8002884:	46b2      	mov	sl, r6
 8002886:	46a9      	mov	r9, r5
 8002888:	46a0      	mov	r8, r4
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288c:	4652      	mov	r2, sl
 800288e:	4302      	orrs	r2, r0
 8002890:	4690      	mov	r8, r2
 8002892:	d000      	beq.n	8002896 <__aeabi_dmul+0xe2>
 8002894:	e1ac      	b.n	8002bf0 <__aeabi_dmul+0x43c>
 8002896:	469b      	mov	fp, r3
 8002898:	2302      	movs	r3, #2
 800289a:	4692      	mov	sl, r2
 800289c:	2508      	movs	r5, #8
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	e7ae      	b.n	8002800 <__aeabi_dmul+0x4c>
 80028a2:	9b00      	ldr	r3, [sp, #0]
 80028a4:	46a2      	mov	sl, r4
 80028a6:	4699      	mov	r9, r3
 80028a8:	9b01      	ldr	r3, [sp, #4]
 80028aa:	4698      	mov	r8, r3
 80028ac:	9b02      	ldr	r3, [sp, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dmul+0x100>
 80028b2:	e1ca      	b.n	8002c4a <__aeabi_dmul+0x496>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d100      	bne.n	80028ba <__aeabi_dmul+0x106>
 80028b8:	e192      	b.n	8002be0 <__aeabi_dmul+0x42c>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d110      	bne.n	80028e0 <__aeabi_dmul+0x12c>
 80028be:	2300      	movs	r3, #0
 80028c0:	2400      	movs	r4, #0
 80028c2:	2200      	movs	r2, #0
 80028c4:	e7d4      	b.n	8002870 <__aeabi_dmul+0xbc>
 80028c6:	2201      	movs	r2, #1
 80028c8:	087b      	lsrs	r3, r7, #1
 80028ca:	403a      	ands	r2, r7
 80028cc:	4313      	orrs	r3, r2
 80028ce:	4652      	mov	r2, sl
 80028d0:	07d2      	lsls	r2, r2, #31
 80028d2:	4313      	orrs	r3, r2
 80028d4:	4698      	mov	r8, r3
 80028d6:	4653      	mov	r3, sl
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	469a      	mov	sl, r3
 80028dc:	9b03      	ldr	r3, [sp, #12]
 80028de:	4699      	mov	r9, r3
 80028e0:	465b      	mov	r3, fp
 80028e2:	1c58      	adds	r0, r3, #1
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	445b      	add	r3, fp
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_dmul+0x13c>
 80028ee:	e1b1      	b.n	8002c54 <__aeabi_dmul+0x4a0>
 80028f0:	4642      	mov	r2, r8
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	d00b      	beq.n	800290e <__aeabi_dmul+0x15a>
 80028f6:	220f      	movs	r2, #15
 80028f8:	4641      	mov	r1, r8
 80028fa:	400a      	ands	r2, r1
 80028fc:	2a04      	cmp	r2, #4
 80028fe:	d006      	beq.n	800290e <__aeabi_dmul+0x15a>
 8002900:	4642      	mov	r2, r8
 8002902:	1d11      	adds	r1, r2, #4
 8002904:	4541      	cmp	r1, r8
 8002906:	4192      	sbcs	r2, r2
 8002908:	4688      	mov	r8, r1
 800290a:	4252      	negs	r2, r2
 800290c:	4492      	add	sl, r2
 800290e:	4652      	mov	r2, sl
 8002910:	01d2      	lsls	r2, r2, #7
 8002912:	d506      	bpl.n	8002922 <__aeabi_dmul+0x16e>
 8002914:	4652      	mov	r2, sl
 8002916:	4b80      	ldr	r3, [pc, #512]	@ (8002b18 <__aeabi_dmul+0x364>)
 8002918:	401a      	ands	r2, r3
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	4692      	mov	sl, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	18c3      	adds	r3, r0, r3
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <__aeabi_dmul+0x368>)
 8002924:	4293      	cmp	r3, r2
 8002926:	dd00      	ble.n	800292a <__aeabi_dmul+0x176>
 8002928:	e18f      	b.n	8002c4a <__aeabi_dmul+0x496>
 800292a:	4642      	mov	r2, r8
 800292c:	08d1      	lsrs	r1, r2, #3
 800292e:	4652      	mov	r2, sl
 8002930:	0752      	lsls	r2, r2, #29
 8002932:	430a      	orrs	r2, r1
 8002934:	4651      	mov	r1, sl
 8002936:	055b      	lsls	r3, r3, #21
 8002938:	024c      	lsls	r4, r1, #9
 800293a:	0b24      	lsrs	r4, r4, #12
 800293c:	0d5b      	lsrs	r3, r3, #21
 800293e:	e797      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002940:	4b73      	ldr	r3, [pc, #460]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002942:	4326      	orrs	r6, r4
 8002944:	469c      	mov	ip, r3
 8002946:	44e3      	add	fp, ip
 8002948:	2e00      	cmp	r6, #0
 800294a:	d100      	bne.n	800294e <__aeabi_dmul+0x19a>
 800294c:	e16f      	b.n	8002c2e <__aeabi_dmul+0x47a>
 800294e:	2303      	movs	r3, #3
 8002950:	4649      	mov	r1, r9
 8002952:	431d      	orrs	r5, r3
 8002954:	9b00      	ldr	r3, [sp, #0]
 8002956:	4059      	eors	r1, r3
 8002958:	b2cb      	uxtb	r3, r1
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	2d0a      	cmp	r5, #10
 800295e:	dd00      	ble.n	8002962 <__aeabi_dmul+0x1ae>
 8002960:	e133      	b.n	8002bca <__aeabi_dmul+0x416>
 8002962:	2301      	movs	r3, #1
 8002964:	40ab      	lsls	r3, r5
 8002966:	001d      	movs	r5, r3
 8002968:	2303      	movs	r3, #3
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2288      	movs	r2, #136	@ 0x88
 800296e:	422a      	tst	r2, r5
 8002970:	d197      	bne.n	80028a2 <__aeabi_dmul+0xee>
 8002972:	4642      	mov	r2, r8
 8002974:	4643      	mov	r3, r8
 8002976:	0412      	lsls	r2, r2, #16
 8002978:	0c12      	lsrs	r2, r2, #16
 800297a:	0016      	movs	r6, r2
 800297c:	9801      	ldr	r0, [sp, #4]
 800297e:	0c1d      	lsrs	r5, r3, #16
 8002980:	0c03      	lsrs	r3, r0, #16
 8002982:	0400      	lsls	r0, r0, #16
 8002984:	0c00      	lsrs	r0, r0, #16
 8002986:	4346      	muls	r6, r0
 8002988:	46b4      	mov	ip, r6
 800298a:	001e      	movs	r6, r3
 800298c:	436e      	muls	r6, r5
 800298e:	9600      	str	r6, [sp, #0]
 8002990:	0016      	movs	r6, r2
 8002992:	0007      	movs	r7, r0
 8002994:	435e      	muls	r6, r3
 8002996:	4661      	mov	r1, ip
 8002998:	46b0      	mov	r8, r6
 800299a:	436f      	muls	r7, r5
 800299c:	0c0e      	lsrs	r6, r1, #16
 800299e:	44b8      	add	r8, r7
 80029a0:	4446      	add	r6, r8
 80029a2:	42b7      	cmp	r7, r6
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x1fe>
 80029a6:	2180      	movs	r1, #128	@ 0x80
 80029a8:	0249      	lsls	r1, r1, #9
 80029aa:	4688      	mov	r8, r1
 80029ac:	9f00      	ldr	r7, [sp, #0]
 80029ae:	4447      	add	r7, r8
 80029b0:	9700      	str	r7, [sp, #0]
 80029b2:	4661      	mov	r1, ip
 80029b4:	0409      	lsls	r1, r1, #16
 80029b6:	0c09      	lsrs	r1, r1, #16
 80029b8:	0c37      	lsrs	r7, r6, #16
 80029ba:	0436      	lsls	r6, r6, #16
 80029bc:	468c      	mov	ip, r1
 80029be:	0031      	movs	r1, r6
 80029c0:	4461      	add	r1, ip
 80029c2:	9101      	str	r1, [sp, #4]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0c26      	lsrs	r6, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	4361      	muls	r1, r4
 80029ce:	468c      	mov	ip, r1
 80029d0:	0021      	movs	r1, r4
 80029d2:	4369      	muls	r1, r5
 80029d4:	4689      	mov	r9, r1
 80029d6:	4661      	mov	r1, ip
 80029d8:	0c09      	lsrs	r1, r1, #16
 80029da:	4688      	mov	r8, r1
 80029dc:	4372      	muls	r2, r6
 80029de:	444a      	add	r2, r9
 80029e0:	4442      	add	r2, r8
 80029e2:	4375      	muls	r5, r6
 80029e4:	4591      	cmp	r9, r2
 80029e6:	d903      	bls.n	80029f0 <__aeabi_dmul+0x23c>
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	0249      	lsls	r1, r1, #9
 80029ec:	4688      	mov	r8, r1
 80029ee:	4445      	add	r5, r8
 80029f0:	0c11      	lsrs	r1, r2, #16
 80029f2:	4688      	mov	r8, r1
 80029f4:	4661      	mov	r1, ip
 80029f6:	0409      	lsls	r1, r1, #16
 80029f8:	0c09      	lsrs	r1, r1, #16
 80029fa:	468c      	mov	ip, r1
 80029fc:	0412      	lsls	r2, r2, #16
 80029fe:	4462      	add	r2, ip
 8002a00:	18b9      	adds	r1, r7, r2
 8002a02:	9102      	str	r1, [sp, #8]
 8002a04:	4651      	mov	r1, sl
 8002a06:	0c09      	lsrs	r1, r1, #16
 8002a08:	468c      	mov	ip, r1
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	040f      	lsls	r7, r1, #16
 8002a0e:	0c3f      	lsrs	r7, r7, #16
 8002a10:	0039      	movs	r1, r7
 8002a12:	4341      	muls	r1, r0
 8002a14:	4445      	add	r5, r8
 8002a16:	4688      	mov	r8, r1
 8002a18:	4661      	mov	r1, ip
 8002a1a:	4341      	muls	r1, r0
 8002a1c:	468a      	mov	sl, r1
 8002a1e:	4641      	mov	r1, r8
 8002a20:	4660      	mov	r0, ip
 8002a22:	0c09      	lsrs	r1, r1, #16
 8002a24:	4689      	mov	r9, r1
 8002a26:	4358      	muls	r0, r3
 8002a28:	437b      	muls	r3, r7
 8002a2a:	4453      	add	r3, sl
 8002a2c:	444b      	add	r3, r9
 8002a2e:	459a      	cmp	sl, r3
 8002a30:	d903      	bls.n	8002a3a <__aeabi_dmul+0x286>
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0249      	lsls	r1, r1, #9
 8002a36:	4689      	mov	r9, r1
 8002a38:	4448      	add	r0, r9
 8002a3a:	0c19      	lsrs	r1, r3, #16
 8002a3c:	4689      	mov	r9, r1
 8002a3e:	4641      	mov	r1, r8
 8002a40:	0409      	lsls	r1, r1, #16
 8002a42:	0c09      	lsrs	r1, r1, #16
 8002a44:	4688      	mov	r8, r1
 8002a46:	0039      	movs	r1, r7
 8002a48:	4361      	muls	r1, r4
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	4443      	add	r3, r8
 8002a4e:	4688      	mov	r8, r1
 8002a50:	4661      	mov	r1, ip
 8002a52:	434c      	muls	r4, r1
 8002a54:	4371      	muls	r1, r6
 8002a56:	468c      	mov	ip, r1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	4377      	muls	r7, r6
 8002a5c:	0c0e      	lsrs	r6, r1, #16
 8002a5e:	193f      	adds	r7, r7, r4
 8002a60:	19f6      	adds	r6, r6, r7
 8002a62:	4448      	add	r0, r9
 8002a64:	42b4      	cmp	r4, r6
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x2bc>
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0249      	lsls	r1, r1, #9
 8002a6c:	4689      	mov	r9, r1
 8002a6e:	44cc      	add	ip, r9
 8002a70:	9902      	ldr	r1, [sp, #8]
 8002a72:	9f00      	ldr	r7, [sp, #0]
 8002a74:	4689      	mov	r9, r1
 8002a76:	0431      	lsls	r1, r6, #16
 8002a78:	444f      	add	r7, r9
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	4297      	cmp	r7, r2
 8002a80:	4192      	sbcs	r2, r2
 8002a82:	040c      	lsls	r4, r1, #16
 8002a84:	0c24      	lsrs	r4, r4, #16
 8002a86:	444c      	add	r4, r9
 8002a88:	18ff      	adds	r7, r7, r3
 8002a8a:	4252      	negs	r2, r2
 8002a8c:	1964      	adds	r4, r4, r5
 8002a8e:	18a1      	adds	r1, r4, r2
 8002a90:	429f      	cmp	r7, r3
 8002a92:	419b      	sbcs	r3, r3
 8002a94:	4688      	mov	r8, r1
 8002a96:	4682      	mov	sl, r0
 8002a98:	425b      	negs	r3, r3
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4590      	cmp	r8, r2
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	42ac      	cmp	r4, r5
 8002aa2:	41a4      	sbcs	r4, r4
 8002aa4:	44c2      	add	sl, r8
 8002aa6:	44d1      	add	r9, sl
 8002aa8:	4252      	negs	r2, r2
 8002aaa:	4264      	negs	r4, r4
 8002aac:	4314      	orrs	r4, r2
 8002aae:	4599      	cmp	r9, r3
 8002ab0:	419b      	sbcs	r3, r3
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4192      	sbcs	r2, r2
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	4252      	negs	r2, r2
 8002aba:	4313      	orrs	r3, r2
 8002abc:	464a      	mov	r2, r9
 8002abe:	0c36      	lsrs	r6, r6, #16
 8002ac0:	19a4      	adds	r4, r4, r6
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	4463      	add	r3, ip
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	0dd2      	lsrs	r2, r2, #23
 8002aca:	431a      	orrs	r2, r3
 8002acc:	9901      	ldr	r1, [sp, #4]
 8002ace:	4692      	mov	sl, r2
 8002ad0:	027a      	lsls	r2, r7, #9
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	1e50      	subs	r0, r2, #1
 8002ad6:	4182      	sbcs	r2, r0
 8002ad8:	0dff      	lsrs	r7, r7, #23
 8002ada:	4317      	orrs	r7, r2
 8002adc:	464a      	mov	r2, r9
 8002ade:	0252      	lsls	r2, r2, #9
 8002ae0:	4317      	orrs	r7, r2
 8002ae2:	46b8      	mov	r8, r7
 8002ae4:	01db      	lsls	r3, r3, #7
 8002ae6:	d500      	bpl.n	8002aea <__aeabi_dmul+0x336>
 8002ae8:	e6ed      	b.n	80028c6 <__aeabi_dmul+0x112>
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <__aeabi_dmul+0x36c>)
 8002aec:	9a03      	ldr	r2, [sp, #12]
 8002aee:	445b      	add	r3, fp
 8002af0:	4691      	mov	r9, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	dc00      	bgt.n	8002af8 <__aeabi_dmul+0x344>
 8002af6:	e0ac      	b.n	8002c52 <__aeabi_dmul+0x49e>
 8002af8:	003a      	movs	r2, r7
 8002afa:	0752      	lsls	r2, r2, #29
 8002afc:	d100      	bne.n	8002b00 <__aeabi_dmul+0x34c>
 8002afe:	e710      	b.n	8002922 <__aeabi_dmul+0x16e>
 8002b00:	220f      	movs	r2, #15
 8002b02:	4658      	mov	r0, fp
 8002b04:	403a      	ands	r2, r7
 8002b06:	2a04      	cmp	r2, #4
 8002b08:	d000      	beq.n	8002b0c <__aeabi_dmul+0x358>
 8002b0a:	e6f9      	b.n	8002900 <__aeabi_dmul+0x14c>
 8002b0c:	e709      	b.n	8002922 <__aeabi_dmul+0x16e>
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	fffffc01 	.word	0xfffffc01
 8002b18:	feffffff 	.word	0xfeffffff
 8002b1c:	000007fe 	.word	0x000007fe
 8002b20:	000003ff 	.word	0x000003ff
 8002b24:	0022      	movs	r2, r4
 8002b26:	4332      	orrs	r2, r6
 8002b28:	d06f      	beq.n	8002c0a <__aeabi_dmul+0x456>
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dmul+0x37c>
 8002b2e:	e0c2      	b.n	8002cb6 <__aeabi_dmul+0x502>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fddf 	bl	80036f4 <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3a0b      	subs	r2, #11
 8002b3c:	201d      	movs	r0, #29
 8002b3e:	1a82      	subs	r2, r0, r2
 8002b40:	0030      	movs	r0, r6
 8002b42:	0019      	movs	r1, r3
 8002b44:	40d0      	lsrs	r0, r2
 8002b46:	3908      	subs	r1, #8
 8002b48:	408c      	lsls	r4, r1
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	4322      	orrs	r2, r4
 8002b4e:	0034      	movs	r4, r6
 8002b50:	408c      	lsls	r4, r1
 8002b52:	4659      	mov	r1, fp
 8002b54:	1acb      	subs	r3, r1, r3
 8002b56:	4986      	ldr	r1, [pc, #536]	@ (8002d70 <__aeabi_dmul+0x5bc>)
 8002b58:	468b      	mov	fp, r1
 8002b5a:	449b      	add	fp, r3
 8002b5c:	2d0a      	cmp	r5, #10
 8002b5e:	dd00      	ble.n	8002b62 <__aeabi_dmul+0x3ae>
 8002b60:	e6a4      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002b62:	4649      	mov	r1, r9
 8002b64:	9b00      	ldr	r3, [sp, #0]
 8002b66:	9401      	str	r4, [sp, #4]
 8002b68:	4059      	eors	r1, r3
 8002b6a:	b2cb      	uxtb	r3, r1
 8002b6c:	0014      	movs	r4, r2
 8002b6e:	2000      	movs	r0, #0
 8002b70:	9303      	str	r3, [sp, #12]
 8002b72:	2d02      	cmp	r5, #2
 8002b74:	dd00      	ble.n	8002b78 <__aeabi_dmul+0x3c4>
 8002b76:	e667      	b.n	8002848 <__aeabi_dmul+0x94>
 8002b78:	e6fb      	b.n	8002972 <__aeabi_dmul+0x1be>
 8002b7a:	4653      	mov	r3, sl
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	4698      	mov	r8, r3
 8002b80:	d03c      	beq.n	8002bfc <__aeabi_dmul+0x448>
 8002b82:	4653      	mov	r3, sl
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dmul+0x3d6>
 8002b88:	e0a3      	b.n	8002cd2 <__aeabi_dmul+0x51e>
 8002b8a:	4650      	mov	r0, sl
 8002b8c:	f000 fdb2 	bl	80036f4 <__clzsi2>
 8002b90:	230b      	movs	r3, #11
 8002b92:	425b      	negs	r3, r3
 8002b94:	469c      	mov	ip, r3
 8002b96:	0002      	movs	r2, r0
 8002b98:	4484      	add	ip, r0
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	4650      	mov	r0, sl
 8002b9e:	3908      	subs	r1, #8
 8002ba0:	4088      	lsls	r0, r1
 8002ba2:	231d      	movs	r3, #29
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	4660      	mov	r0, ip
 8002ba8:	1a1b      	subs	r3, r3, r0
 8002baa:	0020      	movs	r0, r4
 8002bac:	40d8      	lsrs	r0, r3
 8002bae:	0003      	movs	r3, r0
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4303      	orrs	r3, r0
 8002bb4:	469a      	mov	sl, r3
 8002bb6:	0023      	movs	r3, r4
 8002bb8:	408b      	lsls	r3, r1
 8002bba:	4698      	mov	r8, r3
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <__aeabi_dmul+0x5bc>)
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	469b      	mov	fp, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	e61a      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002bca:	2d0f      	cmp	r5, #15
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dmul+0x41c>
 8002bce:	e0c9      	b.n	8002d64 <__aeabi_dmul+0x5b0>
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	421a      	tst	r2, r3
 8002bd8:	d002      	beq.n	8002be0 <__aeabi_dmul+0x42c>
 8002bda:	421c      	tst	r4, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dmul+0x42c>
 8002bde:	e092      	b.n	8002d06 <__aeabi_dmul+0x552>
 8002be0:	2480      	movs	r4, #128	@ 0x80
 8002be2:	4653      	mov	r3, sl
 8002be4:	0324      	lsls	r4, r4, #12
 8002be6:	431c      	orrs	r4, r3
 8002be8:	0324      	lsls	r4, r4, #12
 8002bea:	4642      	mov	r2, r8
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	e63e      	b.n	800286e <__aeabi_dmul+0xba>
 8002bf0:	469b      	mov	fp, r3
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	250c      	movs	r5, #12
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	e601      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	469a      	mov	sl, r3
 8002c00:	469b      	mov	fp, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	2504      	movs	r5, #4
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	e5fa      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	430d      	orrs	r5, r1
 8002c0e:	2d0a      	cmp	r5, #10
 8002c10:	dd00      	ble.n	8002c14 <__aeabi_dmul+0x460>
 8002c12:	e64b      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002c14:	4649      	mov	r1, r9
 8002c16:	9800      	ldr	r0, [sp, #0]
 8002c18:	4041      	eors	r1, r0
 8002c1a:	b2c9      	uxtb	r1, r1
 8002c1c:	9103      	str	r1, [sp, #12]
 8002c1e:	2d02      	cmp	r5, #2
 8002c20:	dc00      	bgt.n	8002c24 <__aeabi_dmul+0x470>
 8002c22:	e096      	b.n	8002d52 <__aeabi_dmul+0x59e>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2400      	movs	r4, #0
 8002c28:	2001      	movs	r0, #1
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	e60c      	b.n	8002848 <__aeabi_dmul+0x94>
 8002c2e:	4649      	mov	r1, r9
 8002c30:	2302      	movs	r3, #2
 8002c32:	9a00      	ldr	r2, [sp, #0]
 8002c34:	432b      	orrs	r3, r5
 8002c36:	4051      	eors	r1, r2
 8002c38:	b2ca      	uxtb	r2, r1
 8002c3a:	9203      	str	r2, [sp, #12]
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	dd00      	ble.n	8002c42 <__aeabi_dmul+0x48e>
 8002c40:	e634      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d157      	bne.n	8002cf6 <__aeabi_dmul+0x542>
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	4699      	mov	r9, r3
 8002c4a:	2400      	movs	r4, #0
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4b49      	ldr	r3, [pc, #292]	@ (8002d74 <__aeabi_dmul+0x5c0>)
 8002c50:	e60e      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002c52:	4658      	mov	r0, fp
 8002c54:	2101      	movs	r1, #1
 8002c56:	1ac9      	subs	r1, r1, r3
 8002c58:	2938      	cmp	r1, #56	@ 0x38
 8002c5a:	dd00      	ble.n	8002c5e <__aeabi_dmul+0x4aa>
 8002c5c:	e62f      	b.n	80028be <__aeabi_dmul+0x10a>
 8002c5e:	291f      	cmp	r1, #31
 8002c60:	dd56      	ble.n	8002d10 <__aeabi_dmul+0x55c>
 8002c62:	221f      	movs	r2, #31
 8002c64:	4654      	mov	r4, sl
 8002c66:	4252      	negs	r2, r2
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	40dc      	lsrs	r4, r3
 8002c6c:	2920      	cmp	r1, #32
 8002c6e:	d007      	beq.n	8002c80 <__aeabi_dmul+0x4cc>
 8002c70:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <__aeabi_dmul+0x5c4>)
 8002c72:	4642      	mov	r2, r8
 8002c74:	469c      	mov	ip, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	4460      	add	r0, ip
 8002c7a:	4083      	lsls	r3, r0
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	4690      	mov	r8, r2
 8002c80:	4642      	mov	r2, r8
 8002c82:	2107      	movs	r1, #7
 8002c84:	1e53      	subs	r3, r2, #1
 8002c86:	419a      	sbcs	r2, r3
 8002c88:	000b      	movs	r3, r1
 8002c8a:	4322      	orrs	r2, r4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2400      	movs	r4, #0
 8002c90:	4211      	tst	r1, r2
 8002c92:	d009      	beq.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002c94:	230f      	movs	r3, #15
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d05d      	beq.n	8002d58 <__aeabi_dmul+0x5a4>
 8002c9c:	1d11      	adds	r1, r2, #4
 8002c9e:	4291      	cmp	r1, r2
 8002ca0:	419b      	sbcs	r3, r3
 8002ca2:	000a      	movs	r2, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	075b      	lsls	r3, r3, #29
 8002ca8:	08d2      	lsrs	r2, r2, #3
 8002caa:	431a      	orrs	r2, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	e5df      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	e5fa      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002cb6:	9801      	ldr	r0, [sp, #4]
 8002cb8:	f000 fd1c 	bl	80036f4 <__clzsi2>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	3215      	adds	r2, #21
 8002cc2:	3320      	adds	r3, #32
 8002cc4:	2a1c      	cmp	r2, #28
 8002cc6:	dc00      	bgt.n	8002cca <__aeabi_dmul+0x516>
 8002cc8:	e738      	b.n	8002b3c <__aeabi_dmul+0x388>
 8002cca:	9a01      	ldr	r2, [sp, #4]
 8002ccc:	3808      	subs	r0, #8
 8002cce:	4082      	lsls	r2, r0
 8002cd0:	e73f      	b.n	8002b52 <__aeabi_dmul+0x39e>
 8002cd2:	f000 fd0f 	bl	80036f4 <__clzsi2>
 8002cd6:	2315      	movs	r3, #21
 8002cd8:	469c      	mov	ip, r3
 8002cda:	4484      	add	ip, r0
 8002cdc:	0002      	movs	r2, r0
 8002cde:	4663      	mov	r3, ip
 8002ce0:	3220      	adds	r2, #32
 8002ce2:	2b1c      	cmp	r3, #28
 8002ce4:	dc00      	bgt.n	8002ce8 <__aeabi_dmul+0x534>
 8002ce6:	e758      	b.n	8002b9a <__aeabi_dmul+0x3e6>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4698      	mov	r8, r3
 8002cec:	0023      	movs	r3, r4
 8002cee:	3808      	subs	r0, #8
 8002cf0:	4083      	lsls	r3, r0
 8002cf2:	469a      	mov	sl, r3
 8002cf4:	e762      	b.n	8002bbc <__aeabi_dmul+0x408>
 8002cf6:	001d      	movs	r5, r3
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2400      	movs	r4, #0
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	e5a2      	b.n	8002848 <__aeabi_dmul+0x94>
 8002d02:	9002      	str	r0, [sp, #8]
 8002d04:	e632      	b.n	800296c <__aeabi_dmul+0x1b8>
 8002d06:	431c      	orrs	r4, r3
 8002d08:	9b00      	ldr	r3, [sp, #0]
 8002d0a:	9a01      	ldr	r2, [sp, #4]
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	e5ae      	b.n	800286e <__aeabi_dmul+0xba>
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <__aeabi_dmul+0x5c8>)
 8002d12:	4652      	mov	r2, sl
 8002d14:	18c3      	adds	r3, r0, r3
 8002d16:	4640      	mov	r0, r8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	40c8      	lsrs	r0, r1
 8002d1c:	4302      	orrs	r2, r0
 8002d1e:	4640      	mov	r0, r8
 8002d20:	4098      	lsls	r0, r3
 8002d22:	0003      	movs	r3, r0
 8002d24:	1e58      	subs	r0, r3, #1
 8002d26:	4183      	sbcs	r3, r0
 8002d28:	4654      	mov	r4, sl
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	40cc      	lsrs	r4, r1
 8002d2e:	0753      	lsls	r3, r2, #29
 8002d30:	d009      	beq.n	8002d46 <__aeabi_dmul+0x592>
 8002d32:	230f      	movs	r3, #15
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d005      	beq.n	8002d46 <__aeabi_dmul+0x592>
 8002d3a:	1d13      	adds	r3, r2, #4
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	4192      	sbcs	r2, r2
 8002d40:	4252      	negs	r2, r2
 8002d42:	18a4      	adds	r4, r4, r2
 8002d44:	001a      	movs	r2, r3
 8002d46:	0223      	lsls	r3, r4, #8
 8002d48:	d508      	bpl.n	8002d5c <__aeabi_dmul+0x5a8>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	e58e      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002d52:	4689      	mov	r9, r1
 8002d54:	2400      	movs	r4, #0
 8002d56:	e58b      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e7a5      	b.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002d5c:	0763      	lsls	r3, r4, #29
 8002d5e:	0264      	lsls	r4, r4, #9
 8002d60:	0b24      	lsrs	r4, r4, #12
 8002d62:	e7a1      	b.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002d64:	9b00      	ldr	r3, [sp, #0]
 8002d66:	46a2      	mov	sl, r4
 8002d68:	4699      	mov	r9, r3
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	4698      	mov	r8, r3
 8002d6e:	e737      	b.n	8002be0 <__aeabi_dmul+0x42c>
 8002d70:	fffffc0d 	.word	0xfffffc0d
 8002d74:	000007ff 	.word	0x000007ff
 8002d78:	0000043e 	.word	0x0000043e
 8002d7c:	0000041e 	.word	0x0000041e

08002d80 <__aeabi_dsub>:
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	4657      	mov	r7, sl
 8002d84:	464e      	mov	r6, r9
 8002d86:	4645      	mov	r5, r8
 8002d88:	46de      	mov	lr, fp
 8002d8a:	b5e0      	push	{r5, r6, r7, lr}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	9000      	str	r0, [sp, #0]
 8002d90:	9101      	str	r1, [sp, #4]
 8002d92:	030c      	lsls	r4, r1, #12
 8002d94:	004d      	lsls	r5, r1, #1
 8002d96:	0fce      	lsrs	r6, r1, #31
 8002d98:	0a61      	lsrs	r1, r4, #9
 8002d9a:	9c00      	ldr	r4, [sp, #0]
 8002d9c:	005f      	lsls	r7, r3, #1
 8002d9e:	0f64      	lsrs	r4, r4, #29
 8002da0:	430c      	orrs	r4, r1
 8002da2:	9900      	ldr	r1, [sp, #0]
 8002da4:	9200      	str	r2, [sp, #0]
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	00c8      	lsls	r0, r1, #3
 8002daa:	0319      	lsls	r1, r3, #12
 8002dac:	0d7b      	lsrs	r3, r7, #21
 8002dae:	4699      	mov	r9, r3
 8002db0:	9b01      	ldr	r3, [sp, #4]
 8002db2:	4fcc      	ldr	r7, [pc, #816]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002db4:	0fdb      	lsrs	r3, r3, #31
 8002db6:	469c      	mov	ip, r3
 8002db8:	0a4b      	lsrs	r3, r1, #9
 8002dba:	9900      	ldr	r1, [sp, #0]
 8002dbc:	4680      	mov	r8, r0
 8002dbe:	0f49      	lsrs	r1, r1, #29
 8002dc0:	4319      	orrs	r1, r3
 8002dc2:	9b00      	ldr	r3, [sp, #0]
 8002dc4:	468b      	mov	fp, r1
 8002dc6:	00da      	lsls	r2, r3, #3
 8002dc8:	4692      	mov	sl, r2
 8002dca:	0d6d      	lsrs	r5, r5, #21
 8002dcc:	45b9      	cmp	r9, r7
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x52>
 8002dd0:	e0bf      	b.n	8002f52 <__aeabi_dsub+0x1d2>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4661      	mov	r1, ip
 8002dd6:	4059      	eors	r1, r3
 8002dd8:	464b      	mov	r3, r9
 8002dda:	468c      	mov	ip, r1
 8002ddc:	1aeb      	subs	r3, r5, r3
 8002dde:	428e      	cmp	r6, r1
 8002de0:	d075      	beq.n	8002ece <__aeabi_dsub+0x14e>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dc00      	bgt.n	8002de8 <__aeabi_dsub+0x68>
 8002de6:	e2a3      	b.n	8003330 <__aeabi_dsub+0x5b0>
 8002de8:	4649      	mov	r1, r9
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d100      	bne.n	8002df0 <__aeabi_dsub+0x70>
 8002dee:	e0ce      	b.n	8002f8e <__aeabi_dsub+0x20e>
 8002df0:	42bd      	cmp	r5, r7
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x76>
 8002df4:	e200      	b.n	80031f8 <__aeabi_dsub+0x478>
 8002df6:	2701      	movs	r7, #1
 8002df8:	2b38      	cmp	r3, #56	@ 0x38
 8002dfa:	dc19      	bgt.n	8002e30 <__aeabi_dsub+0xb0>
 8002dfc:	2780      	movs	r7, #128	@ 0x80
 8002dfe:	4659      	mov	r1, fp
 8002e00:	043f      	lsls	r7, r7, #16
 8002e02:	4339      	orrs	r1, r7
 8002e04:	468b      	mov	fp, r1
 8002e06:	2b1f      	cmp	r3, #31
 8002e08:	dd00      	ble.n	8002e0c <__aeabi_dsub+0x8c>
 8002e0a:	e1fa      	b.n	8003202 <__aeabi_dsub+0x482>
 8002e0c:	2720      	movs	r7, #32
 8002e0e:	1af9      	subs	r1, r7, r3
 8002e10:	468c      	mov	ip, r1
 8002e12:	4659      	mov	r1, fp
 8002e14:	4667      	mov	r7, ip
 8002e16:	40b9      	lsls	r1, r7
 8002e18:	000f      	movs	r7, r1
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	40d9      	lsrs	r1, r3
 8002e1e:	430f      	orrs	r7, r1
 8002e20:	4661      	mov	r1, ip
 8002e22:	408a      	lsls	r2, r1
 8002e24:	1e51      	subs	r1, r2, #1
 8002e26:	418a      	sbcs	r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	40d9      	lsrs	r1, r3
 8002e2c:	4317      	orrs	r7, r2
 8002e2e:	1a64      	subs	r4, r4, r1
 8002e30:	1bc7      	subs	r7, r0, r7
 8002e32:	42b8      	cmp	r0, r7
 8002e34:	4180      	sbcs	r0, r0
 8002e36:	4240      	negs	r0, r0
 8002e38:	1a24      	subs	r4, r4, r0
 8002e3a:	0223      	lsls	r3, r4, #8
 8002e3c:	d400      	bmi.n	8002e40 <__aeabi_dsub+0xc0>
 8002e3e:	e140      	b.n	80030c2 <__aeabi_dsub+0x342>
 8002e40:	0264      	lsls	r4, r4, #9
 8002e42:	0a64      	lsrs	r4, r4, #9
 8002e44:	2c00      	cmp	r4, #0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0xca>
 8002e48:	e154      	b.n	80030f4 <__aeabi_dsub+0x374>
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f000 fc52 	bl	80036f4 <__clzsi2>
 8002e50:	0003      	movs	r3, r0
 8002e52:	3b08      	subs	r3, #8
 8002e54:	2120      	movs	r1, #32
 8002e56:	0038      	movs	r0, r7
 8002e58:	1aca      	subs	r2, r1, r3
 8002e5a:	40d0      	lsrs	r0, r2
 8002e5c:	409c      	lsls	r4, r3
 8002e5e:	0002      	movs	r2, r0
 8002e60:	409f      	lsls	r7, r3
 8002e62:	4322      	orrs	r2, r4
 8002e64:	429d      	cmp	r5, r3
 8002e66:	dd00      	ble.n	8002e6a <__aeabi_dsub+0xea>
 8002e68:	e1a6      	b.n	80031b8 <__aeabi_dsub+0x438>
 8002e6a:	1b58      	subs	r0, r3, r5
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	1a09      	subs	r1, r1, r0
 8002e70:	003c      	movs	r4, r7
 8002e72:	408f      	lsls	r7, r1
 8002e74:	40c4      	lsrs	r4, r0
 8002e76:	1e7b      	subs	r3, r7, #1
 8002e78:	419f      	sbcs	r7, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	408b      	lsls	r3, r1
 8002e7e:	4327      	orrs	r7, r4
 8002e80:	431f      	orrs	r7, r3
 8002e82:	40c2      	lsrs	r2, r0
 8002e84:	003b      	movs	r3, r7
 8002e86:	0014      	movs	r4, r2
 8002e88:	2500      	movs	r5, #0
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <__aeabi_dsub+0x110>
 8002e8e:	e1f7      	b.n	8003280 <__aeabi_dsub+0x500>
 8002e90:	077b      	lsls	r3, r7, #29
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x116>
 8002e94:	e377      	b.n	8003586 <__aeabi_dsub+0x806>
 8002e96:	230f      	movs	r3, #15
 8002e98:	0038      	movs	r0, r7
 8002e9a:	403b      	ands	r3, r7
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d004      	beq.n	8002eaa <__aeabi_dsub+0x12a>
 8002ea0:	1d38      	adds	r0, r7, #4
 8002ea2:	42b8      	cmp	r0, r7
 8002ea4:	41bf      	sbcs	r7, r7
 8002ea6:	427f      	negs	r7, r7
 8002ea8:	19e4      	adds	r4, r4, r7
 8002eaa:	0223      	lsls	r3, r4, #8
 8002eac:	d400      	bmi.n	8002eb0 <__aeabi_dsub+0x130>
 8002eae:	e368      	b.n	8003582 <__aeabi_dsub+0x802>
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002eb2:	3501      	adds	r5, #1
 8002eb4:	429d      	cmp	r5, r3
 8002eb6:	d100      	bne.n	8002eba <__aeabi_dsub+0x13a>
 8002eb8:	e0f4      	b.n	80030a4 <__aeabi_dsub+0x324>
 8002eba:	4b8b      	ldr	r3, [pc, #556]	@ (80030e8 <__aeabi_dsub+0x368>)
 8002ebc:	056d      	lsls	r5, r5, #21
 8002ebe:	401c      	ands	r4, r3
 8002ec0:	0d6d      	lsrs	r5, r5, #21
 8002ec2:	0767      	lsls	r7, r4, #29
 8002ec4:	08c0      	lsrs	r0, r0, #3
 8002ec6:	0264      	lsls	r4, r4, #9
 8002ec8:	4307      	orrs	r7, r0
 8002eca:	0b24      	lsrs	r4, r4, #12
 8002ecc:	e0ec      	b.n	80030a8 <__aeabi_dsub+0x328>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc00      	bgt.n	8002ed4 <__aeabi_dsub+0x154>
 8002ed2:	e329      	b.n	8003528 <__aeabi_dsub+0x7a8>
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d000      	beq.n	8002edc <__aeabi_dsub+0x15c>
 8002eda:	e0d6      	b.n	800308a <__aeabi_dsub+0x30a>
 8002edc:	4659      	mov	r1, fp
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	d100      	bne.n	8002ee4 <__aeabi_dsub+0x164>
 8002ee2:	e12e      	b.n	8003142 <__aeabi_dsub+0x3c2>
 8002ee4:	1e59      	subs	r1, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x16c>
 8002eea:	e1e6      	b.n	80032ba <__aeabi_dsub+0x53a>
 8002eec:	42bb      	cmp	r3, r7
 8002eee:	d100      	bne.n	8002ef2 <__aeabi_dsub+0x172>
 8002ef0:	e182      	b.n	80031f8 <__aeabi_dsub+0x478>
 8002ef2:	2701      	movs	r7, #1
 8002ef4:	000b      	movs	r3, r1
 8002ef6:	2938      	cmp	r1, #56	@ 0x38
 8002ef8:	dc14      	bgt.n	8002f24 <__aeabi_dsub+0x1a4>
 8002efa:	2b1f      	cmp	r3, #31
 8002efc:	dd00      	ble.n	8002f00 <__aeabi_dsub+0x180>
 8002efe:	e23c      	b.n	800337a <__aeabi_dsub+0x5fa>
 8002f00:	2720      	movs	r7, #32
 8002f02:	1af9      	subs	r1, r7, r3
 8002f04:	468c      	mov	ip, r1
 8002f06:	4659      	mov	r1, fp
 8002f08:	4667      	mov	r7, ip
 8002f0a:	40b9      	lsls	r1, r7
 8002f0c:	000f      	movs	r7, r1
 8002f0e:	0011      	movs	r1, r2
 8002f10:	40d9      	lsrs	r1, r3
 8002f12:	430f      	orrs	r7, r1
 8002f14:	4661      	mov	r1, ip
 8002f16:	408a      	lsls	r2, r1
 8002f18:	1e51      	subs	r1, r2, #1
 8002f1a:	418a      	sbcs	r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	40d9      	lsrs	r1, r3
 8002f20:	4317      	orrs	r7, r2
 8002f22:	1864      	adds	r4, r4, r1
 8002f24:	183f      	adds	r7, r7, r0
 8002f26:	4287      	cmp	r7, r0
 8002f28:	4180      	sbcs	r0, r0
 8002f2a:	4240      	negs	r0, r0
 8002f2c:	1824      	adds	r4, r4, r0
 8002f2e:	0223      	lsls	r3, r4, #8
 8002f30:	d400      	bmi.n	8002f34 <__aeabi_dsub+0x1b4>
 8002f32:	e0c6      	b.n	80030c2 <__aeabi_dsub+0x342>
 8002f34:	4b6b      	ldr	r3, [pc, #428]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002f36:	3501      	adds	r5, #1
 8002f38:	429d      	cmp	r5, r3
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x1be>
 8002f3c:	e0b2      	b.n	80030a4 <__aeabi_dsub+0x324>
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4b69      	ldr	r3, [pc, #420]	@ (80030e8 <__aeabi_dsub+0x368>)
 8002f42:	087a      	lsrs	r2, r7, #1
 8002f44:	401c      	ands	r4, r3
 8002f46:	4039      	ands	r1, r7
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	07e7      	lsls	r7, r4, #31
 8002f4c:	4317      	orrs	r7, r2
 8002f4e:	0864      	lsrs	r4, r4, #1
 8002f50:	e79e      	b.n	8002e90 <__aeabi_dsub+0x110>
 8002f52:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <__aeabi_dsub+0x36c>)
 8002f54:	4311      	orrs	r1, r2
 8002f56:	468a      	mov	sl, r1
 8002f58:	18eb      	adds	r3, r5, r3
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d028      	beq.n	8002fb0 <__aeabi_dsub+0x230>
 8002f5e:	4566      	cmp	r6, ip
 8002f60:	d02c      	beq.n	8002fbc <__aeabi_dsub+0x23c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d05b      	beq.n	800301e <__aeabi_dsub+0x29e>
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	d100      	bne.n	8002f6c <__aeabi_dsub+0x1ec>
 8002f6a:	e12c      	b.n	80031c6 <__aeabi_dsub+0x446>
 8002f6c:	465b      	mov	r3, fp
 8002f6e:	4666      	mov	r6, ip
 8002f70:	075f      	lsls	r7, r3, #29
 8002f72:	08d2      	lsrs	r2, r2, #3
 8002f74:	4317      	orrs	r7, r2
 8002f76:	08dd      	lsrs	r5, r3, #3
 8002f78:	003b      	movs	r3, r7
 8002f7a:	432b      	orrs	r3, r5
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x200>
 8002f7e:	e0e2      	b.n	8003146 <__aeabi_dsub+0x3c6>
 8002f80:	2480      	movs	r4, #128	@ 0x80
 8002f82:	0324      	lsls	r4, r4, #12
 8002f84:	432c      	orrs	r4, r5
 8002f86:	0324      	lsls	r4, r4, #12
 8002f88:	4d56      	ldr	r5, [pc, #344]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002f8a:	0b24      	lsrs	r4, r4, #12
 8002f8c:	e08c      	b.n	80030a8 <__aeabi_dsub+0x328>
 8002f8e:	4659      	mov	r1, fp
 8002f90:	4311      	orrs	r1, r2
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x216>
 8002f94:	e0d5      	b.n	8003142 <__aeabi_dsub+0x3c2>
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d100      	bne.n	8002f9e <__aeabi_dsub+0x21e>
 8002f9c:	e1b9      	b.n	8003312 <__aeabi_dsub+0x592>
 8002f9e:	42bb      	cmp	r3, r7
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x224>
 8002fa2:	e1b1      	b.n	8003308 <__aeabi_dsub+0x588>
 8002fa4:	2701      	movs	r7, #1
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	2938      	cmp	r1, #56	@ 0x38
 8002faa:	dd00      	ble.n	8002fae <__aeabi_dsub+0x22e>
 8002fac:	e740      	b.n	8002e30 <__aeabi_dsub+0xb0>
 8002fae:	e72a      	b.n	8002e06 <__aeabi_dsub+0x86>
 8002fb0:	4661      	mov	r1, ip
 8002fb2:	2701      	movs	r7, #1
 8002fb4:	4079      	eors	r1, r7
 8002fb6:	468c      	mov	ip, r1
 8002fb8:	4566      	cmp	r6, ip
 8002fba:	d1d2      	bne.n	8002f62 <__aeabi_dsub+0x1e2>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d100      	bne.n	8002fc2 <__aeabi_dsub+0x242>
 8002fc0:	e0c5      	b.n	800314e <__aeabi_dsub+0x3ce>
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	d000      	beq.n	8002fc8 <__aeabi_dsub+0x248>
 8002fc6:	e155      	b.n	8003274 <__aeabi_dsub+0x4f4>
 8002fc8:	464b      	mov	r3, r9
 8002fca:	0025      	movs	r5, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x252>
 8002fd0:	e212      	b.n	80033f8 <__aeabi_dsub+0x678>
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	468c      	mov	ip, r1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x25c>
 8002fda:	e249      	b.n	8003470 <__aeabi_dsub+0x6f0>
 8002fdc:	4d41      	ldr	r5, [pc, #260]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x264>
 8002fe2:	e28f      	b.n	8003504 <__aeabi_dsub+0x784>
 8002fe4:	2701      	movs	r7, #1
 8002fe6:	2938      	cmp	r1, #56	@ 0x38
 8002fe8:	dc11      	bgt.n	800300e <__aeabi_dsub+0x28e>
 8002fea:	4663      	mov	r3, ip
 8002fec:	2b1f      	cmp	r3, #31
 8002fee:	dd00      	ble.n	8002ff2 <__aeabi_dsub+0x272>
 8002ff0:	e25b      	b.n	80034aa <__aeabi_dsub+0x72a>
 8002ff2:	4661      	mov	r1, ip
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	0027      	movs	r7, r4
 8002ff8:	1a5b      	subs	r3, r3, r1
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	4098      	lsls	r0, r3
 8002ffe:	409f      	lsls	r7, r3
 8003000:	40cd      	lsrs	r5, r1
 8003002:	1e43      	subs	r3, r0, #1
 8003004:	4198      	sbcs	r0, r3
 8003006:	40cc      	lsrs	r4, r1
 8003008:	432f      	orrs	r7, r5
 800300a:	4307      	orrs	r7, r0
 800300c:	44a3      	add	fp, r4
 800300e:	18bf      	adds	r7, r7, r2
 8003010:	4297      	cmp	r7, r2
 8003012:	4192      	sbcs	r2, r2
 8003014:	4252      	negs	r2, r2
 8003016:	445a      	add	r2, fp
 8003018:	0014      	movs	r4, r2
 800301a:	464d      	mov	r5, r9
 800301c:	e787      	b.n	8002f2e <__aeabi_dsub+0x1ae>
 800301e:	4f34      	ldr	r7, [pc, #208]	@ (80030f0 <__aeabi_dsub+0x370>)
 8003020:	1c6b      	adds	r3, r5, #1
 8003022:	423b      	tst	r3, r7
 8003024:	d000      	beq.n	8003028 <__aeabi_dsub+0x2a8>
 8003026:	e0b6      	b.n	8003196 <__aeabi_dsub+0x416>
 8003028:	4659      	mov	r1, fp
 800302a:	0023      	movs	r3, r4
 800302c:	4311      	orrs	r1, r2
 800302e:	000f      	movs	r7, r1
 8003030:	4303      	orrs	r3, r0
 8003032:	2d00      	cmp	r5, #0
 8003034:	d000      	beq.n	8003038 <__aeabi_dsub+0x2b8>
 8003036:	e126      	b.n	8003286 <__aeabi_dsub+0x506>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <__aeabi_dsub+0x2be>
 800303c:	e1c0      	b.n	80033c0 <__aeabi_dsub+0x640>
 800303e:	2900      	cmp	r1, #0
 8003040:	d100      	bne.n	8003044 <__aeabi_dsub+0x2c4>
 8003042:	e0a1      	b.n	8003188 <__aeabi_dsub+0x408>
 8003044:	1a83      	subs	r3, r0, r2
 8003046:	4698      	mov	r8, r3
 8003048:	465b      	mov	r3, fp
 800304a:	4540      	cmp	r0, r8
 800304c:	41ad      	sbcs	r5, r5
 800304e:	1ae3      	subs	r3, r4, r3
 8003050:	426d      	negs	r5, r5
 8003052:	1b5b      	subs	r3, r3, r5
 8003054:	2580      	movs	r5, #128	@ 0x80
 8003056:	042d      	lsls	r5, r5, #16
 8003058:	422b      	tst	r3, r5
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x2de>
 800305c:	e14b      	b.n	80032f6 <__aeabi_dsub+0x576>
 800305e:	465b      	mov	r3, fp
 8003060:	1a10      	subs	r0, r2, r0
 8003062:	4282      	cmp	r2, r0
 8003064:	4192      	sbcs	r2, r2
 8003066:	1b1c      	subs	r4, r3, r4
 8003068:	0007      	movs	r7, r0
 800306a:	2601      	movs	r6, #1
 800306c:	4663      	mov	r3, ip
 800306e:	4252      	negs	r2, r2
 8003070:	1aa4      	subs	r4, r4, r2
 8003072:	4327      	orrs	r7, r4
 8003074:	401e      	ands	r6, r3
 8003076:	2f00      	cmp	r7, #0
 8003078:	d100      	bne.n	800307c <__aeabi_dsub+0x2fc>
 800307a:	e142      	b.n	8003302 <__aeabi_dsub+0x582>
 800307c:	422c      	tst	r4, r5
 800307e:	d100      	bne.n	8003082 <__aeabi_dsub+0x302>
 8003080:	e26d      	b.n	800355e <__aeabi_dsub+0x7de>
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <__aeabi_dsub+0x368>)
 8003084:	2501      	movs	r5, #1
 8003086:	401c      	ands	r4, r3
 8003088:	e71b      	b.n	8002ec2 <__aeabi_dsub+0x142>
 800308a:	42bd      	cmp	r5, r7
 800308c:	d100      	bne.n	8003090 <__aeabi_dsub+0x310>
 800308e:	e13b      	b.n	8003308 <__aeabi_dsub+0x588>
 8003090:	2701      	movs	r7, #1
 8003092:	2b38      	cmp	r3, #56	@ 0x38
 8003094:	dd00      	ble.n	8003098 <__aeabi_dsub+0x318>
 8003096:	e745      	b.n	8002f24 <__aeabi_dsub+0x1a4>
 8003098:	2780      	movs	r7, #128	@ 0x80
 800309a:	4659      	mov	r1, fp
 800309c:	043f      	lsls	r7, r7, #16
 800309e:	4339      	orrs	r1, r7
 80030a0:	468b      	mov	fp, r1
 80030a2:	e72a      	b.n	8002efa <__aeabi_dsub+0x17a>
 80030a4:	2400      	movs	r4, #0
 80030a6:	2700      	movs	r7, #0
 80030a8:	052d      	lsls	r5, r5, #20
 80030aa:	4325      	orrs	r5, r4
 80030ac:	07f6      	lsls	r6, r6, #31
 80030ae:	4335      	orrs	r5, r6
 80030b0:	0038      	movs	r0, r7
 80030b2:	0029      	movs	r1, r5
 80030b4:	b003      	add	sp, #12
 80030b6:	bcf0      	pop	{r4, r5, r6, r7}
 80030b8:	46bb      	mov	fp, r7
 80030ba:	46b2      	mov	sl, r6
 80030bc:	46a9      	mov	r9, r5
 80030be:	46a0      	mov	r8, r4
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c2:	077b      	lsls	r3, r7, #29
 80030c4:	d004      	beq.n	80030d0 <__aeabi_dsub+0x350>
 80030c6:	230f      	movs	r3, #15
 80030c8:	403b      	ands	r3, r7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d000      	beq.n	80030d0 <__aeabi_dsub+0x350>
 80030ce:	e6e7      	b.n	8002ea0 <__aeabi_dsub+0x120>
 80030d0:	002b      	movs	r3, r5
 80030d2:	08f8      	lsrs	r0, r7, #3
 80030d4:	4a03      	ldr	r2, [pc, #12]	@ (80030e4 <__aeabi_dsub+0x364>)
 80030d6:	0767      	lsls	r7, r4, #29
 80030d8:	4307      	orrs	r7, r0
 80030da:	08e5      	lsrs	r5, r4, #3
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x362>
 80030e0:	e74a      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80030e2:	e0a5      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80030e4:	000007ff 	.word	0x000007ff
 80030e8:	ff7fffff 	.word	0xff7fffff
 80030ec:	fffff801 	.word	0xfffff801
 80030f0:	000007fe 	.word	0x000007fe
 80030f4:	0038      	movs	r0, r7
 80030f6:	f000 fafd 	bl	80036f4 <__clzsi2>
 80030fa:	0003      	movs	r3, r0
 80030fc:	3318      	adds	r3, #24
 80030fe:	2b1f      	cmp	r3, #31
 8003100:	dc00      	bgt.n	8003104 <__aeabi_dsub+0x384>
 8003102:	e6a7      	b.n	8002e54 <__aeabi_dsub+0xd4>
 8003104:	003a      	movs	r2, r7
 8003106:	3808      	subs	r0, #8
 8003108:	4082      	lsls	r2, r0
 800310a:	429d      	cmp	r5, r3
 800310c:	dd00      	ble.n	8003110 <__aeabi_dsub+0x390>
 800310e:	e08a      	b.n	8003226 <__aeabi_dsub+0x4a6>
 8003110:	1b5b      	subs	r3, r3, r5
 8003112:	1c58      	adds	r0, r3, #1
 8003114:	281f      	cmp	r0, #31
 8003116:	dc00      	bgt.n	800311a <__aeabi_dsub+0x39a>
 8003118:	e1d8      	b.n	80034cc <__aeabi_dsub+0x74c>
 800311a:	0017      	movs	r7, r2
 800311c:	3b1f      	subs	r3, #31
 800311e:	40df      	lsrs	r7, r3
 8003120:	2820      	cmp	r0, #32
 8003122:	d005      	beq.n	8003130 <__aeabi_dsub+0x3b0>
 8003124:	2340      	movs	r3, #64	@ 0x40
 8003126:	1a1b      	subs	r3, r3, r0
 8003128:	409a      	lsls	r2, r3
 800312a:	1e53      	subs	r3, r2, #1
 800312c:	419a      	sbcs	r2, r3
 800312e:	4317      	orrs	r7, r2
 8003130:	2500      	movs	r5, #0
 8003132:	2f00      	cmp	r7, #0
 8003134:	d100      	bne.n	8003138 <__aeabi_dsub+0x3b8>
 8003136:	e0e5      	b.n	8003304 <__aeabi_dsub+0x584>
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	d000      	beq.n	800313e <__aeabi_dsub+0x3be>
 800313c:	e6ab      	b.n	8002e96 <__aeabi_dsub+0x116>
 800313e:	002c      	movs	r4, r5
 8003140:	e7c6      	b.n	80030d0 <__aeabi_dsub+0x350>
 8003142:	08c0      	lsrs	r0, r0, #3
 8003144:	e7c6      	b.n	80030d4 <__aeabi_dsub+0x354>
 8003146:	2700      	movs	r7, #0
 8003148:	2400      	movs	r4, #0
 800314a:	4dd1      	ldr	r5, [pc, #836]	@ (8003490 <__aeabi_dsub+0x710>)
 800314c:	e7ac      	b.n	80030a8 <__aeabi_dsub+0x328>
 800314e:	4fd1      	ldr	r7, [pc, #836]	@ (8003494 <__aeabi_dsub+0x714>)
 8003150:	1c6b      	adds	r3, r5, #1
 8003152:	423b      	tst	r3, r7
 8003154:	d171      	bne.n	800323a <__aeabi_dsub+0x4ba>
 8003156:	0023      	movs	r3, r4
 8003158:	4303      	orrs	r3, r0
 800315a:	2d00      	cmp	r5, #0
 800315c:	d000      	beq.n	8003160 <__aeabi_dsub+0x3e0>
 800315e:	e14e      	b.n	80033fe <__aeabi_dsub+0x67e>
 8003160:	4657      	mov	r7, sl
 8003162:	2b00      	cmp	r3, #0
 8003164:	d100      	bne.n	8003168 <__aeabi_dsub+0x3e8>
 8003166:	e1b5      	b.n	80034d4 <__aeabi_dsub+0x754>
 8003168:	2f00      	cmp	r7, #0
 800316a:	d00d      	beq.n	8003188 <__aeabi_dsub+0x408>
 800316c:	1883      	adds	r3, r0, r2
 800316e:	4283      	cmp	r3, r0
 8003170:	4180      	sbcs	r0, r0
 8003172:	445c      	add	r4, fp
 8003174:	4240      	negs	r0, r0
 8003176:	1824      	adds	r4, r4, r0
 8003178:	0222      	lsls	r2, r4, #8
 800317a:	d500      	bpl.n	800317e <__aeabi_dsub+0x3fe>
 800317c:	e1c8      	b.n	8003510 <__aeabi_dsub+0x790>
 800317e:	001f      	movs	r7, r3
 8003180:	4698      	mov	r8, r3
 8003182:	4327      	orrs	r7, r4
 8003184:	d100      	bne.n	8003188 <__aeabi_dsub+0x408>
 8003186:	e0bc      	b.n	8003302 <__aeabi_dsub+0x582>
 8003188:	4643      	mov	r3, r8
 800318a:	0767      	lsls	r7, r4, #29
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	431f      	orrs	r7, r3
 8003190:	08e5      	lsrs	r5, r4, #3
 8003192:	2300      	movs	r3, #0
 8003194:	e04c      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003196:	1a83      	subs	r3, r0, r2
 8003198:	4698      	mov	r8, r3
 800319a:	465b      	mov	r3, fp
 800319c:	4540      	cmp	r0, r8
 800319e:	41bf      	sbcs	r7, r7
 80031a0:	1ae3      	subs	r3, r4, r3
 80031a2:	427f      	negs	r7, r7
 80031a4:	1bdb      	subs	r3, r3, r7
 80031a6:	021f      	lsls	r7, r3, #8
 80031a8:	d47c      	bmi.n	80032a4 <__aeabi_dsub+0x524>
 80031aa:	4647      	mov	r7, r8
 80031ac:	431f      	orrs	r7, r3
 80031ae:	d100      	bne.n	80031b2 <__aeabi_dsub+0x432>
 80031b0:	e0a6      	b.n	8003300 <__aeabi_dsub+0x580>
 80031b2:	001c      	movs	r4, r3
 80031b4:	4647      	mov	r7, r8
 80031b6:	e645      	b.n	8002e44 <__aeabi_dsub+0xc4>
 80031b8:	4cb7      	ldr	r4, [pc, #732]	@ (8003498 <__aeabi_dsub+0x718>)
 80031ba:	1aed      	subs	r5, r5, r3
 80031bc:	4014      	ands	r4, r2
 80031be:	077b      	lsls	r3, r7, #29
 80031c0:	d000      	beq.n	80031c4 <__aeabi_dsub+0x444>
 80031c2:	e780      	b.n	80030c6 <__aeabi_dsub+0x346>
 80031c4:	e784      	b.n	80030d0 <__aeabi_dsub+0x350>
 80031c6:	464b      	mov	r3, r9
 80031c8:	0025      	movs	r5, r4
 80031ca:	4305      	orrs	r5, r0
 80031cc:	d066      	beq.n	800329c <__aeabi_dsub+0x51c>
 80031ce:	1e5f      	subs	r7, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d100      	bne.n	80031d6 <__aeabi_dsub+0x456>
 80031d4:	e0fc      	b.n	80033d0 <__aeabi_dsub+0x650>
 80031d6:	4dae      	ldr	r5, [pc, #696]	@ (8003490 <__aeabi_dsub+0x710>)
 80031d8:	42ab      	cmp	r3, r5
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x45e>
 80031dc:	e15e      	b.n	800349c <__aeabi_dsub+0x71c>
 80031de:	4666      	mov	r6, ip
 80031e0:	2f38      	cmp	r7, #56	@ 0x38
 80031e2:	dc00      	bgt.n	80031e6 <__aeabi_dsub+0x466>
 80031e4:	e0b4      	b.n	8003350 <__aeabi_dsub+0x5d0>
 80031e6:	2001      	movs	r0, #1
 80031e8:	1a17      	subs	r7, r2, r0
 80031ea:	42ba      	cmp	r2, r7
 80031ec:	4192      	sbcs	r2, r2
 80031ee:	465b      	mov	r3, fp
 80031f0:	4252      	negs	r2, r2
 80031f2:	464d      	mov	r5, r9
 80031f4:	1a9c      	subs	r4, r3, r2
 80031f6:	e620      	b.n	8002e3a <__aeabi_dsub+0xba>
 80031f8:	0767      	lsls	r7, r4, #29
 80031fa:	08c0      	lsrs	r0, r0, #3
 80031fc:	4307      	orrs	r7, r0
 80031fe:	08e5      	lsrs	r5, r4, #3
 8003200:	e6ba      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003202:	001f      	movs	r7, r3
 8003204:	4659      	mov	r1, fp
 8003206:	3f20      	subs	r7, #32
 8003208:	40f9      	lsrs	r1, r7
 800320a:	000f      	movs	r7, r1
 800320c:	2b20      	cmp	r3, #32
 800320e:	d005      	beq.n	800321c <__aeabi_dsub+0x49c>
 8003210:	2140      	movs	r1, #64	@ 0x40
 8003212:	1acb      	subs	r3, r1, r3
 8003214:	4659      	mov	r1, fp
 8003216:	4099      	lsls	r1, r3
 8003218:	430a      	orrs	r2, r1
 800321a:	4692      	mov	sl, r2
 800321c:	4653      	mov	r3, sl
 800321e:	1e5a      	subs	r2, r3, #1
 8003220:	4193      	sbcs	r3, r2
 8003222:	431f      	orrs	r7, r3
 8003224:	e604      	b.n	8002e30 <__aeabi_dsub+0xb0>
 8003226:	1aeb      	subs	r3, r5, r3
 8003228:	4d9b      	ldr	r5, [pc, #620]	@ (8003498 <__aeabi_dsub+0x718>)
 800322a:	4015      	ands	r5, r2
 800322c:	076f      	lsls	r7, r5, #29
 800322e:	08ed      	lsrs	r5, r5, #3
 8003230:	032c      	lsls	r4, r5, #12
 8003232:	055d      	lsls	r5, r3, #21
 8003234:	0b24      	lsrs	r4, r4, #12
 8003236:	0d6d      	lsrs	r5, r5, #21
 8003238:	e736      	b.n	80030a8 <__aeabi_dsub+0x328>
 800323a:	4d95      	ldr	r5, [pc, #596]	@ (8003490 <__aeabi_dsub+0x710>)
 800323c:	42ab      	cmp	r3, r5
 800323e:	d100      	bne.n	8003242 <__aeabi_dsub+0x4c2>
 8003240:	e0d6      	b.n	80033f0 <__aeabi_dsub+0x670>
 8003242:	1882      	adds	r2, r0, r2
 8003244:	0021      	movs	r1, r4
 8003246:	4282      	cmp	r2, r0
 8003248:	4180      	sbcs	r0, r0
 800324a:	4459      	add	r1, fp
 800324c:	4240      	negs	r0, r0
 800324e:	1808      	adds	r0, r1, r0
 8003250:	07c7      	lsls	r7, r0, #31
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	4317      	orrs	r7, r2
 8003256:	0844      	lsrs	r4, r0, #1
 8003258:	0752      	lsls	r2, r2, #29
 800325a:	d400      	bmi.n	800325e <__aeabi_dsub+0x4de>
 800325c:	e185      	b.n	800356a <__aeabi_dsub+0x7ea>
 800325e:	220f      	movs	r2, #15
 8003260:	001d      	movs	r5, r3
 8003262:	403a      	ands	r2, r7
 8003264:	2a04      	cmp	r2, #4
 8003266:	d000      	beq.n	800326a <__aeabi_dsub+0x4ea>
 8003268:	e61a      	b.n	8002ea0 <__aeabi_dsub+0x120>
 800326a:	08ff      	lsrs	r7, r7, #3
 800326c:	0764      	lsls	r4, r4, #29
 800326e:	4327      	orrs	r7, r4
 8003270:	0905      	lsrs	r5, r0, #4
 8003272:	e7dd      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003274:	465b      	mov	r3, fp
 8003276:	08d2      	lsrs	r2, r2, #3
 8003278:	075f      	lsls	r7, r3, #29
 800327a:	4317      	orrs	r7, r2
 800327c:	08dd      	lsrs	r5, r3, #3
 800327e:	e67b      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003280:	2700      	movs	r7, #0
 8003282:	2400      	movs	r4, #0
 8003284:	e710      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <__aeabi_dsub+0x50c>
 800328a:	e0d6      	b.n	800343a <__aeabi_dsub+0x6ba>
 800328c:	2900      	cmp	r1, #0
 800328e:	d000      	beq.n	8003292 <__aeabi_dsub+0x512>
 8003290:	e12f      	b.n	80034f2 <__aeabi_dsub+0x772>
 8003292:	2480      	movs	r4, #128	@ 0x80
 8003294:	2600      	movs	r6, #0
 8003296:	4d7e      	ldr	r5, [pc, #504]	@ (8003490 <__aeabi_dsub+0x710>)
 8003298:	0324      	lsls	r4, r4, #12
 800329a:	e705      	b.n	80030a8 <__aeabi_dsub+0x328>
 800329c:	4666      	mov	r6, ip
 800329e:	465c      	mov	r4, fp
 80032a0:	08d0      	lsrs	r0, r2, #3
 80032a2:	e717      	b.n	80030d4 <__aeabi_dsub+0x354>
 80032a4:	465b      	mov	r3, fp
 80032a6:	1a17      	subs	r7, r2, r0
 80032a8:	42ba      	cmp	r2, r7
 80032aa:	4192      	sbcs	r2, r2
 80032ac:	1b1c      	subs	r4, r3, r4
 80032ae:	2601      	movs	r6, #1
 80032b0:	4663      	mov	r3, ip
 80032b2:	4252      	negs	r2, r2
 80032b4:	1aa4      	subs	r4, r4, r2
 80032b6:	401e      	ands	r6, r3
 80032b8:	e5c4      	b.n	8002e44 <__aeabi_dsub+0xc4>
 80032ba:	1883      	adds	r3, r0, r2
 80032bc:	4283      	cmp	r3, r0
 80032be:	4180      	sbcs	r0, r0
 80032c0:	445c      	add	r4, fp
 80032c2:	4240      	negs	r0, r0
 80032c4:	1825      	adds	r5, r4, r0
 80032c6:	022a      	lsls	r2, r5, #8
 80032c8:	d400      	bmi.n	80032cc <__aeabi_dsub+0x54c>
 80032ca:	e0da      	b.n	8003482 <__aeabi_dsub+0x702>
 80032cc:	4a72      	ldr	r2, [pc, #456]	@ (8003498 <__aeabi_dsub+0x718>)
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	4015      	ands	r5, r2
 80032d2:	07ea      	lsls	r2, r5, #31
 80032d4:	431a      	orrs	r2, r3
 80032d6:	0869      	lsrs	r1, r5, #1
 80032d8:	075b      	lsls	r3, r3, #29
 80032da:	d400      	bmi.n	80032de <__aeabi_dsub+0x55e>
 80032dc:	e14a      	b.n	8003574 <__aeabi_dsub+0x7f4>
 80032de:	230f      	movs	r3, #15
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d100      	bne.n	80032e8 <__aeabi_dsub+0x568>
 80032e6:	e0fc      	b.n	80034e2 <__aeabi_dsub+0x762>
 80032e8:	1d17      	adds	r7, r2, #4
 80032ea:	4297      	cmp	r7, r2
 80032ec:	41a4      	sbcs	r4, r4
 80032ee:	4264      	negs	r4, r4
 80032f0:	2502      	movs	r5, #2
 80032f2:	1864      	adds	r4, r4, r1
 80032f4:	e6ec      	b.n	80030d0 <__aeabi_dsub+0x350>
 80032f6:	4647      	mov	r7, r8
 80032f8:	001c      	movs	r4, r3
 80032fa:	431f      	orrs	r7, r3
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x580>
 80032fe:	e743      	b.n	8003188 <__aeabi_dsub+0x408>
 8003300:	2600      	movs	r6, #0
 8003302:	2500      	movs	r5, #0
 8003304:	2400      	movs	r4, #0
 8003306:	e6cf      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003308:	08c0      	lsrs	r0, r0, #3
 800330a:	0767      	lsls	r7, r4, #29
 800330c:	4307      	orrs	r7, r0
 800330e:	08e5      	lsrs	r5, r4, #3
 8003310:	e632      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003312:	1a87      	subs	r7, r0, r2
 8003314:	465b      	mov	r3, fp
 8003316:	42b8      	cmp	r0, r7
 8003318:	4180      	sbcs	r0, r0
 800331a:	1ae4      	subs	r4, r4, r3
 800331c:	4240      	negs	r0, r0
 800331e:	1a24      	subs	r4, r4, r0
 8003320:	0223      	lsls	r3, r4, #8
 8003322:	d428      	bmi.n	8003376 <__aeabi_dsub+0x5f6>
 8003324:	0763      	lsls	r3, r4, #29
 8003326:	08ff      	lsrs	r7, r7, #3
 8003328:	431f      	orrs	r7, r3
 800332a:	08e5      	lsrs	r5, r4, #3
 800332c:	2301      	movs	r3, #1
 800332e:	e77f      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d100      	bne.n	8003336 <__aeabi_dsub+0x5b6>
 8003334:	e673      	b.n	800301e <__aeabi_dsub+0x29e>
 8003336:	464b      	mov	r3, r9
 8003338:	1b5f      	subs	r7, r3, r5
 800333a:	003b      	movs	r3, r7
 800333c:	2d00      	cmp	r5, #0
 800333e:	d100      	bne.n	8003342 <__aeabi_dsub+0x5c2>
 8003340:	e742      	b.n	80031c8 <__aeabi_dsub+0x448>
 8003342:	2f38      	cmp	r7, #56	@ 0x38
 8003344:	dd00      	ble.n	8003348 <__aeabi_dsub+0x5c8>
 8003346:	e0ec      	b.n	8003522 <__aeabi_dsub+0x7a2>
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	000e      	movs	r6, r1
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431c      	orrs	r4, r3
 8003350:	2f1f      	cmp	r7, #31
 8003352:	dc25      	bgt.n	80033a0 <__aeabi_dsub+0x620>
 8003354:	2520      	movs	r5, #32
 8003356:	0023      	movs	r3, r4
 8003358:	1bed      	subs	r5, r5, r7
 800335a:	0001      	movs	r1, r0
 800335c:	40a8      	lsls	r0, r5
 800335e:	40ab      	lsls	r3, r5
 8003360:	40f9      	lsrs	r1, r7
 8003362:	1e45      	subs	r5, r0, #1
 8003364:	41a8      	sbcs	r0, r5
 8003366:	430b      	orrs	r3, r1
 8003368:	40fc      	lsrs	r4, r7
 800336a:	4318      	orrs	r0, r3
 800336c:	465b      	mov	r3, fp
 800336e:	1b1b      	subs	r3, r3, r4
 8003370:	469b      	mov	fp, r3
 8003372:	e739      	b.n	80031e8 <__aeabi_dsub+0x468>
 8003374:	4666      	mov	r6, ip
 8003376:	2501      	movs	r5, #1
 8003378:	e562      	b.n	8002e40 <__aeabi_dsub+0xc0>
 800337a:	001f      	movs	r7, r3
 800337c:	4659      	mov	r1, fp
 800337e:	3f20      	subs	r7, #32
 8003380:	40f9      	lsrs	r1, r7
 8003382:	468c      	mov	ip, r1
 8003384:	2b20      	cmp	r3, #32
 8003386:	d005      	beq.n	8003394 <__aeabi_dsub+0x614>
 8003388:	2740      	movs	r7, #64	@ 0x40
 800338a:	4659      	mov	r1, fp
 800338c:	1afb      	subs	r3, r7, r3
 800338e:	4099      	lsls	r1, r3
 8003390:	430a      	orrs	r2, r1
 8003392:	4692      	mov	sl, r2
 8003394:	4657      	mov	r7, sl
 8003396:	1e7b      	subs	r3, r7, #1
 8003398:	419f      	sbcs	r7, r3
 800339a:	4663      	mov	r3, ip
 800339c:	431f      	orrs	r7, r3
 800339e:	e5c1      	b.n	8002f24 <__aeabi_dsub+0x1a4>
 80033a0:	003b      	movs	r3, r7
 80033a2:	0025      	movs	r5, r4
 80033a4:	3b20      	subs	r3, #32
 80033a6:	40dd      	lsrs	r5, r3
 80033a8:	2f20      	cmp	r7, #32
 80033aa:	d004      	beq.n	80033b6 <__aeabi_dsub+0x636>
 80033ac:	2340      	movs	r3, #64	@ 0x40
 80033ae:	1bdb      	subs	r3, r3, r7
 80033b0:	409c      	lsls	r4, r3
 80033b2:	4320      	orrs	r0, r4
 80033b4:	4680      	mov	r8, r0
 80033b6:	4640      	mov	r0, r8
 80033b8:	1e43      	subs	r3, r0, #1
 80033ba:	4198      	sbcs	r0, r3
 80033bc:	4328      	orrs	r0, r5
 80033be:	e713      	b.n	80031e8 <__aeabi_dsub+0x468>
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d09d      	beq.n	8003300 <__aeabi_dsub+0x580>
 80033c4:	2601      	movs	r6, #1
 80033c6:	4663      	mov	r3, ip
 80033c8:	465c      	mov	r4, fp
 80033ca:	4690      	mov	r8, r2
 80033cc:	401e      	ands	r6, r3
 80033ce:	e6db      	b.n	8003188 <__aeabi_dsub+0x408>
 80033d0:	1a17      	subs	r7, r2, r0
 80033d2:	465b      	mov	r3, fp
 80033d4:	42ba      	cmp	r2, r7
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	1b1c      	subs	r4, r3, r4
 80033da:	4252      	negs	r2, r2
 80033dc:	1aa4      	subs	r4, r4, r2
 80033de:	0223      	lsls	r3, r4, #8
 80033e0:	d4c8      	bmi.n	8003374 <__aeabi_dsub+0x5f4>
 80033e2:	0763      	lsls	r3, r4, #29
 80033e4:	08ff      	lsrs	r7, r7, #3
 80033e6:	431f      	orrs	r7, r3
 80033e8:	4666      	mov	r6, ip
 80033ea:	2301      	movs	r3, #1
 80033ec:	08e5      	lsrs	r5, r4, #3
 80033ee:	e71f      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80033f0:	001d      	movs	r5, r3
 80033f2:	2400      	movs	r4, #0
 80033f4:	2700      	movs	r7, #0
 80033f6:	e657      	b.n	80030a8 <__aeabi_dsub+0x328>
 80033f8:	465c      	mov	r4, fp
 80033fa:	08d0      	lsrs	r0, r2, #3
 80033fc:	e66a      	b.n	80030d4 <__aeabi_dsub+0x354>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d100      	bne.n	8003404 <__aeabi_dsub+0x684>
 8003402:	e737      	b.n	8003274 <__aeabi_dsub+0x4f4>
 8003404:	4653      	mov	r3, sl
 8003406:	08c0      	lsrs	r0, r0, #3
 8003408:	0767      	lsls	r7, r4, #29
 800340a:	4307      	orrs	r7, r0
 800340c:	08e5      	lsrs	r5, r4, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d100      	bne.n	8003414 <__aeabi_dsub+0x694>
 8003412:	e5b1      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	031b      	lsls	r3, r3, #12
 8003418:	421d      	tst	r5, r3
 800341a:	d008      	beq.n	800342e <__aeabi_dsub+0x6ae>
 800341c:	4659      	mov	r1, fp
 800341e:	08c8      	lsrs	r0, r1, #3
 8003420:	4218      	tst	r0, r3
 8003422:	d104      	bne.n	800342e <__aeabi_dsub+0x6ae>
 8003424:	08d2      	lsrs	r2, r2, #3
 8003426:	0749      	lsls	r1, r1, #29
 8003428:	430a      	orrs	r2, r1
 800342a:	0017      	movs	r7, r2
 800342c:	0005      	movs	r5, r0
 800342e:	0f7b      	lsrs	r3, r7, #29
 8003430:	00ff      	lsls	r7, r7, #3
 8003432:	08ff      	lsrs	r7, r7, #3
 8003434:	075b      	lsls	r3, r3, #29
 8003436:	431f      	orrs	r7, r3
 8003438:	e59e      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 800343a:	08c0      	lsrs	r0, r0, #3
 800343c:	0763      	lsls	r3, r4, #29
 800343e:	4318      	orrs	r0, r3
 8003440:	08e5      	lsrs	r5, r4, #3
 8003442:	2900      	cmp	r1, #0
 8003444:	d053      	beq.n	80034ee <__aeabi_dsub+0x76e>
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	421d      	tst	r5, r3
 800344c:	d00a      	beq.n	8003464 <__aeabi_dsub+0x6e4>
 800344e:	4659      	mov	r1, fp
 8003450:	08cc      	lsrs	r4, r1, #3
 8003452:	421c      	tst	r4, r3
 8003454:	d106      	bne.n	8003464 <__aeabi_dsub+0x6e4>
 8003456:	2601      	movs	r6, #1
 8003458:	4663      	mov	r3, ip
 800345a:	0025      	movs	r5, r4
 800345c:	08d0      	lsrs	r0, r2, #3
 800345e:	0749      	lsls	r1, r1, #29
 8003460:	4308      	orrs	r0, r1
 8003462:	401e      	ands	r6, r3
 8003464:	0f47      	lsrs	r7, r0, #29
 8003466:	00c0      	lsls	r0, r0, #3
 8003468:	08c0      	lsrs	r0, r0, #3
 800346a:	077f      	lsls	r7, r7, #29
 800346c:	4307      	orrs	r7, r0
 800346e:	e583      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003470:	1883      	adds	r3, r0, r2
 8003472:	4293      	cmp	r3, r2
 8003474:	4192      	sbcs	r2, r2
 8003476:	445c      	add	r4, fp
 8003478:	4252      	negs	r2, r2
 800347a:	18a5      	adds	r5, r4, r2
 800347c:	022a      	lsls	r2, r5, #8
 800347e:	d500      	bpl.n	8003482 <__aeabi_dsub+0x702>
 8003480:	e724      	b.n	80032cc <__aeabi_dsub+0x54c>
 8003482:	076f      	lsls	r7, r5, #29
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	431f      	orrs	r7, r3
 8003488:	08ed      	lsrs	r5, r5, #3
 800348a:	2301      	movs	r3, #1
 800348c:	e6d0      	b.n	8003230 <__aeabi_dsub+0x4b0>
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	000007ff 	.word	0x000007ff
 8003494:	000007fe 	.word	0x000007fe
 8003498:	ff7fffff 	.word	0xff7fffff
 800349c:	465b      	mov	r3, fp
 800349e:	08d2      	lsrs	r2, r2, #3
 80034a0:	075f      	lsls	r7, r3, #29
 80034a2:	4666      	mov	r6, ip
 80034a4:	4317      	orrs	r7, r2
 80034a6:	08dd      	lsrs	r5, r3, #3
 80034a8:	e566      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80034aa:	0025      	movs	r5, r4
 80034ac:	3b20      	subs	r3, #32
 80034ae:	40dd      	lsrs	r5, r3
 80034b0:	4663      	mov	r3, ip
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d005      	beq.n	80034c2 <__aeabi_dsub+0x742>
 80034b6:	2340      	movs	r3, #64	@ 0x40
 80034b8:	4661      	mov	r1, ip
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	409c      	lsls	r4, r3
 80034be:	4320      	orrs	r0, r4
 80034c0:	4680      	mov	r8, r0
 80034c2:	4647      	mov	r7, r8
 80034c4:	1e7b      	subs	r3, r7, #1
 80034c6:	419f      	sbcs	r7, r3
 80034c8:	432f      	orrs	r7, r5
 80034ca:	e5a0      	b.n	800300e <__aeabi_dsub+0x28e>
 80034cc:	2120      	movs	r1, #32
 80034ce:	2700      	movs	r7, #0
 80034d0:	1a09      	subs	r1, r1, r0
 80034d2:	e4d2      	b.n	8002e7a <__aeabi_dsub+0xfa>
 80034d4:	2f00      	cmp	r7, #0
 80034d6:	d100      	bne.n	80034da <__aeabi_dsub+0x75a>
 80034d8:	e713      	b.n	8003302 <__aeabi_dsub+0x582>
 80034da:	465c      	mov	r4, fp
 80034dc:	0017      	movs	r7, r2
 80034de:	2500      	movs	r5, #0
 80034e0:	e5f6      	b.n	80030d0 <__aeabi_dsub+0x350>
 80034e2:	08d7      	lsrs	r7, r2, #3
 80034e4:	0749      	lsls	r1, r1, #29
 80034e6:	2302      	movs	r3, #2
 80034e8:	430f      	orrs	r7, r1
 80034ea:	092d      	lsrs	r5, r5, #4
 80034ec:	e6a0      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80034ee:	0007      	movs	r7, r0
 80034f0:	e542      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80034f2:	465b      	mov	r3, fp
 80034f4:	2601      	movs	r6, #1
 80034f6:	075f      	lsls	r7, r3, #29
 80034f8:	08dd      	lsrs	r5, r3, #3
 80034fa:	4663      	mov	r3, ip
 80034fc:	08d2      	lsrs	r2, r2, #3
 80034fe:	4317      	orrs	r7, r2
 8003500:	401e      	ands	r6, r3
 8003502:	e539      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003504:	465b      	mov	r3, fp
 8003506:	08d2      	lsrs	r2, r2, #3
 8003508:	075f      	lsls	r7, r3, #29
 800350a:	4317      	orrs	r7, r2
 800350c:	08dd      	lsrs	r5, r3, #3
 800350e:	e533      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003510:	4a1e      	ldr	r2, [pc, #120]	@ (800358c <__aeabi_dsub+0x80c>)
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	4022      	ands	r2, r4
 8003516:	0757      	lsls	r7, r2, #29
 8003518:	0252      	lsls	r2, r2, #9
 800351a:	2501      	movs	r5, #1
 800351c:	431f      	orrs	r7, r3
 800351e:	0b14      	lsrs	r4, r2, #12
 8003520:	e5c2      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003522:	000e      	movs	r6, r1
 8003524:	2001      	movs	r0, #1
 8003526:	e65f      	b.n	80031e8 <__aeabi_dsub+0x468>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <__aeabi_dsub+0x7c8>
 800352c:	464b      	mov	r3, r9
 800352e:	1b5b      	subs	r3, r3, r5
 8003530:	469c      	mov	ip, r3
 8003532:	2d00      	cmp	r5, #0
 8003534:	d100      	bne.n	8003538 <__aeabi_dsub+0x7b8>
 8003536:	e548      	b.n	8002fca <__aeabi_dsub+0x24a>
 8003538:	2701      	movs	r7, #1
 800353a:	2b38      	cmp	r3, #56	@ 0x38
 800353c:	dd00      	ble.n	8003540 <__aeabi_dsub+0x7c0>
 800353e:	e566      	b.n	800300e <__aeabi_dsub+0x28e>
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431c      	orrs	r4, r3
 8003546:	e550      	b.n	8002fea <__aeabi_dsub+0x26a>
 8003548:	1c6b      	adds	r3, r5, #1
 800354a:	4d11      	ldr	r5, [pc, #68]	@ (8003590 <__aeabi_dsub+0x810>)
 800354c:	422b      	tst	r3, r5
 800354e:	d000      	beq.n	8003552 <__aeabi_dsub+0x7d2>
 8003550:	e673      	b.n	800323a <__aeabi_dsub+0x4ba>
 8003552:	4659      	mov	r1, fp
 8003554:	0023      	movs	r3, r4
 8003556:	4311      	orrs	r1, r2
 8003558:	468a      	mov	sl, r1
 800355a:	4303      	orrs	r3, r0
 800355c:	e600      	b.n	8003160 <__aeabi_dsub+0x3e0>
 800355e:	0767      	lsls	r7, r4, #29
 8003560:	08c0      	lsrs	r0, r0, #3
 8003562:	2300      	movs	r3, #0
 8003564:	4307      	orrs	r7, r0
 8003566:	08e5      	lsrs	r5, r4, #3
 8003568:	e662      	b.n	8003230 <__aeabi_dsub+0x4b0>
 800356a:	0764      	lsls	r4, r4, #29
 800356c:	08ff      	lsrs	r7, r7, #3
 800356e:	4327      	orrs	r7, r4
 8003570:	0905      	lsrs	r5, r0, #4
 8003572:	e65d      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003574:	08d2      	lsrs	r2, r2, #3
 8003576:	0749      	lsls	r1, r1, #29
 8003578:	4311      	orrs	r1, r2
 800357a:	000f      	movs	r7, r1
 800357c:	2302      	movs	r3, #2
 800357e:	092d      	lsrs	r5, r5, #4
 8003580:	e656      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003582:	0007      	movs	r7, r0
 8003584:	e5a4      	b.n	80030d0 <__aeabi_dsub+0x350>
 8003586:	0038      	movs	r0, r7
 8003588:	e48f      	b.n	8002eaa <__aeabi_dsub+0x12a>
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	ff7fffff 	.word	0xff7fffff
 8003590:	000007fe 	.word	0x000007fe

08003594 <__aeabi_dcmpun>:
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	46c6      	mov	lr, r8
 8003598:	031e      	lsls	r6, r3, #12
 800359a:	0b36      	lsrs	r6, r6, #12
 800359c:	46b0      	mov	r8, r6
 800359e:	4e0d      	ldr	r6, [pc, #52]	@ (80035d4 <__aeabi_dcmpun+0x40>)
 80035a0:	030c      	lsls	r4, r1, #12
 80035a2:	004d      	lsls	r5, r1, #1
 80035a4:	005f      	lsls	r7, r3, #1
 80035a6:	b500      	push	{lr}
 80035a8:	0b24      	lsrs	r4, r4, #12
 80035aa:	0d6d      	lsrs	r5, r5, #21
 80035ac:	0d7f      	lsrs	r7, r7, #21
 80035ae:	42b5      	cmp	r5, r6
 80035b0:	d00b      	beq.n	80035ca <__aeabi_dcmpun+0x36>
 80035b2:	4908      	ldr	r1, [pc, #32]	@ (80035d4 <__aeabi_dcmpun+0x40>)
 80035b4:	2000      	movs	r0, #0
 80035b6:	428f      	cmp	r7, r1
 80035b8:	d104      	bne.n	80035c4 <__aeabi_dcmpun+0x30>
 80035ba:	4646      	mov	r6, r8
 80035bc:	4316      	orrs	r6, r2
 80035be:	0030      	movs	r0, r6
 80035c0:	1e43      	subs	r3, r0, #1
 80035c2:	4198      	sbcs	r0, r3
 80035c4:	bc80      	pop	{r7}
 80035c6:	46b8      	mov	r8, r7
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	4304      	orrs	r4, r0
 80035cc:	2001      	movs	r0, #1
 80035ce:	2c00      	cmp	r4, #0
 80035d0:	d1f8      	bne.n	80035c4 <__aeabi_dcmpun+0x30>
 80035d2:	e7ee      	b.n	80035b2 <__aeabi_dcmpun+0x1e>
 80035d4:	000007ff 	.word	0x000007ff

080035d8 <__aeabi_d2iz>:
 80035d8:	000b      	movs	r3, r1
 80035da:	0002      	movs	r2, r0
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4d16      	ldr	r5, [pc, #88]	@ (8003638 <__aeabi_d2iz+0x60>)
 80035e0:	030c      	lsls	r4, r1, #12
 80035e2:	b082      	sub	sp, #8
 80035e4:	0049      	lsls	r1, r1, #1
 80035e6:	2000      	movs	r0, #0
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	0b24      	lsrs	r4, r4, #12
 80035ee:	0d49      	lsrs	r1, r1, #21
 80035f0:	0fde      	lsrs	r6, r3, #31
 80035f2:	42a9      	cmp	r1, r5
 80035f4:	dd04      	ble.n	8003600 <__aeabi_d2iz+0x28>
 80035f6:	4811      	ldr	r0, [pc, #68]	@ (800363c <__aeabi_d2iz+0x64>)
 80035f8:	4281      	cmp	r1, r0
 80035fa:	dd03      	ble.n	8003604 <__aeabi_d2iz+0x2c>
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <__aeabi_d2iz+0x68>)
 80035fe:	18f0      	adds	r0, r6, r3
 8003600:	b002      	add	sp, #8
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	2080      	movs	r0, #128	@ 0x80
 8003606:	0340      	lsls	r0, r0, #13
 8003608:	4320      	orrs	r0, r4
 800360a:	4c0e      	ldr	r4, [pc, #56]	@ (8003644 <__aeabi_d2iz+0x6c>)
 800360c:	1a64      	subs	r4, r4, r1
 800360e:	2c1f      	cmp	r4, #31
 8003610:	dd08      	ble.n	8003624 <__aeabi_d2iz+0x4c>
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <__aeabi_d2iz+0x70>)
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	40d8      	lsrs	r0, r3
 8003618:	0003      	movs	r3, r0
 800361a:	4258      	negs	r0, r3
 800361c:	2e00      	cmp	r6, #0
 800361e:	d1ef      	bne.n	8003600 <__aeabi_d2iz+0x28>
 8003620:	0018      	movs	r0, r3
 8003622:	e7ed      	b.n	8003600 <__aeabi_d2iz+0x28>
 8003624:	4b09      	ldr	r3, [pc, #36]	@ (800364c <__aeabi_d2iz+0x74>)
 8003626:	9a00      	ldr	r2, [sp, #0]
 8003628:	469c      	mov	ip, r3
 800362a:	0003      	movs	r3, r0
 800362c:	4461      	add	r1, ip
 800362e:	408b      	lsls	r3, r1
 8003630:	40e2      	lsrs	r2, r4
 8003632:	4313      	orrs	r3, r2
 8003634:	e7f1      	b.n	800361a <__aeabi_d2iz+0x42>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	000003fe 	.word	0x000003fe
 800363c:	0000041d 	.word	0x0000041d
 8003640:	7fffffff 	.word	0x7fffffff
 8003644:	00000433 	.word	0x00000433
 8003648:	00000413 	.word	0x00000413
 800364c:	fffffbed 	.word	0xfffffbed

08003650 <__aeabi_i2d>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	2800      	cmp	r0, #0
 8003654:	d016      	beq.n	8003684 <__aeabi_i2d+0x34>
 8003656:	17c3      	asrs	r3, r0, #31
 8003658:	18c5      	adds	r5, r0, r3
 800365a:	405d      	eors	r5, r3
 800365c:	0fc4      	lsrs	r4, r0, #31
 800365e:	0028      	movs	r0, r5
 8003660:	f000 f848 	bl	80036f4 <__clzsi2>
 8003664:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <__aeabi_i2d+0x58>)
 8003666:	1a1b      	subs	r3, r3, r0
 8003668:	055b      	lsls	r3, r3, #21
 800366a:	0d5b      	lsrs	r3, r3, #21
 800366c:	280a      	cmp	r0, #10
 800366e:	dc14      	bgt.n	800369a <__aeabi_i2d+0x4a>
 8003670:	0002      	movs	r2, r0
 8003672:	002e      	movs	r6, r5
 8003674:	3215      	adds	r2, #21
 8003676:	4096      	lsls	r6, r2
 8003678:	220b      	movs	r2, #11
 800367a:	1a12      	subs	r2, r2, r0
 800367c:	40d5      	lsrs	r5, r2
 800367e:	032d      	lsls	r5, r5, #12
 8003680:	0b2d      	lsrs	r5, r5, #12
 8003682:	e003      	b.n	800368c <__aeabi_i2d+0x3c>
 8003684:	2400      	movs	r4, #0
 8003686:	2300      	movs	r3, #0
 8003688:	2500      	movs	r5, #0
 800368a:	2600      	movs	r6, #0
 800368c:	051b      	lsls	r3, r3, #20
 800368e:	432b      	orrs	r3, r5
 8003690:	07e4      	lsls	r4, r4, #31
 8003692:	4323      	orrs	r3, r4
 8003694:	0030      	movs	r0, r6
 8003696:	0019      	movs	r1, r3
 8003698:	bd70      	pop	{r4, r5, r6, pc}
 800369a:	380b      	subs	r0, #11
 800369c:	4085      	lsls	r5, r0
 800369e:	032d      	lsls	r5, r5, #12
 80036a0:	2600      	movs	r6, #0
 80036a2:	0b2d      	lsrs	r5, r5, #12
 80036a4:	e7f2      	b.n	800368c <__aeabi_i2d+0x3c>
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	0000041e 	.word	0x0000041e

080036ac <__aeabi_ui2d>:
 80036ac:	b510      	push	{r4, lr}
 80036ae:	1e04      	subs	r4, r0, #0
 80036b0:	d010      	beq.n	80036d4 <__aeabi_ui2d+0x28>
 80036b2:	f000 f81f 	bl	80036f4 <__clzsi2>
 80036b6:	4b0e      	ldr	r3, [pc, #56]	@ (80036f0 <__aeabi_ui2d+0x44>)
 80036b8:	1a1b      	subs	r3, r3, r0
 80036ba:	055b      	lsls	r3, r3, #21
 80036bc:	0d5b      	lsrs	r3, r3, #21
 80036be:	280a      	cmp	r0, #10
 80036c0:	dc0f      	bgt.n	80036e2 <__aeabi_ui2d+0x36>
 80036c2:	220b      	movs	r2, #11
 80036c4:	0021      	movs	r1, r4
 80036c6:	1a12      	subs	r2, r2, r0
 80036c8:	40d1      	lsrs	r1, r2
 80036ca:	3015      	adds	r0, #21
 80036cc:	030a      	lsls	r2, r1, #12
 80036ce:	4084      	lsls	r4, r0
 80036d0:	0b12      	lsrs	r2, r2, #12
 80036d2:	e001      	b.n	80036d8 <__aeabi_ui2d+0x2c>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2200      	movs	r2, #0
 80036d8:	051b      	lsls	r3, r3, #20
 80036da:	4313      	orrs	r3, r2
 80036dc:	0020      	movs	r0, r4
 80036de:	0019      	movs	r1, r3
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	0022      	movs	r2, r4
 80036e4:	380b      	subs	r0, #11
 80036e6:	4082      	lsls	r2, r0
 80036e8:	0312      	lsls	r2, r2, #12
 80036ea:	2400      	movs	r4, #0
 80036ec:	0b12      	lsrs	r2, r2, #12
 80036ee:	e7f3      	b.n	80036d8 <__aeabi_ui2d+0x2c>
 80036f0:	0000041e 	.word	0x0000041e

080036f4 <__clzsi2>:
 80036f4:	211c      	movs	r1, #28
 80036f6:	2301      	movs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	4298      	cmp	r0, r3
 80036fc:	d301      	bcc.n	8003702 <__clzsi2+0xe>
 80036fe:	0c00      	lsrs	r0, r0, #16
 8003700:	3910      	subs	r1, #16
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	4298      	cmp	r0, r3
 8003706:	d301      	bcc.n	800370c <__clzsi2+0x18>
 8003708:	0a00      	lsrs	r0, r0, #8
 800370a:	3908      	subs	r1, #8
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	4298      	cmp	r0, r3
 8003710:	d301      	bcc.n	8003716 <__clzsi2+0x22>
 8003712:	0900      	lsrs	r0, r0, #4
 8003714:	3904      	subs	r1, #4
 8003716:	a202      	add	r2, pc, #8	@ (adr r2, 8003720 <__clzsi2+0x2c>)
 8003718:	5c10      	ldrb	r0, [r2, r0]
 800371a:	1840      	adds	r0, r0, r1
 800371c:	4770      	bx	lr
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	02020304 	.word	0x02020304
 8003724:	01010101 	.word	0x01010101
	...

08003730 <__clzdi2>:
 8003730:	b510      	push	{r4, lr}
 8003732:	2900      	cmp	r1, #0
 8003734:	d103      	bne.n	800373e <__clzdi2+0xe>
 8003736:	f7ff ffdd 	bl	80036f4 <__clzsi2>
 800373a:	3020      	adds	r0, #32
 800373c:	e002      	b.n	8003744 <__clzdi2+0x14>
 800373e:	0008      	movs	r0, r1
 8003740:	f7ff ffd8 	bl	80036f4 <__clzsi2>
 8003744:	bd10      	pop	{r4, pc}
 8003746:	46c0      	nop			@ (mov r8, r8)

08003748 <clampf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static inline float clampf(float x, float lo, float hi) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
	if (x < lo) return lo;
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7fc feb6 	bl	80004c8 <__aeabi_fcmplt>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d001      	beq.n	8003764 <clampf+0x1c>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	e008      	b.n	8003776 <clampf+0x2e>
	if (x > hi) return hi;
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7fc fec2 	bl	80004f0 <__aeabi_fcmpgt>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d001      	beq.n	8003774 <clampf+0x2c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	e000      	b.n	8003776 <clampf+0x2e>
	return x;
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	1c18      	adds	r0, r3, #0
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <Motors_Init>:
	if (target < current - max_delta)  return current - max_delta;
	return target;
}

void Motors_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
	// Start PWM channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);   // Right
 8003784:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <Motors_Init+0x64>)
 8003786:	210c      	movs	r1, #12
 8003788:	0018      	movs	r0, r3
 800378a:	f003 fd33 	bl	80071f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);   // Left
 800378e:	4b16      	ldr	r3, [pc, #88]	@ (80037e8 <Motors_Init+0x68>)
 8003790:	210c      	movs	r1, #12
 8003792:	0018      	movs	r0, r3
 8003794:	f003 fd2e 	bl	80071f4 <HAL_TIM_PWM_Start>

	// Start encoder interfaces
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003798:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <Motors_Init+0x6c>)
 800379a:	213c      	movs	r1, #60	@ 0x3c
 800379c:	0018      	movs	r0, r3
 800379e:	f003 fec1 	bl	8007524 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80037a2:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <Motors_Init+0x70>)
 80037a4:	213c      	movs	r1, #60	@ 0x3c
 80037a6:	0018      	movs	r0, r3
 80037a8:	f003 febc 	bl	8007524 <HAL_TIM_Encoder_Start>

	Set_Motor_Speed(1, 0.0f);   // Right motor
 80037ac:	2300      	movs	r3, #0
 80037ae:	1c19      	adds	r1, r3, #0
 80037b0:	2001      	movs	r0, #1
 80037b2:	f000 f8d3 	bl	800395c <Set_Motor_Speed>
	Set_Motor_Speed(2, 0.0f);   // Left  motor
 80037b6:	2300      	movs	r3, #0
 80037b8:	1c19      	adds	r1, r3, #0
 80037ba:	2002      	movs	r0, #2
 80037bc:	f000 f8ce 	bl	800395c <Set_Motor_Speed>

	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <Motors_Init+0x6c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80037c8:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <Motors_Init+0x70>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	625a      	str	r2, [r3, #36]	@ 0x24

	enc_prev_L = 0;
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <Motors_Init+0x74>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
	enc_prev_R = 0;
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <Motors_Init+0x78>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
}
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	20000244 	.word	0x20000244
 80037e8:	20000290 	.word	0x20000290
 80037ec:	200002dc 	.word	0x200002dc
 80037f0:	20000328 	.word	0x20000328
 80037f4:	20000418 	.word	0x20000418
 80037f8:	2000041c 	.word	0x2000041c

080037fc <IMU_Init>:


static void IMU_Init(void)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b091      	sub	sp, #68	@ 0x44
 8003800:	af04      	add	r7, sp, #16
	uint8_t data;

	// Check WHO_AM_I (should return 0x71 for MPU9250)
	if (HAL_I2C_Mem_Read(&hi2c2, MPU9250_ADDR, WHO_AM_I, 1, &data, 1, 100) == HAL_OK) {
 8003802:	4820      	ldr	r0, [pc, #128]	@ (8003884 <IMU_Init+0x88>)
 8003804:	2364      	movs	r3, #100	@ 0x64
 8003806:	9302      	str	r3, [sp, #8]
 8003808:	2301      	movs	r3, #1
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2427      	movs	r4, #39	@ 0x27
 800380e:	193b      	adds	r3, r7, r4
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2301      	movs	r3, #1
 8003814:	2275      	movs	r2, #117	@ 0x75
 8003816:	2168      	movs	r1, #104	@ 0x68
 8003818:	f001 ffda 	bl	80057d0 <HAL_I2C_Mem_Read>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d110      	bne.n	8003842 <IMU_Init+0x46>
		char msg[32];
		int len = snprintf(msg, sizeof(msg), "WHO_AM_I=0x%02X\r\n", data);
 8003820:	193b      	adds	r3, r7, r4
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <IMU_Init+0x8c>)
 8003826:	1d38      	adds	r0, r7, #4
 8003828:	2120      	movs	r1, #32
 800382a:	f007 fd39 	bl	800b2a0 <sniprintf>
 800382e:	0003      	movs	r3, r0
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100);
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	b29a      	uxth	r2, r3
 8003836:	1d39      	adds	r1, r7, #4
 8003838:	4814      	ldr	r0, [pc, #80]	@ (800388c <IMU_Init+0x90>)
 800383a:	2364      	movs	r3, #100	@ 0x64
 800383c:	f004 fe70 	bl	8008520 <HAL_UART_Transmit>
 8003840:	e00c      	b.n	800385c <IMU_Init+0x60>
	} else {
		const char *err = "IMU not found!\r\n";
 8003842:	4b13      	ldr	r3, [pc, #76]	@ (8003890 <IMU_Init+0x94>)
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), 100);
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	0018      	movs	r0, r3
 800384a:	f7fc fc5b 	bl	8000104 <strlen>
 800384e:	0003      	movs	r3, r0
 8003850:	b29a      	uxth	r2, r3
 8003852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003854:	480d      	ldr	r0, [pc, #52]	@ (800388c <IMU_Init+0x90>)
 8003856:	2364      	movs	r3, #100	@ 0x64
 8003858:	f004 fe62 	bl	8008520 <HAL_UART_Transmit>
	}

	// Wake up the device (clear sleep bit)
	data = 0x00;
 800385c:	2127      	movs	r1, #39	@ 0x27
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, MPU9250_ADDR, PWR_MGMT_1, 1, &data, 1, 100);
 8003864:	4807      	ldr	r0, [pc, #28]	@ (8003884 <IMU_Init+0x88>)
 8003866:	2364      	movs	r3, #100	@ 0x64
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	2301      	movs	r3, #1
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	187b      	adds	r3, r7, r1
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2301      	movs	r3, #1
 8003874:	226b      	movs	r2, #107	@ 0x6b
 8003876:	2168      	movs	r1, #104	@ 0x68
 8003878:	f001 fe7c 	bl	8005574 <HAL_I2C_Mem_Write>
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b00d      	add	sp, #52	@ 0x34
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	200001f0 	.word	0x200001f0
 8003888:	0800e3b0 	.word	0x0800e3b0
 800388c:	20000374 	.word	0x20000374
 8003890:	0800e3c4 	.word	0x0800e3c4

08003894 <encoder_delta_counts>:
}


// Returns counts since last call; handles 16-bit wrap. Bind this to your actual encoder timers.
int32_t encoder_delta_counts(TIM_HandleTypeDef *ht, int32_t *prev_accum)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	// Read 16-bit counter (most STM32 timers default to 16b in encoder mode)
	uint16_t now = __HAL_TIM_GET_COUNTER(ht);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038a4:	2316      	movs	r3, #22
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	801a      	strh	r2, [r3, #0]
	static uint16_t lastL = 0, lastR = 0;

	uint16_t *plast = (ht == &htim3) ? &lastL : &lastR;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <encoder_delta_counts+0x60>)
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d101      	bne.n	80038b6 <encoder_delta_counts+0x22>
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <encoder_delta_counts+0x64>)
 80038b4:	e000      	b.n	80038b8 <encoder_delta_counts+0x24>
 80038b6:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <encoder_delta_counts+0x68>)
 80038b8:	613b      	str	r3, [r7, #16]

	int16_t diff = (int16_t)(now - *plast);   // signed wrap-safe delta
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2016      	movs	r0, #22
 80038c0:	183a      	adds	r2, r7, r0
 80038c2:	8812      	ldrh	r2, [r2, #0]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	210e      	movs	r1, #14
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	801a      	strh	r2, [r3, #0]
	*plast = now;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	183a      	adds	r2, r7, r0
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	801a      	strh	r2, [r3, #0]

	// Accumulate into 32-bit (optional)
	*prev_accum += diff;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	2000      	movs	r0, #0
 80038de:	5e1b      	ldrsh	r3, [r3, r0]
 80038e0:	18d2      	adds	r2, r2, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	601a      	str	r2, [r3, #0]

	return diff;
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2200      	movs	r2, #0
 80038ea:	5e9b      	ldrsh	r3, [r3, r2]
}
 80038ec:	0018      	movs	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b006      	add	sp, #24
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200002dc 	.word	0x200002dc
 80038f8:	20000448 	.word	0x20000448
 80038fc:	2000044a 	.word	0x2000044a

08003900 <counts_to_wheel_mps>:

float counts_to_wheel_mps(int32_t delta_counts)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	// Motor revs during dt
	float motor_revs = (float)delta_counts / (float)ENCODER_COUNTS_PER_MOTOR_REV;
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd febd 	bl	8001688 <__aeabi_i2f>
 800390e:	1c03      	adds	r3, r0, #0
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <counts_to_wheel_mps+0x4c>)
 8003912:	1c18      	adds	r0, r3, #0
 8003914:	f7fd f8f6 	bl	8000b04 <__aeabi_fdiv>
 8003918:	1c03      	adds	r3, r0, #0
 800391a:	617b      	str	r3, [r7, #20]
	float wheel_revs = motor_revs / GEAR_RATIO;
 800391c:	490c      	ldr	r1, [pc, #48]	@ (8003950 <counts_to_wheel_mps+0x50>)
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7fd f8f0 	bl	8000b04 <__aeabi_fdiv>
 8003924:	1c03      	adds	r3, r0, #0
 8003926:	613b      	str	r3, [r7, #16]

	float wheel_rps  = wheel_revs / CTRL_DT;
 8003928:	490a      	ldr	r1, [pc, #40]	@ (8003954 <counts_to_wheel_mps+0x54>)
 800392a:	6938      	ldr	r0, [r7, #16]
 800392c:	f7fd f8ea 	bl	8000b04 <__aeabi_fdiv>
 8003930:	1c03      	adds	r3, r0, #0
 8003932:	60fb      	str	r3, [r7, #12]
	float circumference = (float)M_PI * WHEEL_DIAMETER;
 8003934:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <counts_to_wheel_mps+0x58>)
 8003936:	60bb      	str	r3, [r7, #8]

	return wheel_rps * circumference;  // m/s
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7fd fab0 	bl	8000ea0 <__aeabi_fmul>
 8003940:	1c03      	adds	r3, r0, #0
}
 8003942:	1c18      	adds	r0, r3, #0
 8003944:	46bd      	mov	sp, r7
 8003946:	b006      	add	sp, #24
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	43480000 	.word	0x43480000
 8003950:	40eaaa65 	.word	0x40eaaa65
 8003954:	3c23d70a 	.word	0x3c23d70a
 8003958:	3ea0d97c 	.word	0x3ea0d97c

0800395c <Set_Motor_Speed>:


void Set_Motor_Speed(uint8_t motor, float duty_percent)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b089      	sub	sp, #36	@ 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	0002      	movs	r2, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	701a      	strb	r2, [r3, #0]
	GPIO_TypeDef *dirPort;
	uint16_t dirPin;
	volatile uint32_t *pwmCcr;
	uint32_t arr;

	if (motor == 1) {
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10e      	bne.n	8003990 <Set_Motor_Speed+0x34>
		dirPort = MOTOR1_DIR_PORT;
 8003972:	23a0      	movs	r3, #160	@ 0xa0
 8003974:	05db      	lsls	r3, r3, #23
 8003976:	61fb      	str	r3, [r7, #28]
		dirPin  = MOTOR1_DIR_PIN;
 8003978:	231a      	movs	r3, #26
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2280      	movs	r2, #128	@ 0x80
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	801a      	strh	r2, [r3, #0]
		pwmCcr  = &TIM1->CCR4;
 8003982:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <Set_Motor_Speed+0xd8>)
 8003984:	617b      	str	r3, [r7, #20]
		arr     = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8003986:	4b2c      	ldr	r3, [pc, #176]	@ (8003a38 <Set_Motor_Speed+0xdc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e011      	b.n	80039b4 <Set_Motor_Speed+0x58>
	} else if (motor == 2) {
 8003990:	1dfb      	adds	r3, r7, #7
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d148      	bne.n	8003a2a <Set_Motor_Speed+0xce>
		dirPort = MOTOR2_DIR_PORT;
 8003998:	23a0      	movs	r3, #160	@ 0xa0
 800399a:	05db      	lsls	r3, r3, #23
 800399c:	61fb      	str	r3, [r7, #28]
		dirPin  = MOTOR2_DIR_PIN;
 800399e:	231a      	movs	r3, #26
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	2280      	movs	r2, #128	@ 0x80
 80039a4:	0052      	lsls	r2, r2, #1
 80039a6:	801a      	strh	r2, [r3, #0]
		pwmCcr  = &TIM2->CCR4;
 80039a8:	4b24      	ldr	r3, [pc, #144]	@ (8003a3c <Set_Motor_Speed+0xe0>)
 80039aa:	617b      	str	r3, [r7, #20]
		arr     = __HAL_TIM_GET_AUTORELOAD(&htim2);
 80039ac:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <Set_Motor_Speed+0xe4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	613b      	str	r3, [r7, #16]
	} else return;

	// direction
	if (duty_percent >= 0)
 80039b4:	2100      	movs	r1, #0
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	f7fc fda4 	bl	8000504 <__aeabi_fcmpge>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d008      	beq.n	80039d2 <Set_Motor_Speed+0x76>
		HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80039c0:	231a      	movs	r3, #26
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	8819      	ldrh	r1, [r3, #0]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2201      	movs	r2, #1
 80039ca:	0018      	movs	r0, r3
 80039cc:	f001 fcf4 	bl	80053b8 <HAL_GPIO_WritePin>
 80039d0:	e007      	b.n	80039e2 <Set_Motor_Speed+0x86>
	else
		HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80039d2:	231a      	movs	r3, #26
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	8819      	ldrh	r1, [r3, #0]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2200      	movs	r2, #0
 80039dc:	0018      	movs	r0, r3
 80039de:	f001 fceb 	bl	80053b8 <HAL_GPIO_WritePin>

	// duty in timer counts (0–ARR)
	float abs_percent = fabsf(duty_percent);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
	if (abs_percent > 100.0f) abs_percent = 100.0f;
 80039ea:	4916      	ldr	r1, [pc, #88]	@ (8003a44 <Set_Motor_Speed+0xe8>)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7fc fd7f 	bl	80004f0 <__aeabi_fcmpgt>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d001      	beq.n	80039fa <Set_Motor_Speed+0x9e>
 80039f6:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <Set_Motor_Speed+0xe8>)
 80039f8:	60fb      	str	r3, [r7, #12]

	*pwmCcr = 100-(uint32_t)((abs_percent / 100.0f) * arr);
 80039fa:	4912      	ldr	r1, [pc, #72]	@ (8003a44 <Set_Motor_Speed+0xe8>)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7fd f881 	bl	8000b04 <__aeabi_fdiv>
 8003a02:	1c03      	adds	r3, r0, #0
 8003a04:	1c1c      	adds	r4, r3, #0
 8003a06:	6938      	ldr	r0, [r7, #16]
 8003a08:	f7fd fe8e 	bl	8001728 <__aeabi_ui2f>
 8003a0c:	1c03      	adds	r3, r0, #0
 8003a0e:	1c19      	adds	r1, r3, #0
 8003a10:	1c20      	adds	r0, r4, #0
 8003a12:	f7fd fa45 	bl	8000ea0 <__aeabi_fmul>
 8003a16:	1c03      	adds	r3, r0, #0
 8003a18:	1c18      	adds	r0, r3, #0
 8003a1a:	f7fc fd9d 	bl	8000558 <__aeabi_f2uiz>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	2264      	movs	r2, #100	@ 0x64
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e000      	b.n	8003a2c <Set_Motor_Speed+0xd0>
	} else return;
 8003a2a:	46c0      	nop			@ (mov r8, r8)
}
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b009      	add	sp, #36	@ 0x24
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	40012c40 	.word	0x40012c40
 8003a38:	20000244 	.word	0x20000244
 8003a3c:	40000040 	.word	0x40000040
 8003a40:	20000290 	.word	0x20000290
 8003a44:	42c80000 	.word	0x42c80000

08003a48 <Velocity_To_PWM>:

float Velocity_To_PWM(float v)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	// 1. wheel circumference
	float circumference = (float)M_PI * WHEEL_DIAMETER;
 8003a50:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <Velocity_To_PWM+0x50>)
 8003a52:	617b      	str	r3, [r7, #20]

	// 2. wheel rpm needed
	float wheel_rpm = (v / circumference) * 60.0f;
 8003a54:	6979      	ldr	r1, [r7, #20]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd f854 	bl	8000b04 <__aeabi_fdiv>
 8003a5c:	1c03      	adds	r3, r0, #0
 8003a5e:	490f      	ldr	r1, [pc, #60]	@ (8003a9c <Velocity_To_PWM+0x54>)
 8003a60:	1c18      	adds	r0, r3, #0
 8003a62:	f7fd fa1d 	bl	8000ea0 <__aeabi_fmul>
 8003a66:	1c03      	adds	r3, r0, #0
 8003a68:	613b      	str	r3, [r7, #16]

	// 3. motor rpm required
	float motor_rpm = wheel_rpm * GEAR_RATIO;
 8003a6a:	490d      	ldr	r1, [pc, #52]	@ (8003aa0 <Velocity_To_PWM+0x58>)
 8003a6c:	6938      	ldr	r0, [r7, #16]
 8003a6e:	f7fd fa17 	bl	8000ea0 <__aeabi_fmul>
 8003a72:	1c03      	adds	r3, r0, #0
 8003a74:	60fb      	str	r3, [r7, #12]

	// 4. duty cycle (0–100 %)
	float duty = (motor_rpm / Max_RPM) * 100.0f;
 8003a76:	490b      	ldr	r1, [pc, #44]	@ (8003aa4 <Velocity_To_PWM+0x5c>)
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7fd f843 	bl	8000b04 <__aeabi_fdiv>
 8003a7e:	1c03      	adds	r3, r0, #0
 8003a80:	4909      	ldr	r1, [pc, #36]	@ (8003aa8 <Velocity_To_PWM+0x60>)
 8003a82:	1c18      	adds	r0, r3, #0
 8003a84:	f7fd fa0c 	bl	8000ea0 <__aeabi_fmul>
 8003a88:	1c03      	adds	r3, r0, #0
 8003a8a:	60bb      	str	r3, [r7, #8]


	return (duty);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
}
 8003a8e:	1c18      	adds	r0, r3, #0
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b006      	add	sp, #24
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	3ea0d97c 	.word	0x3ea0d97c
 8003a9c:	42700000 	.word	0x42700000
 8003aa0:	40eaaa65 	.word	0x40eaaa65
 8003aa4:	453b8000 	.word	0x453b8000
 8003aa8:	42c80000 	.word	0x42c80000

08003aac <Robot_Set_Velocity>:

// v  = forward speed (m/s)
// w  = angular speed (rad/s)
// Lw = distance between wheels (m)
void Robot_Set_Velocity(float v, float w)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	desired_speed_L = v - (w * Lw / 2.0f);
 8003ab6:	4915      	ldr	r1, [pc, #84]	@ (8003b0c <Robot_Set_Velocity+0x60>)
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7fd f9f1 	bl	8000ea0 <__aeabi_fmul>
 8003abe:	1c03      	adds	r3, r0, #0
 8003ac0:	2180      	movs	r1, #128	@ 0x80
 8003ac2:	05c9      	lsls	r1, r1, #23
 8003ac4:	1c18      	adds	r0, r3, #0
 8003ac6:	f7fd f81d 	bl	8000b04 <__aeabi_fdiv>
 8003aca:	1c03      	adds	r3, r0, #0
 8003acc:	1c19      	adds	r1, r3, #0
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fb40 	bl	8001154 <__aeabi_fsub>
 8003ad4:	1c03      	adds	r3, r0, #0
 8003ad6:	1c1a      	adds	r2, r3, #0
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <Robot_Set_Velocity+0x64>)
 8003ada:	601a      	str	r2, [r3, #0]
	desired_speed_R = v + (w * Lw / 2.0f);
 8003adc:	490b      	ldr	r1, [pc, #44]	@ (8003b0c <Robot_Set_Velocity+0x60>)
 8003ade:	6838      	ldr	r0, [r7, #0]
 8003ae0:	f7fd f9de 	bl	8000ea0 <__aeabi_fmul>
 8003ae4:	1c03      	adds	r3, r0, #0
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	05c9      	lsls	r1, r1, #23
 8003aea:	1c18      	adds	r0, r3, #0
 8003aec:	f7fd f80a 	bl	8000b04 <__aeabi_fdiv>
 8003af0:	1c03      	adds	r3, r0, #0
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	1c18      	adds	r0, r3, #0
 8003af6:	f7fc fe13 	bl	8000720 <__aeabi_fadd>
 8003afa:	1c03      	adds	r3, r0, #0
 8003afc:	1c1a      	adds	r2, r3, #0
 8003afe:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <Robot_Set_Velocity+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	3eb33333 	.word	0x3eb33333
 8003b10:	20000408 	.word	0x20000408
 8003b14:	2000040c 	.word	0x2000040c

08003b18 <Control_Update>:

void Control_Update(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	@ 0x28
 8003b1c:	af00      	add	r7, sp, #0
	// 1) Measure wheel speeds from encoders
	int32_t dL = encoder_delta_counts(&htim4, &enc_prev_L);
 8003b1e:	4a78      	ldr	r2, [pc, #480]	@ (8003d00 <Control_Update+0x1e8>)
 8003b20:	4b78      	ldr	r3, [pc, #480]	@ (8003d04 <Control_Update+0x1ec>)
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7ff feb5 	bl	8003894 <encoder_delta_counts>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t dR = -encoder_delta_counts(&htim3, &enc_prev_R);
 8003b2e:	4a76      	ldr	r2, [pc, #472]	@ (8003d08 <Control_Update+0x1f0>)
 8003b30:	4b76      	ldr	r3, [pc, #472]	@ (8003d0c <Control_Update+0x1f4>)
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff fead 	bl	8003894 <encoder_delta_counts>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	425b      	negs	r3, r3
 8003b3e:	623b      	str	r3, [r7, #32]

	float vL_meas = counts_to_wheel_mps(dL); // m/s
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff fedc 	bl	8003900 <counts_to_wheel_mps>
 8003b48:	1c03      	adds	r3, r0, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
	float vR_meas = counts_to_wheel_mps(dR); // m/s inverted because of the encoder direction
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff fed6 	bl	8003900 <counts_to_wheel_mps>
 8003b54:	1c03      	adds	r3, r0, #0
 8003b56:	61bb      	str	r3, [r7, #24]

	float v_robot = (vL_meas + vR_meas) / 2.0f; // m/s
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	69f8      	ldr	r0, [r7, #28]
 8003b5c:	f7fc fde0 	bl	8000720 <__aeabi_fadd>
 8003b60:	1c03      	adds	r3, r0, #0
 8003b62:	2180      	movs	r1, #128	@ 0x80
 8003b64:	05c9      	lsls	r1, r1, #23
 8003b66:	1c18      	adds	r0, r3, #0
 8003b68:	f7fc ffcc 	bl	8000b04 <__aeabi_fdiv>
 8003b6c:	1c03      	adds	r3, r0, #0
 8003b6e:	617b      	str	r3, [r7, #20]
	float w_robot = (vR_meas - vL_meas) / Lw; // rad/s
 8003b70:	69f9      	ldr	r1, [r7, #28]
 8003b72:	69b8      	ldr	r0, [r7, #24]
 8003b74:	f7fd faee 	bl	8001154 <__aeabi_fsub>
 8003b78:	1c03      	adds	r3, r0, #0
 8003b7a:	4965      	ldr	r1, [pc, #404]	@ (8003d10 <Control_Update+0x1f8>)
 8003b7c:	1c18      	adds	r0, r3, #0
 8003b7e:	f7fc ffc1 	bl	8000b04 <__aeabi_fdiv>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	613b      	str	r3, [r7, #16]

	// Integrate to update position and orientation
	robot_Theta += w_robot * CTRL_DT;
 8003b86:	4963      	ldr	r1, [pc, #396]	@ (8003d14 <Control_Update+0x1fc>)
 8003b88:	6938      	ldr	r0, [r7, #16]
 8003b8a:	f7fd f989 	bl	8000ea0 <__aeabi_fmul>
 8003b8e:	1c03      	adds	r3, r0, #0
 8003b90:	1c1a      	adds	r2, r3, #0
 8003b92:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <Control_Update+0x200>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	1c19      	adds	r1, r3, #0
 8003b98:	1c10      	adds	r0, r2, #0
 8003b9a:	f7fc fdc1 	bl	8000720 <__aeabi_fadd>
 8003b9e:	1c03      	adds	r3, r0, #0
 8003ba0:	1c1a      	adds	r2, r3, #0
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <Control_Update+0x200>)
 8003ba4:	601a      	str	r2, [r3, #0]
	robot_Theta = fmodf(robot_Theta, 2.0f * (float)M_PI); // keep theta in [0, 2pi)
 8003ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d18 <Control_Update+0x200>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5c      	ldr	r2, [pc, #368]	@ (8003d1c <Control_Update+0x204>)
 8003bac:	1c11      	adds	r1, r2, #0
 8003bae:	1c18      	adds	r0, r3, #0
 8003bb0:	f009 fd54 	bl	800d65c <fmodf>
 8003bb4:	1c02      	adds	r2, r0, #0
 8003bb6:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <Control_Update+0x200>)
 8003bb8:	601a      	str	r2, [r3, #0]

	robot_X += v_robot * cosf(robot_Theta) * CTRL_DT;
 8003bba:	4b57      	ldr	r3, [pc, #348]	@ (8003d18 <Control_Update+0x200>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c18      	adds	r0, r3, #0
 8003bc0:	f009 fd6a 	bl	800d698 <cosf>
 8003bc4:	1c03      	adds	r3, r0, #0
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	1c18      	adds	r0, r3, #0
 8003bca:	f7fd f969 	bl	8000ea0 <__aeabi_fmul>
 8003bce:	1c03      	adds	r3, r0, #0
 8003bd0:	4950      	ldr	r1, [pc, #320]	@ (8003d14 <Control_Update+0x1fc>)
 8003bd2:	1c18      	adds	r0, r3, #0
 8003bd4:	f7fd f964 	bl	8000ea0 <__aeabi_fmul>
 8003bd8:	1c03      	adds	r3, r0, #0
 8003bda:	1c1a      	adds	r2, r3, #0
 8003bdc:	4b50      	ldr	r3, [pc, #320]	@ (8003d20 <Control_Update+0x208>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c19      	adds	r1, r3, #0
 8003be2:	1c10      	adds	r0, r2, #0
 8003be4:	f7fc fd9c 	bl	8000720 <__aeabi_fadd>
 8003be8:	1c03      	adds	r3, r0, #0
 8003bea:	1c1a      	adds	r2, r3, #0
 8003bec:	4b4c      	ldr	r3, [pc, #304]	@ (8003d20 <Control_Update+0x208>)
 8003bee:	601a      	str	r2, [r3, #0]
	robot_Y += v_robot * sinf(robot_Theta) * CTRL_DT;
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <Control_Update+0x200>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c18      	adds	r0, r3, #0
 8003bf6:	f009 fd83 	bl	800d700 <sinf>
 8003bfa:	1c03      	adds	r3, r0, #0
 8003bfc:	6979      	ldr	r1, [r7, #20]
 8003bfe:	1c18      	adds	r0, r3, #0
 8003c00:	f7fd f94e 	bl	8000ea0 <__aeabi_fmul>
 8003c04:	1c03      	adds	r3, r0, #0
 8003c06:	4943      	ldr	r1, [pc, #268]	@ (8003d14 <Control_Update+0x1fc>)
 8003c08:	1c18      	adds	r0, r3, #0
 8003c0a:	f7fd f949 	bl	8000ea0 <__aeabi_fmul>
 8003c0e:	1c03      	adds	r3, r0, #0
 8003c10:	1c1a      	adds	r2, r3, #0
 8003c12:	4b44      	ldr	r3, [pc, #272]	@ (8003d24 <Control_Update+0x20c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c19      	adds	r1, r3, #0
 8003c18:	1c10      	adds	r0, r2, #0
 8003c1a:	f7fc fd81 	bl	8000720 <__aeabi_fadd>
 8003c1e:	1c03      	adds	r3, r0, #0
 8003c20:	1c1a      	adds	r2, r3, #0
 8003c22:	4b40      	ldr	r3, [pc, #256]	@ (8003d24 <Control_Update+0x20c>)
 8003c24:	601a      	str	r2, [r3, #0]

	v = v_robot;
 8003c26:	4b40      	ldr	r3, [pc, #256]	@ (8003d28 <Control_Update+0x210>)
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]
	w = w_robot;
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d2c <Control_Update+0x214>)
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	601a      	str	r2, [r3, #0]

	// Errors (m/s)
	float eL = desired_speed_L - vL_meas;
 8003c32:	4b3f      	ldr	r3, [pc, #252]	@ (8003d30 <Control_Update+0x218>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69f9      	ldr	r1, [r7, #28]
 8003c38:	1c18      	adds	r0, r3, #0
 8003c3a:	f7fd fa8b 	bl	8001154 <__aeabi_fsub>
 8003c3e:	1c03      	adds	r3, r0, #0
 8003c40:	60fb      	str	r3, [r7, #12]
	float eR = desired_speed_R - vR_meas;
 8003c42:	4b3c      	ldr	r3, [pc, #240]	@ (8003d34 <Control_Update+0x21c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	1c18      	adds	r0, r3, #0
 8003c4a:	f7fd fa83 	bl	8001154 <__aeabi_fsub>
 8003c4e:	1c03      	adds	r3, r0, #0
 8003c50:	60bb      	str	r3, [r7, #8]
    i_term_R += KI * eR * CTRL_DT;
    i_term_L = clampf(i_term_L, -100.0f, 100.0f);
    i_term_R = clampf(i_term_R, -100.0f, 100.0f);
	 */

	float uL = KP * eL + i_term_L;
 8003c52:	21ff      	movs	r1, #255	@ 0xff
 8003c54:	0589      	lsls	r1, r1, #22
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7fd f922 	bl	8000ea0 <__aeabi_fmul>
 8003c5c:	1c03      	adds	r3, r0, #0
 8003c5e:	1c1a      	adds	r2, r3, #0
 8003c60:	4b35      	ldr	r3, [pc, #212]	@ (8003d38 <Control_Update+0x220>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1c19      	adds	r1, r3, #0
 8003c66:	1c10      	adds	r0, r2, #0
 8003c68:	f7fc fd5a 	bl	8000720 <__aeabi_fadd>
 8003c6c:	1c03      	adds	r3, r0, #0
 8003c6e:	607b      	str	r3, [r7, #4]
	float uR = KP * eR + i_term_R;
 8003c70:	21ff      	movs	r1, #255	@ 0xff
 8003c72:	0589      	lsls	r1, r1, #22
 8003c74:	68b8      	ldr	r0, [r7, #8]
 8003c76:	f7fd f913 	bl	8000ea0 <__aeabi_fmul>
 8003c7a:	1c03      	adds	r3, r0, #0
 8003c7c:	1c1a      	adds	r2, r3, #0
 8003c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d3c <Control_Update+0x224>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	1c19      	adds	r1, r3, #0
 8003c84:	1c10      	adds	r0, r2, #0
 8003c86:	f7fc fd4b 	bl	8000720 <__aeabi_fadd>
 8003c8a:	1c03      	adds	r3, r0, #0
 8003c8c:	603b      	str	r3, [r7, #0]

	speed_L = clampf(Velocity_To_PWM(desired_speed_L + uL), -DUTY_MAX_PCT, DUTY_MAX_PCT);
 8003c8e:	4b28      	ldr	r3, [pc, #160]	@ (8003d30 <Control_Update+0x218>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	1c18      	adds	r0, r3, #0
 8003c96:	f7fc fd43 	bl	8000720 <__aeabi_fadd>
 8003c9a:	1c03      	adds	r3, r0, #0
 8003c9c:	1c18      	adds	r0, r3, #0
 8003c9e:	f7ff fed3 	bl	8003a48 <Velocity_To_PWM>
 8003ca2:	1c03      	adds	r3, r0, #0
 8003ca4:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <Control_Update+0x228>)
 8003ca6:	4927      	ldr	r1, [pc, #156]	@ (8003d44 <Control_Update+0x22c>)
 8003ca8:	1c18      	adds	r0, r3, #0
 8003caa:	f7ff fd4d 	bl	8003748 <clampf>
 8003cae:	1c02      	adds	r2, r0, #0
 8003cb0:	4b25      	ldr	r3, [pc, #148]	@ (8003d48 <Control_Update+0x230>)
 8003cb2:	601a      	str	r2, [r3, #0]
	speed_R = clampf(Velocity_To_PWM(desired_speed_R + uR), -DUTY_MAX_PCT, DUTY_MAX_PCT);
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d34 <Control_Update+0x21c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	1c18      	adds	r0, r3, #0
 8003cbc:	f7fc fd30 	bl	8000720 <__aeabi_fadd>
 8003cc0:	1c03      	adds	r3, r0, #0
 8003cc2:	1c18      	adds	r0, r3, #0
 8003cc4:	f7ff fec0 	bl	8003a48 <Velocity_To_PWM>
 8003cc8:	1c03      	adds	r3, r0, #0
 8003cca:	4a1d      	ldr	r2, [pc, #116]	@ (8003d40 <Control_Update+0x228>)
 8003ccc:	491d      	ldr	r1, [pc, #116]	@ (8003d44 <Control_Update+0x22c>)
 8003cce:	1c18      	adds	r0, r3, #0
 8003cd0:	f7ff fd3a 	bl	8003748 <clampf>
 8003cd4:	1c02      	adds	r2, r0, #0
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <Control_Update+0x234>)
 8003cd8:	601a      	str	r2, [r3, #0]

	Set_Motor_Speed(1,  speed_R);
 8003cda:	4b1c      	ldr	r3, [pc, #112]	@ (8003d4c <Control_Update+0x234>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	1c19      	adds	r1, r3, #0
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f7ff fe3b 	bl	800395c <Set_Motor_Speed>
	Set_Motor_Speed(2, -speed_L);
 8003ce6:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <Control_Update+0x230>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	0612      	lsls	r2, r2, #24
 8003cee:	4053      	eors	r3, r2
 8003cf0:	1c19      	adds	r1, r3, #0
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	f7ff fe32 	bl	800395c <Set_Motor_Speed>
}
 8003cf8:	46c0      	nop			@ (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b00a      	add	sp, #40	@ 0x28
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000418 	.word	0x20000418
 8003d04:	20000328 	.word	0x20000328
 8003d08:	2000041c 	.word	0x2000041c
 8003d0c:	200002dc 	.word	0x200002dc
 8003d10:	3eb33333 	.word	0x3eb33333
 8003d14:	3c23d70a 	.word	0x3c23d70a
 8003d18:	20000428 	.word	0x20000428
 8003d1c:	40c90fdb 	.word	0x40c90fdb
 8003d20:	20000420 	.word	0x20000420
 8003d24:	20000424 	.word	0x20000424
 8003d28:	20000440 	.word	0x20000440
 8003d2c:	20000444 	.word	0x20000444
 8003d30:	20000408 	.word	0x20000408
 8003d34:	2000040c 	.word	0x2000040c
 8003d38:	2000042c 	.word	0x2000042c
 8003d3c:	20000430 	.word	0x20000430
 8003d40:	42c80000 	.word	0x42c80000
 8003d44:	c2c80000 	.word	0xc2c80000
 8003d48:	20000410 	.word	0x20000410
 8003d4c:	20000414 	.word	0x20000414

08003d50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a15      	ldr	r2, [pc, #84]	@ (8003db4 <HAL_UART_RxCpltCallback+0x64>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d123      	bne.n	8003daa <HAL_UART_RxCpltCallback+0x5a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003d62:	23a0      	movs	r3, #160	@ 0xa0
 8003d64:	05db      	lsls	r3, r3, #23
 8003d66:	2120      	movs	r1, #32
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f001 fb42 	bl	80053f2 <HAL_GPIO_TogglePin>
		if (rxPacket[0] == 120)   // header byte (e.g. 'x')
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_UART_RxCpltCallback+0x68>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b78      	cmp	r3, #120	@ 0x78
 8003d74:	d113      	bne.n	8003d9e <HAL_UART_RxCpltCallback+0x4e>
		{
			//Control_Packet(rxPacket[1]); // process control byte if needed
			memcpy(&v, &rxPacket[1], sizeof(float)); // copy 4 bytes starting at rxPacket[1] into v
 8003d76:	4911      	ldr	r1, [pc, #68]	@ (8003dbc <HAL_UART_RxCpltCallback+0x6c>)
 8003d78:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <HAL_UART_RxCpltCallback+0x70>)
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f007 fba3 	bl	800b4c8 <memcpy>
			memcpy(&w, &rxPacket[1 + sizeof(float)], sizeof(float)); // copy next 4 bytes into w
 8003d82:	4910      	ldr	r1, [pc, #64]	@ (8003dc4 <HAL_UART_RxCpltCallback+0x74>)
 8003d84:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <HAL_UART_RxCpltCallback+0x78>)
 8003d86:	2204      	movs	r2, #4
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f007 fb9d 	bl	800b4c8 <memcpy>

			Robot_Set_Velocity(v, w);
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <HAL_UART_RxCpltCallback+0x70>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <HAL_UART_RxCpltCallback+0x78>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c19      	adds	r1, r3, #0
 8003d98:	1c10      	adds	r0, r2, #0
 8003d9a:	f7ff fe87 	bl	8003aac <Robot_Set_Velocity>

		}
		// restart interrupt reception
		HAL_UART_Receive_IT(&huart2, rxPacket, sizeof(rxPacket));
 8003d9e:	4906      	ldr	r1, [pc, #24]	@ (8003db8 <HAL_UART_RxCpltCallback+0x68>)
 8003da0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <HAL_UART_RxCpltCallback+0x7c>)
 8003da2:	2209      	movs	r2, #9
 8003da4:	0018      	movs	r0, r3
 8003da6:	f004 fc5f 	bl	8008668 <HAL_UART_Receive_IT>
	}
}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	40004400 	.word	0x40004400
 8003db8:	20000434 	.word	0x20000434
 8003dbc:	20000435 	.word	0x20000435
 8003dc0:	20000440 	.word	0x20000440
 8003dc4:	20000439 	.word	0x20000439
 8003dc8:	20000444 	.word	0x20000444
 8003dcc:	20000374 	.word	0x20000374

08003dd0 <TX_Packet>:

void TX_Packet(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
	// Pack into a buffer
	uint8_t buf[21];
	buf[0] = 121; // header byte)
 8003dd6:	003b      	movs	r3, r7
 8003dd8:	2279      	movs	r2, #121	@ 0x79
 8003dda:	701a      	strb	r2, [r3, #0]
	memcpy(&buf[1], &robot_X, sizeof(robot_X)); // 4 bytes for float
 8003ddc:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <TX_Packet+0x68>)
 8003dde:	003b      	movs	r3, r7
 8003de0:	3301      	adds	r3, #1
 8003de2:	2204      	movs	r2, #4
 8003de4:	0018      	movs	r0, r3
 8003de6:	f007 fb6f 	bl	800b4c8 <memcpy>
	memcpy(&buf[5], &robot_Y, sizeof(robot_Y)); // 4 bytes for float
 8003dea:	4914      	ldr	r1, [pc, #80]	@ (8003e3c <TX_Packet+0x6c>)
 8003dec:	003b      	movs	r3, r7
 8003dee:	3305      	adds	r3, #5
 8003df0:	2204      	movs	r2, #4
 8003df2:	0018      	movs	r0, r3
 8003df4:	f007 fb68 	bl	800b4c8 <memcpy>
	memcpy(&buf[9], &robot_Theta, sizeof(robot_Theta)); // 4 bytes for float
 8003df8:	4911      	ldr	r1, [pc, #68]	@ (8003e40 <TX_Packet+0x70>)
 8003dfa:	003b      	movs	r3, r7
 8003dfc:	3309      	adds	r3, #9
 8003dfe:	2204      	movs	r2, #4
 8003e00:	0018      	movs	r0, r3
 8003e02:	f007 fb61 	bl	800b4c8 <memcpy>
	memcpy(&buf[13], &v, sizeof(v)); // 4 bytes for float
 8003e06:	490f      	ldr	r1, [pc, #60]	@ (8003e44 <TX_Packet+0x74>)
 8003e08:	003b      	movs	r3, r7
 8003e0a:	330d      	adds	r3, #13
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f007 fb5a 	bl	800b4c8 <memcpy>
	memcpy(&buf[17], &w, sizeof(w)); // 4 bytes for float
 8003e14:	490c      	ldr	r1, [pc, #48]	@ (8003e48 <TX_Packet+0x78>)
 8003e16:	003b      	movs	r3, r7
 8003e18:	3311      	adds	r3, #17
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f007 fb53 	bl	800b4c8 <memcpy>
	// Transmit all 21 bytes
	HAL_UART_Transmit(&huart2, buf, sizeof(buf), HAL_MAX_DELAY);
 8003e22:	2301      	movs	r3, #1
 8003e24:	425b      	negs	r3, r3
 8003e26:	0039      	movs	r1, r7
 8003e28:	4808      	ldr	r0, [pc, #32]	@ (8003e4c <TX_Packet+0x7c>)
 8003e2a:	2215      	movs	r2, #21
 8003e2c:	f004 fb78 	bl	8008520 <HAL_UART_Transmit>
}
 8003e30:	46c0      	nop			@ (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b006      	add	sp, #24
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000420 	.word	0x20000420
 8003e3c:	20000424 	.word	0x20000424
 8003e40:	20000428 	.word	0x20000428
 8003e44:	20000440 	.word	0x20000440
 8003e48:	20000444 	.word	0x20000444
 8003e4c:	20000374 	.word	0x20000374

08003e50 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003e56:	f000 ff01 	bl	8004c5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003e5a:	f000 f843 	bl	8003ee4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003e5e:	f000 fb39 	bl	80044d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003e62:	f000 fae9 	bl	8004438 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8003e66:	f000 f8db 	bl	8004020 <MX_TIM1_Init>
	MX_TIM2_Init();
 8003e6a:	f000 f99f 	bl	80041ac <MX_TIM2_Init>
	MX_TIM3_Init();
 8003e6e:	f000 fa1b 	bl	80042a8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003e72:	f000 fa7d 	bl	8004370 <MX_TIM4_Init>
	MX_I2C2_Init();
 8003e76:	f000 f893 	bl	8003fa0 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	Motors_Init(); // Start these motors dih
 8003e7a:	f7ff fc81 	bl	8003780 <Motors_Init>
	IMU_Init(); // ts pmo sybau
 8003e7e:	f7ff fcbd 	bl	80037fc <IMU_Init>

	const uint32_t tick_period = 1000U / CTRL_HZ; // 10 ms period
 8003e82:	230a      	movs	r3, #10
 8003e84:	60fb      	str	r3, [r7, #12]
	const uint32_t tx_period = 1000U / 50; // 20 ms period for 50 Hz
 8003e86:	2314      	movs	r3, #20
 8003e88:	60bb      	str	r3, [r7, #8]
	uint32_t next_tick = HAL_GetTick();          // start time
 8003e8a:	f000 ff63 	bl	8004d54 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	617b      	str	r3, [r7, #20]
	uint32_t next_tx_tick = HAL_GetTick();
 8003e92:	f000 ff5f 	bl	8004d54 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	613b      	str	r3, [r7, #16]

	HAL_UART_Receive_IT(&huart2, rxPacket, 9); // start reciever
 8003e9a:	4910      	ldr	r1, [pc, #64]	@ (8003edc <main+0x8c>)
 8003e9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <main+0x90>)
 8003e9e:	2209      	movs	r2, #9
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f004 fbe1 	bl	8008668 <HAL_UART_Receive_IT>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		uint32_t now = HAL_GetTick();
 8003ea6:	f000 ff55 	bl	8004d54 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	607b      	str	r3, [r7, #4]

		// Control_Update at 100 Hz
		while ((int32_t)(now - next_tick) >= 0)
 8003eae:	e005      	b.n	8003ebc <main+0x6c>
		{
			Control_Update();            // Your control function
 8003eb0:	f7ff fe32 	bl	8003b18 <Control_Update>
			next_tick += tick_period;    // schedule next call
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
		while ((int32_t)(now - next_tick) >= 0)
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	d5f5      	bpl.n	8003eb0 <main+0x60>
		}

		// TX_Packet at 50 Hz
		if ((int32_t)(now - next_tx_tick) >= 0)
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	d4ec      	bmi.n	8003ea6 <main+0x56>
		{
			TX_Packet();
 8003ecc:	f7ff ff80 	bl	8003dd0 <TX_Packet>
			next_tx_tick += tx_period;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	613b      	str	r3, [r7, #16]
	{
 8003ed8:	e7e5      	b.n	8003ea6 <main+0x56>
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	20000434 	.word	0x20000434
 8003ee0:	20000374 	.word	0x20000374

08003ee4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b095      	sub	sp, #84	@ 0x54
 8003ee8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eea:	2414      	movs	r4, #20
 8003eec:	193b      	adds	r3, r7, r4
 8003eee:	0018      	movs	r0, r3
 8003ef0:	233c      	movs	r3, #60	@ 0x3c
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f007 fa55 	bl	800b3a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	0018      	movs	r0, r3
 8003efe:	2310      	movs	r3, #16
 8003f00:	001a      	movs	r2, r3
 8003f02:	2100      	movs	r1, #0
 8003f04:	f007 fa4e 	bl	800b3a4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f002 f927 	bl	8006160 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	2202      	movs	r2, #2
 8003f16:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	0052      	lsls	r2, r2, #1
 8003f1e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003f20:	0021      	movs	r1, r4
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2200      	movs	r2, #0
 8003f26:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2240      	movs	r2, #64	@ 0x40
 8003f2c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2202      	movs	r2, #2
 8003f32:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2202      	movs	r2, #2
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLN = 8;
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	2208      	movs	r2, #8
 8003f44:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2280      	movs	r2, #128	@ 0x80
 8003f4a:	0292      	lsls	r2, r2, #10
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	2280      	movs	r2, #128	@ 0x80
 8003f52:	0492      	lsls	r2, r2, #18
 8003f54:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f56:	187b      	adds	r3, r7, r1
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	0592      	lsls	r2, r2, #22
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	0018      	movs	r0, r3
 8003f62:	f002 f949 	bl	80061f8 <HAL_RCC_OscConfig>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d001      	beq.n	8003f6e <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8003f6a:	f000 fb37 	bl	80045dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2202      	movs	r2, #2
 8003f78:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2102      	movs	r1, #2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f002 fc94 	bl	80068b8 <HAL_RCC_ClockConfig>
 8003f90:	1e03      	subs	r3, r0, #0
 8003f92:	d001      	beq.n	8003f98 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8003f94:	f000 fb22 	bl	80045dc <Error_Handler>
	}
}
 8003f98:	46c0      	nop			@ (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b015      	add	sp, #84	@ 0x54
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <MX_I2C2_Init+0x78>)
 8003fa8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10B17DB5;
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fac:	4a1b      	ldr	r2, [pc, #108]	@ (800401c <MX_I2C2_Init+0x7c>)
 8003fae:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8003fb0:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fb6:	4b17      	ldr	r3, [pc, #92]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8003fc2:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fc8:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fce:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f001 fa23 	bl	8005428 <HAL_I2C_Init>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d001      	beq.n	8003fea <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8003fe6:	f000 faf9 	bl	80045dc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fea:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003fec:	2100      	movs	r1, #0
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f002 f81e 	bl	8006030 <HAL_I2CEx_ConfigAnalogFilter>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8003ff8:	f000 faf0 	bl	80045dc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <MX_I2C2_Init+0x74>)
 8003ffe:	2100      	movs	r1, #0
 8004000:	0018      	movs	r0, r3
 8004002:	f002 f861 	bl	80060c8 <HAL_I2CEx_ConfigDigitalFilter>
 8004006:	1e03      	subs	r3, r0, #0
 8004008:	d001      	beq.n	800400e <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 800400a:	f000 fae7 	bl	80045dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200001f0 	.word	0x200001f0
 8004018:	40005800 	.word	0x40005800
 800401c:	10b17db5 	.word	0x10b17db5

08004020 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b09c      	sub	sp, #112	@ 0x70
 8004024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004026:	2360      	movs	r3, #96	@ 0x60
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	0018      	movs	r0, r3
 800402c:	2310      	movs	r3, #16
 800402e:	001a      	movs	r2, r3
 8004030:	2100      	movs	r1, #0
 8004032:	f007 f9b7 	bl	800b3a4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004036:	2354      	movs	r3, #84	@ 0x54
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	0018      	movs	r0, r3
 800403c:	230c      	movs	r3, #12
 800403e:	001a      	movs	r2, r3
 8004040:	2100      	movs	r1, #0
 8004042:	f007 f9af 	bl	800b3a4 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004046:	2338      	movs	r3, #56	@ 0x38
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	0018      	movs	r0, r3
 800404c:	231c      	movs	r3, #28
 800404e:	001a      	movs	r2, r3
 8004050:	2100      	movs	r1, #0
 8004052:	f007 f9a7 	bl	800b3a4 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	0018      	movs	r0, r3
 800405a:	2334      	movs	r3, #52	@ 0x34
 800405c:	001a      	movs	r2, r3
 800405e:	2100      	movs	r1, #0
 8004060:	f007 f9a0 	bl	800b3a4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004064:	4b4f      	ldr	r3, [pc, #316]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004066:	4a50      	ldr	r2, [pc, #320]	@ (80041a8 <MX_TIM1_Init+0x188>)
 8004068:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63;
 800406a:	4b4e      	ldr	r3, [pc, #312]	@ (80041a4 <MX_TIM1_Init+0x184>)
 800406c:	223f      	movs	r2, #63	@ 0x3f
 800406e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004070:	4b4c      	ldr	r3, [pc, #304]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 99;
 8004076:	4b4b      	ldr	r3, [pc, #300]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004078:	2263      	movs	r2, #99	@ 0x63
 800407a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407c:	4b49      	ldr	r3, [pc, #292]	@ (80041a4 <MX_TIM1_Init+0x184>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004082:	4b48      	ldr	r3, [pc, #288]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004088:	4b46      	ldr	r3, [pc, #280]	@ (80041a4 <MX_TIM1_Init+0x184>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800408e:	4b45      	ldr	r3, [pc, #276]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004090:	0018      	movs	r0, r3
 8004092:	f002 fff7 	bl	8007084 <HAL_TIM_Base_Init>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d001      	beq.n	800409e <MX_TIM1_Init+0x7e>
	{
		Error_Handler();
 800409a:	f000 fa9f 	bl	80045dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800409e:	2160      	movs	r1, #96	@ 0x60
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2280      	movs	r2, #128	@ 0x80
 80040a4:	0152      	lsls	r2, r2, #5
 80040a6:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040a8:	187a      	adds	r2, r7, r1
 80040aa:	4b3e      	ldr	r3, [pc, #248]	@ (80041a4 <MX_TIM1_Init+0x184>)
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f003 fbdc 	bl	800786c <HAL_TIM_ConfigClockSource>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80040b8:	f000 fa90 	bl	80045dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80040bc:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <MX_TIM1_Init+0x184>)
 80040be:	0018      	movs	r0, r3
 80040c0:	f003 f838 	bl	8007134 <HAL_TIM_PWM_Init>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM1_Init+0xac>
	{
		Error_Handler();
 80040c8:	f000 fa88 	bl	80045dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040cc:	2154      	movs	r1, #84	@ 0x54
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	2200      	movs	r2, #0
 80040d8:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040e0:	187a      	adds	r2, r7, r1
 80040e2:	4b30      	ldr	r3, [pc, #192]	@ (80041a4 <MX_TIM1_Init+0x184>)
 80040e4:	0011      	movs	r1, r2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f004 f8b2 	bl	8008250 <HAL_TIMEx_MasterConfigSynchronization>
 80040ec:	1e03      	subs	r3, r0, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM1_Init+0xd4>
	{
		Error_Handler();
 80040f0:	f000 fa74 	bl	80045dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040f4:	2138      	movs	r1, #56	@ 0x38
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	2260      	movs	r2, #96	@ 0x60
 80040fa:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	2200      	movs	r2, #0
 8004100:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004102:	187b      	adds	r3, r7, r1
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004108:	187b      	adds	r3, r7, r1
 800410a:	2200      	movs	r2, #0
 800410c:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800410e:	187b      	adds	r3, r7, r1
 8004110:	2200      	movs	r2, #0
 8004112:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004114:	187b      	adds	r3, r7, r1
 8004116:	2200      	movs	r2, #0
 8004118:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800411a:	1879      	adds	r1, r7, r1
 800411c:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <MX_TIM1_Init+0x184>)
 800411e:	220c      	movs	r2, #12
 8004120:	0018      	movs	r0, r3
 8004122:	f003 faa3 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 8004126:	1e03      	subs	r3, r0, #0
 8004128:	d001      	beq.n	800412e <MX_TIM1_Init+0x10e>
	{
		Error_Handler();
 800412a:	f000 fa57 	bl	80045dc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	2200      	movs	r2, #0
 8004138:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	2280      	movs	r2, #128	@ 0x80
 8004150:	0192      	lsls	r2, r2, #6
 8004152:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2200      	movs	r2, #0
 8004158:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	2200      	movs	r2, #0
 800415e:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	2200      	movs	r2, #0
 8004164:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	2280      	movs	r2, #128	@ 0x80
 800416a:	0492      	lsls	r2, r2, #18
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	2200      	movs	r2, #0
 8004172:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	2200      	movs	r2, #0
 8004178:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004180:	1d3a      	adds	r2, r7, #4
 8004182:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004184:	0011      	movs	r1, r2
 8004186:	0018      	movs	r0, r3
 8004188:	f004 f8d8 	bl	800833c <HAL_TIMEx_ConfigBreakDeadTime>
 800418c:	1e03      	subs	r3, r0, #0
 800418e:	d001      	beq.n	8004194 <MX_TIM1_Init+0x174>
	{
		Error_Handler();
 8004190:	f000 fa24 	bl	80045dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8004194:	4b03      	ldr	r3, [pc, #12]	@ (80041a4 <MX_TIM1_Init+0x184>)
 8004196:	0018      	movs	r0, r3
 8004198:	f000 fb7a 	bl	8004890 <HAL_TIM_MspPostInit>

}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b01c      	add	sp, #112	@ 0x70
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000244 	.word	0x20000244
 80041a8:	40012c00 	.word	0x40012c00

080041ac <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08e      	sub	sp, #56	@ 0x38
 80041b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041b2:	2328      	movs	r3, #40	@ 0x28
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	0018      	movs	r0, r3
 80041b8:	2310      	movs	r3, #16
 80041ba:	001a      	movs	r2, r3
 80041bc:	2100      	movs	r1, #0
 80041be:	f007 f8f1 	bl	800b3a4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c2:	231c      	movs	r3, #28
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	0018      	movs	r0, r3
 80041c8:	230c      	movs	r3, #12
 80041ca:	001a      	movs	r2, r3
 80041cc:	2100      	movs	r1, #0
 80041ce:	f007 f8e9 	bl	800b3a4 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80041d2:	003b      	movs	r3, r7
 80041d4:	0018      	movs	r0, r3
 80041d6:	231c      	movs	r3, #28
 80041d8:	001a      	movs	r2, r3
 80041da:	2100      	movs	r1, #0
 80041dc:	f007 f8e2 	bl	800b3a4 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80041e0:	4b30      	ldr	r3, [pc, #192]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 80041e2:	2280      	movs	r2, #128	@ 0x80
 80041e4:	05d2      	lsls	r2, r2, #23
 80041e6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 63;
 80041e8:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 80041ea:	223f      	movs	r2, #63	@ 0x3f
 80041ec:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ee:	4b2d      	ldr	r3, [pc, #180]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 80041f4:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 80041f6:	2263      	movs	r2, #99	@ 0x63
 80041f8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fa:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004200:	4b28      	ldr	r3, [pc, #160]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004202:	2200      	movs	r2, #0
 8004204:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004208:	0018      	movs	r0, r3
 800420a:	f002 ff3b 	bl	8007084 <HAL_TIM_Base_Init>
 800420e:	1e03      	subs	r3, r0, #0
 8004210:	d001      	beq.n	8004216 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8004212:	f000 f9e3 	bl	80045dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004216:	2128      	movs	r1, #40	@ 0x28
 8004218:	187b      	adds	r3, r7, r1
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	0152      	lsls	r2, r2, #5
 800421e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004220:	187a      	adds	r2, r7, r1
 8004222:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004224:	0011      	movs	r1, r2
 8004226:	0018      	movs	r0, r3
 8004228:	f003 fb20 	bl	800786c <HAL_TIM_ConfigClockSource>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8004230:	f000 f9d4 	bl	80045dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004234:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004236:	0018      	movs	r0, r3
 8004238:	f002 ff7c 	bl	8007134 <HAL_TIM_PWM_Init>
 800423c:	1e03      	subs	r3, r0, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8004240:	f000 f9cc 	bl	80045dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004244:	211c      	movs	r1, #28
 8004246:	187b      	adds	r3, r7, r1
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800424c:	187b      	adds	r3, r7, r1
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004252:	187a      	adds	r2, r7, r1
 8004254:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f003 fff9 	bl	8008250 <HAL_TIMEx_MasterConfigSynchronization>
 800425e:	1e03      	subs	r3, r0, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM2_Init+0xba>
	{
		Error_Handler();
 8004262:	f000 f9bb 	bl	80045dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004266:	003b      	movs	r3, r7
 8004268:	2260      	movs	r2, #96	@ 0x60
 800426a:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800426c:	003b      	movs	r3, r7
 800426e:	2200      	movs	r2, #0
 8004270:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004272:	003b      	movs	r3, r7
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004278:	003b      	movs	r3, r7
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800427e:	0039      	movs	r1, r7
 8004280:	4b08      	ldr	r3, [pc, #32]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004282:	220c      	movs	r2, #12
 8004284:	0018      	movs	r0, r3
 8004286:	f003 f9f1 	bl	800766c <HAL_TIM_PWM_ConfigChannel>
 800428a:	1e03      	subs	r3, r0, #0
 800428c:	d001      	beq.n	8004292 <MX_TIM2_Init+0xe6>
	{
		Error_Handler();
 800428e:	f000 f9a5 	bl	80045dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8004292:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <MX_TIM2_Init+0xf8>)
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fafb 	bl	8004890 <HAL_TIM_MspPostInit>

}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b00e      	add	sp, #56	@ 0x38
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	20000290 	.word	0x20000290

080042a8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b08d      	sub	sp, #52	@ 0x34
 80042ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80042ae:	240c      	movs	r4, #12
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	0018      	movs	r0, r3
 80042b4:	2324      	movs	r3, #36	@ 0x24
 80042b6:	001a      	movs	r2, r3
 80042b8:	2100      	movs	r1, #0
 80042ba:	f007 f873 	bl	800b3a4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042be:	003b      	movs	r3, r7
 80042c0:	0018      	movs	r0, r3
 80042c2:	230c      	movs	r3, #12
 80042c4:	001a      	movs	r2, r3
 80042c6:	2100      	movs	r1, #0
 80042c8:	f007 f86c 	bl	800b3a4 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80042cc:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <MX_TIM3_Init+0xbc>)
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <MX_TIM3_Init+0xc0>)
 80042d0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80042d2:	4b24      	ldr	r3, [pc, #144]	@ (8004364 <MX_TIM3_Init+0xbc>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d8:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <MX_TIM3_Init+0xbc>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80042de:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <MX_TIM3_Init+0xbc>)
 80042e0:	4a22      	ldr	r2, [pc, #136]	@ (800436c <MX_TIM3_Init+0xc4>)
 80042e2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004364 <MX_TIM3_Init+0xbc>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004364 <MX_TIM3_Init+0xbc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80042f0:	0021      	movs	r1, r4
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	2200      	movs	r2, #0
 80042fc:	605a      	str	r2, [r3, #4]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	2201      	movs	r2, #1
 8004302:	609a      	str	r2, [r3, #8]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004304:	187b      	adds	r3, r7, r1
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]
	sConfig.IC1Filter = 15;
 800430a:	187b      	adds	r3, r7, r1
 800430c:	220f      	movs	r2, #15
 800430e:	611a      	str	r2, [r3, #16]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2200      	movs	r2, #0
 8004314:	615a      	str	r2, [r3, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004316:	187b      	adds	r3, r7, r1
 8004318:	2201      	movs	r2, #1
 800431a:	619a      	str	r2, [r3, #24]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800431c:	187b      	adds	r3, r7, r1
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]
	sConfig.IC2Filter = 15;
 8004322:	187b      	adds	r3, r7, r1
 8004324:	220f      	movs	r2, #15
 8004326:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004328:	187a      	adds	r2, r7, r1
 800432a:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <MX_TIM3_Init+0xbc>)
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f003 f850 	bl	80073d4 <HAL_TIM_Encoder_Init>
 8004334:	1e03      	subs	r3, r0, #0
 8004336:	d001      	beq.n	800433c <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8004338:	f000 f950 	bl	80045dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433c:	003b      	movs	r3, r7
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004342:	003b      	movs	r3, r7
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004348:	003a      	movs	r2, r7
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <MX_TIM3_Init+0xbc>)
 800434c:	0011      	movs	r1, r2
 800434e:	0018      	movs	r0, r3
 8004350:	f003 ff7e 	bl	8008250 <HAL_TIMEx_MasterConfigSynchronization>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8004358:	f000 f940 	bl	80045dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b00d      	add	sp, #52	@ 0x34
 8004362:	bd90      	pop	{r4, r7, pc}
 8004364:	200002dc 	.word	0x200002dc
 8004368:	40000400 	.word	0x40000400
 800436c:	0000ffff 	.word	0x0000ffff

08004370 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b08d      	sub	sp, #52	@ 0x34
 8004374:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8004376:	240c      	movs	r4, #12
 8004378:	193b      	adds	r3, r7, r4
 800437a:	0018      	movs	r0, r3
 800437c:	2324      	movs	r3, #36	@ 0x24
 800437e:	001a      	movs	r2, r3
 8004380:	2100      	movs	r1, #0
 8004382:	f007 f80f 	bl	800b3a4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004386:	003b      	movs	r3, r7
 8004388:	0018      	movs	r0, r3
 800438a:	230c      	movs	r3, #12
 800438c:	001a      	movs	r2, r3
 800438e:	2100      	movs	r1, #0
 8004390:	f007 f808 	bl	800b3a4 <memset>

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <MX_TIM4_Init+0xbc>)
 8004396:	4a26      	ldr	r2, [pc, #152]	@ (8004430 <MX_TIM4_Init+0xc0>)
 8004398:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800439a:	4b24      	ldr	r3, [pc, #144]	@ (800442c <MX_TIM4_Init+0xbc>)
 800439c:	2200      	movs	r2, #0
 800439e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a0:	4b22      	ldr	r3, [pc, #136]	@ (800442c <MX_TIM4_Init+0xbc>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80043a6:	4b21      	ldr	r3, [pc, #132]	@ (800442c <MX_TIM4_Init+0xbc>)
 80043a8:	4a22      	ldr	r2, [pc, #136]	@ (8004434 <MX_TIM4_Init+0xc4>)
 80043aa:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ac:	4b1f      	ldr	r3, [pc, #124]	@ (800442c <MX_TIM4_Init+0xbc>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043b2:	4b1e      	ldr	r3, [pc, #120]	@ (800442c <MX_TIM4_Init+0xbc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80043b8:	0021      	movs	r1, r4
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	2200      	movs	r2, #0
 80043c4:	605a      	str	r2, [r3, #4]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	2201      	movs	r2, #1
 80043ca:	609a      	str	r2, [r3, #8]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
	sConfig.IC1Filter = 15;
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	220f      	movs	r2, #15
 80043d6:	611a      	str	r2, [r3, #16]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	2200      	movs	r2, #0
 80043dc:	615a      	str	r2, [r3, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	2201      	movs	r2, #1
 80043e2:	619a      	str	r2, [r3, #24]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
	sConfig.IC2Filter = 15;
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	220f      	movs	r2, #15
 80043ee:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80043f0:	187a      	adds	r2, r7, r1
 80043f2:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <MX_TIM4_Init+0xbc>)
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f002 ffec 	bl	80073d4 <HAL_TIM_Encoder_Init>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM4_Init+0x94>
	{
		Error_Handler();
 8004400:	f000 f8ec 	bl	80045dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004404:	003b      	movs	r3, r7
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800440a:	003b      	movs	r3, r7
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004410:	003a      	movs	r2, r7
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <MX_TIM4_Init+0xbc>)
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f003 ff1a 	bl	8008250 <HAL_TIMEx_MasterConfigSynchronization>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d001      	beq.n	8004424 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 8004420:	f000 f8dc 	bl	80045dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b00d      	add	sp, #52	@ 0x34
 800442a:	bd90      	pop	{r4, r7, pc}
 800442c:	20000328 	.word	0x20000328
 8004430:	40000800 	.word	0x40000800
 8004434:	0000ffff 	.word	0x0000ffff

08004438 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800443c:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 800443e:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <MX_USART2_UART_Init+0x98>)
 8004440:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004442:	4b22      	ldr	r3, [pc, #136]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004444:	22e1      	movs	r2, #225	@ 0xe1
 8004446:	0252      	lsls	r2, r2, #9
 8004448:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800444a:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 800444c:	2200      	movs	r2, #0
 800444e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004450:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004456:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800445c:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 800445e:	220c      	movs	r2, #12
 8004460:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004462:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004468:	4b18      	ldr	r3, [pc, #96]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800446e:	4b17      	ldr	r3, [pc, #92]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004474:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004476:	2200      	movs	r2, #0
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800447a:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 800447c:	2200      	movs	r2, #0
 800447e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004480:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004482:	0018      	movs	r0, r3
 8004484:	f003 fff6 	bl	8008474 <HAL_UART_Init>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d001      	beq.n	8004490 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 800448c:	f000 f8a6 	bl	80045dc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004490:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 8004492:	2100      	movs	r1, #0
 8004494:	0018      	movs	r0, r3
 8004496:	f006 f8ff 	bl	800a698 <HAL_UARTEx_SetTxFifoThreshold>
 800449a:	1e03      	subs	r3, r0, #0
 800449c:	d001      	beq.n	80044a2 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 800449e:	f000 f89d 	bl	80045dc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044a2:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 80044a4:	2100      	movs	r1, #0
 80044a6:	0018      	movs	r0, r3
 80044a8:	f006 f936 	bl	800a718 <HAL_UARTEx_SetRxFifoThreshold>
 80044ac:	1e03      	subs	r3, r0, #0
 80044ae:	d001      	beq.n	80044b4 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80044b0:	f000 f894 	bl	80045dc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <MX_USART2_UART_Init+0x94>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f006 f8b4 	bl	800a624 <HAL_UARTEx_DisableFifoMode>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d001      	beq.n	80044c4 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80044c0:	f000 f88c 	bl	80045dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	20000374 	.word	0x20000374
 80044d0:	40004400 	.word	0x40004400

080044d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b08b      	sub	sp, #44	@ 0x2c
 80044d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044da:	2414      	movs	r4, #20
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	0018      	movs	r0, r3
 80044e0:	2314      	movs	r3, #20
 80044e2:	001a      	movs	r2, r3
 80044e4:	2100      	movs	r1, #0
 80044e6:	f006 ff5d 	bl	800b3a4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80044ea:	4b3a      	ldr	r3, [pc, #232]	@ (80045d4 <MX_GPIO_Init+0x100>)
 80044ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044ee:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <MX_GPIO_Init+0x100>)
 80044f0:	2104      	movs	r1, #4
 80044f2:	430a      	orrs	r2, r1
 80044f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80044f6:	4b37      	ldr	r3, [pc, #220]	@ (80045d4 <MX_GPIO_Init+0x100>)
 80044f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fa:	2204      	movs	r2, #4
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004502:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004506:	4b33      	ldr	r3, [pc, #204]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004508:	2120      	movs	r1, #32
 800450a:	430a      	orrs	r2, r1
 800450c:	635a      	str	r2, [r3, #52]	@ 0x34
 800450e:	4b31      	ldr	r3, [pc, #196]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004512:	2220      	movs	r2, #32
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800451a:	4b2e      	ldr	r3, [pc, #184]	@ (80045d4 <MX_GPIO_Init+0x100>)
 800451c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800451e:	4b2d      	ldr	r3, [pc, #180]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004520:	2101      	movs	r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	635a      	str	r2, [r3, #52]	@ 0x34
 8004526:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452a:	2201      	movs	r2, #1
 800452c:	4013      	ands	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004532:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004536:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004538:	2102      	movs	r1, #2
 800453a:	430a      	orrs	r2, r1
 800453c:	635a      	str	r2, [r3, #52]	@ 0x34
 800453e:	4b25      	ldr	r3, [pc, #148]	@ (80045d4 <MX_GPIO_Init+0x100>)
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800454a:	23c8      	movs	r3, #200	@ 0xc8
 800454c:	0099      	lsls	r1, r3, #2
 800454e:	23a0      	movs	r3, #160	@ 0xa0
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	2200      	movs	r2, #0
 8004554:	0018      	movs	r0, r3
 8004556:	f000 ff2f 	bl	80053b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800455a:	193b      	adds	r3, r7, r4
 800455c:	2280      	movs	r2, #128	@ 0x80
 800455e:	0192      	lsls	r2, r2, #6
 8004560:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004562:	193b      	adds	r3, r7, r4
 8004564:	2288      	movs	r2, #136	@ 0x88
 8004566:	0352      	lsls	r2, r2, #13
 8004568:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	193b      	adds	r3, r7, r4
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004570:	193b      	adds	r3, r7, r4
 8004572:	4a19      	ldr	r2, [pc, #100]	@ (80045d8 <MX_GPIO_Init+0x104>)
 8004574:	0019      	movs	r1, r3
 8004576:	0010      	movs	r0, r2
 8004578:	f000 fdb2 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800457c:	193b      	adds	r3, r7, r4
 800457e:	2220      	movs	r2, #32
 8004580:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004582:	193b      	adds	r3, r7, r4
 8004584:	2201      	movs	r2, #1
 8004586:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	193b      	adds	r3, r7, r4
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800458e:	193b      	adds	r3, r7, r4
 8004590:	2202      	movs	r2, #2
 8004592:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8004594:	193a      	adds	r2, r7, r4
 8004596:	23a0      	movs	r3, #160	@ 0xa0
 8004598:	05db      	lsls	r3, r3, #23
 800459a:	0011      	movs	r1, r2
 800459c:	0018      	movs	r0, r3
 800459e:	f000 fd9f 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045a2:	0021      	movs	r1, r4
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	22c0      	movs	r2, #192	@ 0xc0
 80045a8:	0092      	lsls	r2, r2, #2
 80045aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ac:	187b      	adds	r3, r7, r1
 80045ae:	2201      	movs	r2, #1
 80045b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	2200      	movs	r2, #0
 80045bc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045be:	187a      	adds	r2, r7, r1
 80045c0:	23a0      	movs	r3, #160	@ 0xa0
 80045c2:	05db      	lsls	r3, r3, #23
 80045c4:	0011      	movs	r1, r2
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 fd8a 	bl	80050e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b00b      	add	sp, #44	@ 0x2c
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	50000800 	.word	0x50000800

080045dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045e0:	b672      	cpsid	i
}
 80045e2:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	e7fd      	b.n	80045e4 <Error_Handler+0x8>

080045e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ee:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <HAL_MspInit+0x4c>)
 80045f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f2:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <HAL_MspInit+0x4c>)
 80045f4:	2101      	movs	r1, #1
 80045f6:	430a      	orrs	r2, r1
 80045f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80045fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <HAL_MspInit+0x4c>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	2201      	movs	r2, #1
 8004600:	4013      	ands	r3, r2
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <HAL_MspInit+0x4c>)
 8004608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800460a:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <HAL_MspInit+0x4c>)
 800460c:	2180      	movs	r1, #128	@ 0x80
 800460e:	0549      	lsls	r1, r1, #21
 8004610:	430a      	orrs	r2, r1
 8004612:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004614:	4b07      	ldr	r3, [pc, #28]	@ (8004634 <HAL_MspInit+0x4c>)
 8004616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004618:	2380      	movs	r3, #128	@ 0x80
 800461a:	055b      	lsls	r3, r3, #21
 800461c:	4013      	ands	r3, r2
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004622:	23c0      	movs	r3, #192	@ 0xc0
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	0018      	movs	r0, r3
 8004628:	f000 fb9e 	bl	8004d68 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000

08004638 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b09d      	sub	sp, #116	@ 0x74
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	235c      	movs	r3, #92	@ 0x5c
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	0018      	movs	r0, r3
 8004646:	2314      	movs	r3, #20
 8004648:	001a      	movs	r2, r3
 800464a:	2100      	movs	r1, #0
 800464c:	f006 feaa 	bl	800b3a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004650:	2410      	movs	r4, #16
 8004652:	193b      	adds	r3, r7, r4
 8004654:	0018      	movs	r0, r3
 8004656:	234c      	movs	r3, #76	@ 0x4c
 8004658:	001a      	movs	r2, r3
 800465a:	2100      	movs	r1, #0
 800465c:	f006 fea2 	bl	800b3a4 <memset>
  if(hi2c->Instance==I2C2)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a22      	ldr	r2, [pc, #136]	@ (80046f0 <HAL_I2C_MspInit+0xb8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d13e      	bne.n	80046e8 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800466a:	193b      	adds	r3, r7, r4
 800466c:	2240      	movs	r2, #64	@ 0x40
 800466e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004670:	193b      	adds	r3, r7, r4
 8004672:	2200      	movs	r2, #0
 8004674:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004676:	193b      	adds	r3, r7, r4
 8004678:	0018      	movs	r0, r3
 800467a:	f002 fac7 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004682:	f7ff ffab 	bl	80045dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004686:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_I2C_MspInit+0xbc>)
 8004688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800468a:	4b1a      	ldr	r3, [pc, #104]	@ (80046f4 <HAL_I2C_MspInit+0xbc>)
 800468c:	2102      	movs	r1, #2
 800468e:	430a      	orrs	r2, r1
 8004690:	635a      	str	r2, [r3, #52]	@ 0x34
 8004692:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <HAL_I2C_MspInit+0xbc>)
 8004694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004696:	2202      	movs	r2, #2
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800469e:	215c      	movs	r1, #92	@ 0x5c
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	2288      	movs	r2, #136	@ 0x88
 80046a4:	01d2      	lsls	r2, r2, #7
 80046a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	2212      	movs	r2, #18
 80046ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	2200      	movs	r2, #0
 80046b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	2206      	movs	r2, #6
 80046be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	4a0d      	ldr	r2, [pc, #52]	@ (80046f8 <HAL_I2C_MspInit+0xc0>)
 80046c4:	0019      	movs	r1, r3
 80046c6:	0010      	movs	r0, r2
 80046c8:	f000 fd0a 	bl	80050e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_I2C_MspInit+0xbc>)
 80046ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d0:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <HAL_I2C_MspInit+0xbc>)
 80046d2:	2180      	movs	r1, #128	@ 0x80
 80046d4:	03c9      	lsls	r1, r1, #15
 80046d6:	430a      	orrs	r2, r1
 80046d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046da:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_I2C_MspInit+0xbc>)
 80046dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046de:	2380      	movs	r3, #128	@ 0x80
 80046e0:	03db      	lsls	r3, r3, #15
 80046e2:	4013      	ands	r3, r2
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b01d      	add	sp, #116	@ 0x74
 80046ee:	bd90      	pop	{r4, r7, pc}
 80046f0:	40005800 	.word	0x40005800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	50000400 	.word	0x50000400

080046fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b099      	sub	sp, #100	@ 0x64
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004704:	2414      	movs	r4, #20
 8004706:	193b      	adds	r3, r7, r4
 8004708:	0018      	movs	r0, r3
 800470a:	234c      	movs	r3, #76	@ 0x4c
 800470c:	001a      	movs	r2, r3
 800470e:	2100      	movs	r1, #0
 8004710:	f006 fe48 	bl	800b3a4 <memset>
  if(htim_base->Instance==TIM1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <HAL_TIM_Base_MspInit+0x8c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d11d      	bne.n	800475a <HAL_TIM_Base_MspInit+0x5e>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800471e:	193b      	adds	r3, r7, r4
 8004720:	2280      	movs	r2, #128	@ 0x80
 8004722:	0392      	lsls	r2, r2, #14
 8004724:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004726:	193b      	adds	r3, r7, r4
 8004728:	2200      	movs	r2, #0
 800472a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800472c:	193b      	adds	r3, r7, r4
 800472e:	0018      	movs	r0, r3
 8004730:	f002 fa6c 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004738:	f7ff ff50 	bl	80045dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800473c:	4b13      	ldr	r3, [pc, #76]	@ (800478c <HAL_TIM_Base_MspInit+0x90>)
 800473e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004740:	4b12      	ldr	r3, [pc, #72]	@ (800478c <HAL_TIM_Base_MspInit+0x90>)
 8004742:	2180      	movs	r1, #128	@ 0x80
 8004744:	0109      	lsls	r1, r1, #4
 8004746:	430a      	orrs	r2, r1
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_TIM_Base_MspInit+0x90>)
 800474c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800474e:	2380      	movs	r3, #128	@ 0x80
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004758:	e011      	b.n	800477e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	2380      	movs	r3, #128	@ 0x80
 8004760:	05db      	lsls	r3, r3, #23
 8004762:	429a      	cmp	r2, r3
 8004764:	d10b      	bne.n	800477e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004766:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_TIM_Base_MspInit+0x90>)
 8004768:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800476a:	4b08      	ldr	r3, [pc, #32]	@ (800478c <HAL_TIM_Base_MspInit+0x90>)
 800476c:	2101      	movs	r1, #1
 800476e:	430a      	orrs	r2, r1
 8004770:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_TIM_Base_MspInit+0x90>)
 8004774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004776:	2201      	movs	r2, #1
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	b019      	add	sp, #100	@ 0x64
 8004784:	bd90      	pop	{r4, r7, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40021000 	.word	0x40021000

08004790 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b08d      	sub	sp, #52	@ 0x34
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	241c      	movs	r4, #28
 800479a:	193b      	adds	r3, r7, r4
 800479c:	0018      	movs	r0, r3
 800479e:	2314      	movs	r3, #20
 80047a0:	001a      	movs	r2, r3
 80047a2:	2100      	movs	r1, #0
 80047a4:	f006 fdfe 	bl	800b3a4 <memset>
  if(htim_encoder->Instance==TIM3)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a34      	ldr	r2, [pc, #208]	@ (8004880 <HAL_TIM_Encoder_MspInit+0xf0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d12f      	bne.n	8004812 <HAL_TIM_Encoder_MspInit+0x82>
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047b2:	4b34      	ldr	r3, [pc, #208]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 80047b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047b6:	4b33      	ldr	r3, [pc, #204]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 80047b8:	2102      	movs	r1, #2
 80047ba:	430a      	orrs	r2, r1
 80047bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047be:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	2202      	movs	r2, #2
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 80047cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 80047d0:	2101      	movs	r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	2201      	movs	r2, #1
 80047dc:	4013      	ands	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_A_Pin|Encoder_1_B_Pin;
 80047e2:	0021      	movs	r1, r4
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	22c0      	movs	r2, #192	@ 0xc0
 80047e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	2202      	movs	r2, #2
 80047ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f6:	187b      	adds	r3, r7, r1
 80047f8:	2200      	movs	r2, #0
 80047fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	2201      	movs	r2, #1
 8004800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004802:	187a      	adds	r2, r7, r1
 8004804:	23a0      	movs	r3, #160	@ 0xa0
 8004806:	05db      	lsls	r3, r3, #23
 8004808:	0011      	movs	r1, r2
 800480a:	0018      	movs	r0, r3
 800480c:	f000 fc68 	bl	80050e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004810:	e032      	b.n	8004878 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM4)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d12d      	bne.n	8004878 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800481c:	4b19      	ldr	r3, [pc, #100]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 800481e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004820:	4b18      	ldr	r3, [pc, #96]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004822:	2104      	movs	r1, #4
 8004824:	430a      	orrs	r2, r1
 8004826:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004828:	4b16      	ldr	r3, [pc, #88]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482c:	2204      	movs	r2, #4
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004834:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004838:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 800483a:	2102      	movs	r1, #2
 800483c:	430a      	orrs	r2, r1
 800483e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004840:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004844:	2202      	movs	r2, #2
 8004846:	4013      	ands	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_A_Pin|Encoder_2_B_Pin;
 800484c:	211c      	movs	r1, #28
 800484e:	187b      	adds	r3, r7, r1
 8004850:	22c0      	movs	r2, #192	@ 0xc0
 8004852:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004854:	187b      	adds	r3, r7, r1
 8004856:	2202      	movs	r2, #2
 8004858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	187b      	adds	r3, r7, r1
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004860:	187b      	adds	r3, r7, r1
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM4;
 8004866:	187b      	adds	r3, r7, r1
 8004868:	2209      	movs	r2, #9
 800486a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486c:	187b      	adds	r3, r7, r1
 800486e:	4a07      	ldr	r2, [pc, #28]	@ (800488c <HAL_TIM_Encoder_MspInit+0xfc>)
 8004870:	0019      	movs	r1, r3
 8004872:	0010      	movs	r0, r2
 8004874:	f000 fc34 	bl	80050e0 <HAL_GPIO_Init>
}
 8004878:	46c0      	nop			@ (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b00d      	add	sp, #52	@ 0x34
 800487e:	bd90      	pop	{r4, r7, pc}
 8004880:	40000400 	.word	0x40000400
 8004884:	40021000 	.word	0x40021000
 8004888:	40000800 	.word	0x40000800
 800488c:	50000400 	.word	0x50000400

08004890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b08b      	sub	sp, #44	@ 0x2c
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004898:	2414      	movs	r4, #20
 800489a:	193b      	adds	r3, r7, r4
 800489c:	0018      	movs	r0, r3
 800489e:	2314      	movs	r3, #20
 80048a0:	001a      	movs	r2, r3
 80048a2:	2100      	movs	r1, #0
 80048a4:	f006 fd7e 	bl	800b3a4 <memset>
  if(htim->Instance==TIM1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <HAL_TIM_MspPostInit+0xc4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d123      	bne.n	80048fa <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b2:	4b29      	ldr	r3, [pc, #164]	@ (8004958 <HAL_TIM_MspPostInit+0xc8>)
 80048b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b6:	4b28      	ldr	r3, [pc, #160]	@ (8004958 <HAL_TIM_MspPostInit+0xc8>)
 80048b8:	2104      	movs	r1, #4
 80048ba:	430a      	orrs	r2, r1
 80048bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80048be:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <HAL_TIM_MspPostInit+0xc8>)
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	2204      	movs	r2, #4
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	2280      	movs	r2, #128	@ 0x80
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d2:	0021      	movs	r1, r4
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	2202      	movs	r2, #2
 80048d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	2200      	movs	r2, #0
 80048de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	2200      	movs	r2, #0
 80048e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80048e6:	187b      	adds	r3, r7, r1
 80048e8:	2202      	movs	r2, #2
 80048ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ec:	187b      	adds	r3, r7, r1
 80048ee:	4a1b      	ldr	r2, [pc, #108]	@ (800495c <HAL_TIM_MspPostInit+0xcc>)
 80048f0:	0019      	movs	r1, r3
 80048f2:	0010      	movs	r0, r2
 80048f4:	f000 fbf4 	bl	80050e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80048f8:	e028      	b.n	800494c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	@ 0x80
 8004900:	05db      	lsls	r3, r3, #23
 8004902:	429a      	cmp	r2, r3
 8004904:	d122      	bne.n	800494c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004906:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <HAL_TIM_MspPostInit+0xc8>)
 8004908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490a:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <HAL_TIM_MspPostInit+0xc8>)
 800490c:	2102      	movs	r1, #2
 800490e:	430a      	orrs	r2, r1
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
 8004912:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <HAL_TIM_MspPostInit+0xc8>)
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	2202      	movs	r2, #2
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800491e:	2114      	movs	r1, #20
 8004920:	187b      	adds	r3, r7, r1
 8004922:	2280      	movs	r2, #128	@ 0x80
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	187b      	adds	r3, r7, r1
 800492a:	2202      	movs	r2, #2
 800492c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	187b      	adds	r3, r7, r1
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004934:	187b      	adds	r3, r7, r1
 8004936:	2200      	movs	r2, #0
 8004938:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800493a:	187b      	adds	r3, r7, r1
 800493c:	2202      	movs	r2, #2
 800493e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004940:	187b      	adds	r3, r7, r1
 8004942:	4a07      	ldr	r2, [pc, #28]	@ (8004960 <HAL_TIM_MspPostInit+0xd0>)
 8004944:	0019      	movs	r1, r3
 8004946:	0010      	movs	r0, r2
 8004948:	f000 fbca 	bl	80050e0 <HAL_GPIO_Init>
}
 800494c:	46c0      	nop			@ (mov r8, r8)
 800494e:	46bd      	mov	sp, r7
 8004950:	b00b      	add	sp, #44	@ 0x2c
 8004952:	bd90      	pop	{r4, r7, pc}
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40021000 	.word	0x40021000
 800495c:	50000800 	.word	0x50000800
 8004960:	50000400 	.word	0x50000400

08004964 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b09d      	sub	sp, #116	@ 0x74
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800496c:	235c      	movs	r3, #92	@ 0x5c
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	0018      	movs	r0, r3
 8004972:	2314      	movs	r3, #20
 8004974:	001a      	movs	r2, r3
 8004976:	2100      	movs	r1, #0
 8004978:	f006 fd14 	bl	800b3a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800497c:	2410      	movs	r4, #16
 800497e:	193b      	adds	r3, r7, r4
 8004980:	0018      	movs	r0, r3
 8004982:	234c      	movs	r3, #76	@ 0x4c
 8004984:	001a      	movs	r2, r3
 8004986:	2100      	movs	r1, #0
 8004988:	f006 fd0c 	bl	800b3a4 <memset>
  if(huart->Instance==USART2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a26      	ldr	r2, [pc, #152]	@ (8004a2c <HAL_UART_MspInit+0xc8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d146      	bne.n	8004a24 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004996:	193b      	adds	r3, r7, r4
 8004998:	2202      	movs	r2, #2
 800499a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800499c:	193b      	adds	r3, r7, r4
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049a2:	193b      	adds	r3, r7, r4
 80049a4:	0018      	movs	r0, r3
 80049a6:	f002 f931 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 80049aa:	1e03      	subs	r3, r0, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80049ae:	f7ff fe15 	bl	80045dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a30 <HAL_UART_MspInit+0xcc>)
 80049b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a30 <HAL_UART_MspInit+0xcc>)
 80049b8:	2180      	movs	r1, #128	@ 0x80
 80049ba:	0289      	lsls	r1, r1, #10
 80049bc:	430a      	orrs	r2, r1
 80049be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <HAL_UART_MspInit+0xcc>)
 80049c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	4013      	ands	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ce:	4b18      	ldr	r3, [pc, #96]	@ (8004a30 <HAL_UART_MspInit+0xcc>)
 80049d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d2:	4b17      	ldr	r3, [pc, #92]	@ (8004a30 <HAL_UART_MspInit+0xcc>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	430a      	orrs	r2, r1
 80049d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80049da:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <HAL_UART_MspInit+0xcc>)
 80049dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049de:	2201      	movs	r2, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80049e6:	215c      	movs	r1, #92	@ 0x5c
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	220c      	movs	r2, #12
 80049ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	2202      	movs	r2, #2
 80049f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2201      	movs	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a06:	187a      	adds	r2, r7, r1
 8004a08:	23a0      	movs	r3, #160	@ 0xa0
 8004a0a:	05db      	lsls	r3, r3, #23
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fb66 	bl	80050e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8004a14:	2200      	movs	r2, #0
 8004a16:	2100      	movs	r1, #0
 8004a18:	201c      	movs	r0, #28
 8004a1a:	f000 fa67 	bl	8004eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8004a1e:	201c      	movs	r0, #28
 8004a20:	f000 fa79 	bl	8004f16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b01d      	add	sp, #116	@ 0x74
 8004a2a:	bd90      	pop	{r4, r7, pc}
 8004a2c:	40004400 	.word	0x40004400
 8004a30:	40021000 	.word	0x40021000

08004a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	e7fd      	b.n	8004a38 <NMI_Handler+0x4>

08004a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a40:	46c0      	nop			@ (mov r8, r8)
 8004a42:	e7fd      	b.n	8004a40 <HardFault_Handler+0x4>

08004a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004a48:	46c0      	nop			@ (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a5c:	f000 f968 	bl	8004d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a60:	46c0      	nop			@ (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a6c:	4b03      	ldr	r3, [pc, #12]	@ (8004a7c <USART2_LPUART2_IRQHandler+0x14>)
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f003 fe60 	bl	8008734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	20000374 	.word	0x20000374

08004a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  return 1;
 8004a84:	2301      	movs	r3, #1
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <_kill>:

int _kill(int pid, int sig)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a96:	f006 fcdf 	bl	800b458 <__errno>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	2216      	movs	r2, #22
 8004a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	425b      	negs	r3, r3
}
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <_exit>:

void _exit (int status)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	425a      	negs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0011      	movs	r1, r2
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff ffe5 	bl	8004a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	e7fd      	b.n	8004ac2 <_exit+0x16>

08004ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e00a      	b.n	8004aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ad8:	e000      	b.n	8004adc <_read+0x16>
 8004ada:	bf00      	nop
 8004adc:	0001      	movs	r1, r0
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	60ba      	str	r2, [r7, #8]
 8004ae4:	b2ca      	uxtb	r2, r1
 8004ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	3301      	adds	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	dbf0      	blt.n	8004ad8 <_read+0x12>
  }

  return len;
 8004af6:	687b      	ldr	r3, [r7, #4]
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e009      	b.n	8004b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	60ba      	str	r2, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	e000      	b.n	8004b20 <_write+0x20>
 8004b1e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3301      	adds	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	dbf1      	blt.n	8004b12 <_write+0x12>
  }
  return len;
 8004b2e:	687b      	ldr	r3, [r7, #4]
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b006      	add	sp, #24
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_close>:

int _close(int file)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b40:	2301      	movs	r3, #1
 8004b42:	425b      	negs	r3, r3
}
 8004b44:	0018      	movs	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2280      	movs	r2, #128	@ 0x80
 8004b5a:	0192      	lsls	r2, r2, #6
 8004b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_isatty>:

int _isatty(int file)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b70:	2301      	movs	r3, #1
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b004      	add	sp, #16
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b98:	4a14      	ldr	r2, [pc, #80]	@ (8004bec <_sbrk+0x5c>)
 8004b9a:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <_sbrk+0x60>)
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <_sbrk+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <_sbrk+0x64>)
 8004bae:	4a12      	ldr	r2, [pc, #72]	@ (8004bf8 <_sbrk+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	18d3      	adds	r3, r2, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d207      	bcs.n	8004bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc0:	f006 fc4a 	bl	800b458 <__errno>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	425b      	negs	r3, r3
 8004bce:	e009      	b.n	8004be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd0:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	18d2      	adds	r2, r2, r3
 8004bde:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <_sbrk+0x64>)
 8004be0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b006      	add	sp, #24
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20024000 	.word	0x20024000
 8004bf0:	00000400 	.word	0x00000400
 8004bf4:	2000044c 	.word	0x2000044c
 8004bf8:	200005a0 	.word	0x200005a0

08004bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c08:	480d      	ldr	r0, [pc, #52]	@ (8004c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c0c:	f7ff fff6 	bl	8004bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c10:	480c      	ldr	r0, [pc, #48]	@ (8004c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c12:	490d      	ldr	r1, [pc, #52]	@ (8004c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c14:	4a0d      	ldr	r2, [pc, #52]	@ (8004c4c <LoopForever+0xe>)
  movs r3, #0
 8004c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c18:	e002      	b.n	8004c20 <LoopCopyDataInit>

08004c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c1e:	3304      	adds	r3, #4

08004c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c24:	d3f9      	bcc.n	8004c1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c28:	4c0a      	ldr	r4, [pc, #40]	@ (8004c54 <LoopForever+0x16>)
  movs r3, #0
 8004c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c2c:	e001      	b.n	8004c32 <LoopFillZerobss>

08004c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c30:	3204      	adds	r2, #4

08004c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c34:	d3fb      	bcc.n	8004c2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004c36:	f006 fc15 	bl	800b464 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004c3a:	f7ff f909 	bl	8003e50 <main>

08004c3e <LoopForever>:

LoopForever:
  b LoopForever
 8004c3e:	e7fe      	b.n	8004c3e <LoopForever>
  ldr   r0, =_estack
 8004c40:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004c4c:	0800eccc 	.word	0x0800eccc
  ldr r2, =_sbss
 8004c50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004c54:	200005a0 	.word	0x200005a0

08004c58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c58:	e7fe      	b.n	8004c58 <ADC1_COMP_IRQHandler>
	...

08004c5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c68:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <HAL_Init+0x3c>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <HAL_Init+0x3c>)
 8004c6e:	2180      	movs	r1, #128	@ 0x80
 8004c70:	0049      	lsls	r1, r1, #1
 8004c72:	430a      	orrs	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c76:	2000      	movs	r0, #0
 8004c78:	f000 f810 	bl	8004c9c <HAL_InitTick>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e001      	b.n	8004c8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004c88:	f7ff fcae 	bl	80045e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	781b      	ldrb	r3, [r3, #0]
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b002      	add	sp, #8
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40022000 	.word	0x40022000

08004c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ca4:	230f      	movs	r3, #15
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004cac:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <HAL_InitTick+0x88>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02b      	beq.n	8004d0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d28 <HAL_InitTick+0x8c>)
 8004cb6:	681c      	ldr	r4, [r3, #0]
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <HAL_InitTick+0x88>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	23fa      	movs	r3, #250	@ 0xfa
 8004cc0:	0098      	lsls	r0, r3, #2
 8004cc2:	f7fb fa3b 	bl	800013c <__udivsi3>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	0019      	movs	r1, r3
 8004cca:	0020      	movs	r0, r4
 8004ccc:	f7fb fa36 	bl	800013c <__udivsi3>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f000 f92f 	bl	8004f36 <HAL_SYSTICK_Config>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d112      	bne.n	8004d02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d80a      	bhi.n	8004cf8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	425b      	negs	r3, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 f8fe 	bl	8004eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d2c <HAL_InitTick+0x90>)
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e00d      	b.n	8004d14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e008      	b.n	8004d14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d02:	230f      	movs	r3, #15
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e003      	b.n	8004d14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d0c:	230f      	movs	r3, #15
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004d14:	230f      	movs	r3, #15
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
}
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b005      	add	sp, #20
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	20000008 	.word	0x20000008
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	20000004 	.word	0x20000004

08004d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d34:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <HAL_IncTick+0x1c>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	001a      	movs	r2, r3
 8004d3a:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <HAL_IncTick+0x20>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	18d2      	adds	r2, r2, r3
 8004d40:	4b03      	ldr	r3, [pc, #12]	@ (8004d50 <HAL_IncTick+0x20>)
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	20000008 	.word	0x20000008
 8004d50:	20000450 	.word	0x20000450

08004d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  return uwTick;
 8004d58:	4b02      	ldr	r3, [pc, #8]	@ (8004d64 <HAL_GetTick+0x10>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	20000450 	.word	0x20000450

08004d68 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004d70:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a06      	ldr	r2, [pc, #24]	@ (8004d90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	fffff9ff 	.word	0xfffff9ff

08004d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	1dfb      	adds	r3, r7, #7
 8004d9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004da0:	1dfb      	adds	r3, r7, #7
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da6:	d809      	bhi.n	8004dbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	001a      	movs	r2, r3
 8004dae:	231f      	movs	r3, #31
 8004db0:	401a      	ands	r2, r3
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <__NVIC_EnableIRQ+0x30>)
 8004db4:	2101      	movs	r1, #1
 8004db6:	4091      	lsls	r1, r2
 8004db8:	000a      	movs	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	0002      	movs	r2, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dd6:	1dfb      	adds	r3, r7, #7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ddc:	d828      	bhi.n	8004e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dde:	4a2f      	ldr	r2, [pc, #188]	@ (8004e9c <__NVIC_SetPriority+0xd4>)
 8004de0:	1dfb      	adds	r3, r7, #7
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	33c0      	adds	r3, #192	@ 0xc0
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	589b      	ldr	r3, [r3, r2]
 8004dee:	1dfa      	adds	r2, r7, #7
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	0011      	movs	r1, r2
 8004df4:	2203      	movs	r2, #3
 8004df6:	400a      	ands	r2, r1
 8004df8:	00d2      	lsls	r2, r2, #3
 8004dfa:	21ff      	movs	r1, #255	@ 0xff
 8004dfc:	4091      	lsls	r1, r2
 8004dfe:	000a      	movs	r2, r1
 8004e00:	43d2      	mvns	r2, r2
 8004e02:	401a      	ands	r2, r3
 8004e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	22ff      	movs	r2, #255	@ 0xff
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	0018      	movs	r0, r3
 8004e14:	2303      	movs	r3, #3
 8004e16:	4003      	ands	r3, r0
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e1c:	481f      	ldr	r0, [pc, #124]	@ (8004e9c <__NVIC_SetPriority+0xd4>)
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	430a      	orrs	r2, r1
 8004e28:	33c0      	adds	r3, #192	@ 0xc0
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e2e:	e031      	b.n	8004e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea0 <__NVIC_SetPriority+0xd8>)
 8004e32:	1dfb      	adds	r3, r7, #7
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	0019      	movs	r1, r3
 8004e38:	230f      	movs	r3, #15
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	3b08      	subs	r3, #8
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	3306      	adds	r3, #6
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	3304      	adds	r3, #4
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1dfa      	adds	r2, r7, #7
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	0011      	movs	r1, r2
 8004e50:	2203      	movs	r2, #3
 8004e52:	400a      	ands	r2, r1
 8004e54:	00d2      	lsls	r2, r2, #3
 8004e56:	21ff      	movs	r1, #255	@ 0xff
 8004e58:	4091      	lsls	r1, r2
 8004e5a:	000a      	movs	r2, r1
 8004e5c:	43d2      	mvns	r2, r2
 8004e5e:	401a      	ands	r2, r3
 8004e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	22ff      	movs	r2, #255	@ 0xff
 8004e68:	401a      	ands	r2, r3
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	0018      	movs	r0, r3
 8004e70:	2303      	movs	r3, #3
 8004e72:	4003      	ands	r3, r0
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e78:	4809      	ldr	r0, [pc, #36]	@ (8004ea0 <__NVIC_SetPriority+0xd8>)
 8004e7a:	1dfb      	adds	r3, r7, #7
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	001c      	movs	r4, r3
 8004e80:	230f      	movs	r3, #15
 8004e82:	4023      	ands	r3, r4
 8004e84:	3b08      	subs	r3, #8
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	3306      	adds	r3, #6
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	18c3      	adds	r3, r0, r3
 8004e90:	3304      	adds	r3, #4
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	46c0      	nop			@ (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b003      	add	sp, #12
 8004e9a:	bd90      	pop	{r4, r7, pc}
 8004e9c:	e000e100 	.word	0xe000e100
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	045b      	lsls	r3, r3, #17
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d301      	bcc.n	8004ebc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e010      	b.n	8004ede <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <SysTick_Config+0x44>)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	425b      	negs	r3, r3
 8004ec8:	2103      	movs	r1, #3
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7ff ff7c 	bl	8004dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed0:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <SysTick_Config+0x44>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed6:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <SysTick_Config+0x44>)
 8004ed8:	2207      	movs	r2, #7
 8004eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	e000e010 	.word	0xe000e010

08004eec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	210f      	movs	r1, #15
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	1c02      	adds	r2, r0, #0
 8004efc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	0011      	movs	r1, r2
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7ff ff5d 	bl	8004dc8 <__NVIC_SetPriority>
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b004      	add	sp, #16
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	1dfb      	adds	r3, r7, #7
 8004f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f22:	1dfb      	adds	r3, r7, #7
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7ff ff33 	bl	8004d94 <__NVIC_EnableIRQ>
}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b002      	add	sp, #8
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff ffaf 	bl	8004ea4 <SysTick_Config>
 8004f46:	0003      	movs	r3, r0
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e04f      	b.n	8005002 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2225      	movs	r2, #37	@ 0x25
 8004f66:	5c9b      	ldrb	r3, [r3, r2]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d008      	beq.n	8004f80 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2204      	movs	r2, #4
 8004f72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	@ 0x24
 8004f78:	2100      	movs	r1, #0
 8004f7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e040      	b.n	8005002 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	210e      	movs	r1, #14
 8004f8c:	438a      	bics	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9a:	491c      	ldr	r1, [pc, #112]	@ (800500c <HAL_DMA_Abort+0xbc>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2101      	movs	r1, #1
 8004fac:	438a      	bics	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb4:	221c      	movs	r2, #28
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4091      	lsls	r1, r2
 8004fc0:	000a      	movs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe0:	490a      	ldr	r1, [pc, #40]	@ (800500c <HAL_DMA_Abort+0xbc>)
 8004fe2:	400a      	ands	r2, r1
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2225      	movs	r2, #37	@ 0x25
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	@ 0x24
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	fffffeff 	.word	0xfffffeff

08005010 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005018:	210f      	movs	r1, #15
 800501a:	187b      	adds	r3, r7, r1
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2225      	movs	r2, #37	@ 0x25
 8005024:	5c9b      	ldrb	r3, [r3, r2]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d006      	beq.n	800503a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2204      	movs	r2, #4
 8005030:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005032:	187b      	adds	r3, r7, r1
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e048      	b.n	80050cc <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	210e      	movs	r1, #14
 8005046:	438a      	bics	r2, r1
 8005048:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005064:	491d      	ldr	r1, [pc, #116]	@ (80050dc <HAL_DMA_Abort_IT+0xcc>)
 8005066:	400a      	ands	r2, r1
 8005068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506e:	221c      	movs	r2, #28
 8005070:	401a      	ands	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	2101      	movs	r1, #1
 8005078:	4091      	lsls	r1, r2
 800507a:	000a      	movs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005086:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	4910      	ldr	r1, [pc, #64]	@ (80050dc <HAL_DMA_Abort_IT+0xcc>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2225      	movs	r2, #37	@ 0x25
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2224      	movs	r2, #36	@ 0x24
 80050b6:	2100      	movs	r1, #0
 80050b8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	0010      	movs	r0, r2
 80050ca:	4798      	blx	r3
    }
  }
  return status;
 80050cc:	230f      	movs	r3, #15
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b004      	add	sp, #16
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	fffffeff 	.word	0xfffffeff

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ee:	e14d      	b.n	800538c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4091      	lsls	r1, r2
 80050fa:	000a      	movs	r2, r1
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d100      	bne.n	8005108 <HAL_GPIO_Init+0x28>
 8005106:	e13e      	b.n	8005386 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2203      	movs	r2, #3
 800510e:	4013      	ands	r3, r2
 8005110:	2b01      	cmp	r3, #1
 8005112:	d005      	beq.n	8005120 <HAL_GPIO_Init+0x40>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2203      	movs	r2, #3
 800511a:	4013      	ands	r3, r2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d130      	bne.n	8005182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	2203      	movs	r2, #3
 800512c:	409a      	lsls	r2, r3
 800512e:	0013      	movs	r3, r2
 8005130:	43da      	mvns	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4013      	ands	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	409a      	lsls	r2, r3
 8005142:	0013      	movs	r3, r2
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005156:	2201      	movs	r2, #1
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	409a      	lsls	r2, r3
 800515c:	0013      	movs	r3, r2
 800515e:	43da      	mvns	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	2201      	movs	r2, #1
 800516e:	401a      	ands	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	409a      	lsls	r2, r3
 8005174:	0013      	movs	r3, r2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2203      	movs	r2, #3
 8005188:	4013      	ands	r3, r2
 800518a:	2b03      	cmp	r3, #3
 800518c:	d017      	beq.n	80051be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2203      	movs	r2, #3
 800519a:	409a      	lsls	r2, r3
 800519c:	0013      	movs	r3, r2
 800519e:	43da      	mvns	r2, r3
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	409a      	lsls	r2, r3
 80051b0:	0013      	movs	r3, r2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2203      	movs	r2, #3
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d123      	bne.n	8005212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	58d3      	ldr	r3, [r2, r3]
 80051d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2207      	movs	r2, #7
 80051dc:	4013      	ands	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	220f      	movs	r2, #15
 80051e2:	409a      	lsls	r2, r3
 80051e4:	0013      	movs	r3, r2
 80051e6:	43da      	mvns	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2107      	movs	r1, #7
 80051f6:	400b      	ands	r3, r1
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	409a      	lsls	r2, r3
 80051fc:	0013      	movs	r3, r2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	08da      	lsrs	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3208      	adds	r2, #8
 800520c:	0092      	lsls	r2, r2, #2
 800520e:	6939      	ldr	r1, [r7, #16]
 8005210:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	409a      	lsls	r2, r3
 8005220:	0013      	movs	r3, r2
 8005222:	43da      	mvns	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4013      	ands	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2203      	movs	r2, #3
 8005230:	401a      	ands	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	409a      	lsls	r2, r3
 8005238:	0013      	movs	r3, r2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	23c0      	movs	r3, #192	@ 0xc0
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	4013      	ands	r3, r2
 8005250:	d100      	bne.n	8005254 <HAL_GPIO_Init+0x174>
 8005252:	e098      	b.n	8005386 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005254:	4a53      	ldr	r2, [pc, #332]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3318      	adds	r3, #24
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	589b      	ldr	r3, [r3, r2]
 8005260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2203      	movs	r2, #3
 8005266:	4013      	ands	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	220f      	movs	r2, #15
 800526c:	409a      	lsls	r2, r3
 800526e:	0013      	movs	r3, r2
 8005270:	43da      	mvns	r2, r3
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4013      	ands	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	23a0      	movs	r3, #160	@ 0xa0
 800527c:	05db      	lsls	r3, r3, #23
 800527e:	429a      	cmp	r2, r3
 8005280:	d019      	beq.n	80052b6 <HAL_GPIO_Init+0x1d6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a48      	ldr	r2, [pc, #288]	@ (80053a8 <HAL_GPIO_Init+0x2c8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_GPIO_Init+0x1d2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a47      	ldr	r2, [pc, #284]	@ (80053ac <HAL_GPIO_Init+0x2cc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00d      	beq.n	80052ae <HAL_GPIO_Init+0x1ce>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a46      	ldr	r2, [pc, #280]	@ (80053b0 <HAL_GPIO_Init+0x2d0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <HAL_GPIO_Init+0x1ca>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a45      	ldr	r2, [pc, #276]	@ (80053b4 <HAL_GPIO_Init+0x2d4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <HAL_GPIO_Init+0x1c6>
 80052a2:	2304      	movs	r3, #4
 80052a4:	e008      	b.n	80052b8 <HAL_GPIO_Init+0x1d8>
 80052a6:	2305      	movs	r3, #5
 80052a8:	e006      	b.n	80052b8 <HAL_GPIO_Init+0x1d8>
 80052aa:	2303      	movs	r3, #3
 80052ac:	e004      	b.n	80052b8 <HAL_GPIO_Init+0x1d8>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e002      	b.n	80052b8 <HAL_GPIO_Init+0x1d8>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_GPIO_Init+0x1d8>
 80052b6:	2300      	movs	r3, #0
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	2103      	movs	r1, #3
 80052bc:	400a      	ands	r2, r1
 80052be:	00d2      	lsls	r2, r2, #3
 80052c0:	4093      	lsls	r3, r2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052c8:	4936      	ldr	r1, [pc, #216]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	3318      	adds	r3, #24
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052d6:	4b33      	ldr	r3, [pc, #204]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	43da      	mvns	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4013      	ands	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	2380      	movs	r3, #128	@ 0x80
 80052ec:	035b      	lsls	r3, r3, #13
 80052ee:	4013      	ands	r3, r2
 80052f0:	d003      	beq.n	80052fa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052fa:	4b2a      	ldr	r3, [pc, #168]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005300:	4b28      	ldr	r3, [pc, #160]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	43da      	mvns	r2, r3
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	2380      	movs	r3, #128	@ 0x80
 8005316:	039b      	lsls	r3, r3, #14
 8005318:	4013      	ands	r3, r2
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005324:	4b1f      	ldr	r3, [pc, #124]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800532a:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 800532c:	2384      	movs	r3, #132	@ 0x84
 800532e:	58d3      	ldr	r3, [r2, r3]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	43da      	mvns	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4013      	ands	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2380      	movs	r3, #128	@ 0x80
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	4013      	ands	r3, r2
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005350:	4914      	ldr	r1, [pc, #80]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 8005352:	2284      	movs	r2, #132	@ 0x84
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005358:	4a12      	ldr	r2, [pc, #72]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 800535a:	2380      	movs	r3, #128	@ 0x80
 800535c:	58d3      	ldr	r3, [r2, r3]
 800535e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	43da      	mvns	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4013      	ands	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	2380      	movs	r3, #128	@ 0x80
 8005370:	025b      	lsls	r3, r3, #9
 8005372:	4013      	ands	r3, r2
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800537e:	4909      	ldr	r1, [pc, #36]	@ (80053a4 <HAL_GPIO_Init+0x2c4>)
 8005380:	2280      	movs	r2, #128	@ 0x80
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	3301      	adds	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	40da      	lsrs	r2, r3
 8005394:	1e13      	subs	r3, r2, #0
 8005396:	d000      	beq.n	800539a <HAL_GPIO_Init+0x2ba>
 8005398:	e6aa      	b.n	80050f0 <HAL_GPIO_Init+0x10>
  }
}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b006      	add	sp, #24
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40021800 	.word	0x40021800
 80053a8:	50000400 	.word	0x50000400
 80053ac:	50000800 	.word	0x50000800
 80053b0:	50000c00 	.word	0x50000c00
 80053b4:	50001000 	.word	0x50001000

080053b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	0008      	movs	r0, r1
 80053c2:	0011      	movs	r1, r2
 80053c4:	1cbb      	adds	r3, r7, #2
 80053c6:	1c02      	adds	r2, r0, #0
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	1c7b      	adds	r3, r7, #1
 80053cc:	1c0a      	adds	r2, r1, #0
 80053ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053d0:	1c7b      	adds	r3, r7, #1
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d8:	1cbb      	adds	r3, r7, #2
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053e0:	e003      	b.n	80053ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053e2:	1cbb      	adds	r3, r7, #2
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053ea:	46c0      	nop			@ (mov r8, r8)
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b002      	add	sp, #8
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	000a      	movs	r2, r1
 80053fc:	1cbb      	adds	r3, r7, #2
 80053fe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005406:	1cbb      	adds	r3, r7, #2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	041a      	lsls	r2, r3, #16
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	1cb9      	adds	r1, r7, #2
 8005416:	8809      	ldrh	r1, [r1, #0]
 8005418:	400b      	ands	r3, r1
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e08f      	b.n	800555a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2241      	movs	r2, #65	@ 0x41
 800543e:	5c9b      	ldrb	r3, [r3, r2]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d107      	bne.n	8005456 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2240      	movs	r2, #64	@ 0x40
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0018      	movs	r0, r3
 8005452:	f7ff f8f1 	bl	8004638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2241      	movs	r2, #65	@ 0x41
 800545a:	2124      	movs	r1, #36	@ 0x24
 800545c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	438a      	bics	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	493b      	ldr	r1, [pc, #236]	@ (8005564 <HAL_I2C_Init+0x13c>)
 8005478:	400a      	ands	r2, r1
 800547a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4938      	ldr	r1, [pc, #224]	@ (8005568 <HAL_I2C_Init+0x140>)
 8005488:	400a      	ands	r2, r1
 800548a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d108      	bne.n	80054a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2180      	movs	r1, #128	@ 0x80
 800549e:	0209      	lsls	r1, r1, #8
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	e007      	b.n	80054b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2184      	movs	r1, #132	@ 0x84
 80054b0:	0209      	lsls	r1, r1, #8
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d109      	bne.n	80054d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2180      	movs	r1, #128	@ 0x80
 80054ca:	0109      	lsls	r1, r1, #4
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	e007      	b.n	80054e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4923      	ldr	r1, [pc, #140]	@ (800556c <HAL_I2C_Init+0x144>)
 80054de:	400a      	ands	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4920      	ldr	r1, [pc, #128]	@ (8005570 <HAL_I2C_Init+0x148>)
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	491a      	ldr	r1, [pc, #104]	@ (8005568 <HAL_I2C_Init+0x140>)
 80054fe:	400a      	ands	r2, r1
 8005500:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	431a      	orrs	r2, r3
 800550c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69d9      	ldr	r1, [r3, #28]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2101      	movs	r1, #1
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2241      	movs	r2, #65	@ 0x41
 8005546:	2120      	movs	r1, #32
 8005548:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2242      	movs	r2, #66	@ 0x42
 8005554:	2100      	movs	r1, #0
 8005556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	f0ffffff 	.word	0xf0ffffff
 8005568:	ffff7fff 	.word	0xffff7fff
 800556c:	fffff7ff 	.word	0xfffff7ff
 8005570:	02008000 	.word	0x02008000

08005574 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b089      	sub	sp, #36	@ 0x24
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	000c      	movs	r4, r1
 800557e:	0010      	movs	r0, r2
 8005580:	0019      	movs	r1, r3
 8005582:	230a      	movs	r3, #10
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	1c22      	adds	r2, r4, #0
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	2308      	movs	r3, #8
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	1c02      	adds	r2, r0, #0
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	1dbb      	adds	r3, r7, #6
 8005594:	1c0a      	adds	r2, r1, #0
 8005596:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2241      	movs	r2, #65	@ 0x41
 800559c:	5c9b      	ldrb	r3, [r3, r2]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d000      	beq.n	80055a6 <HAL_I2C_Mem_Write+0x32>
 80055a4:	e10c      	b.n	80057c0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <HAL_I2C_Mem_Write+0x42>
 80055ac:	232c      	movs	r3, #44	@ 0x2c
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2280      	movs	r2, #128	@ 0x80
 80055ba:	0092      	lsls	r2, r2, #2
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e0ff      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2240      	movs	r2, #64	@ 0x40
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_I2C_Mem_Write+0x5c>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e0f8      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2240      	movs	r2, #64	@ 0x40
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055d8:	f7ff fbbc 	bl	8004d54 <HAL_GetTick>
 80055dc:	0003      	movs	r3, r0
 80055de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	0219      	lsls	r1, r3, #8
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2319      	movs	r3, #25
 80055ec:	2201      	movs	r2, #1
 80055ee:	f000 fb0b 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	1e03      	subs	r3, r0, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0e3      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2241      	movs	r2, #65	@ 0x41
 80055fe:	2121      	movs	r1, #33	@ 0x21
 8005600:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2242      	movs	r2, #66	@ 0x42
 8005606:	2140      	movs	r1, #64	@ 0x40
 8005608:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005614:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	222c      	movs	r2, #44	@ 0x2c
 800561a:	18ba      	adds	r2, r7, r2
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005626:	1dbb      	adds	r3, r7, #6
 8005628:	881c      	ldrh	r4, [r3, #0]
 800562a:	2308      	movs	r3, #8
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	881a      	ldrh	r2, [r3, #0]
 8005630:	230a      	movs	r3, #10
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	8819      	ldrh	r1, [r3, #0]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	0023      	movs	r3, r4
 8005642:	f000 f9f9 	bl	8005a38 <I2C_RequestMemoryWrite>
 8005646:	1e03      	subs	r3, r0, #0
 8005648:	d005      	beq.n	8005656 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2240      	movs	r2, #64	@ 0x40
 800564e:	2100      	movs	r1, #0
 8005650:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0b5      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565a:	b29b      	uxth	r3, r3
 800565c:	2bff      	cmp	r3, #255	@ 0xff
 800565e:	d911      	bls.n	8005684 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	22ff      	movs	r2, #255	@ 0xff
 8005664:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566a:	b2da      	uxtb	r2, r3
 800566c:	2380      	movs	r3, #128	@ 0x80
 800566e:	045c      	lsls	r4, r3, #17
 8005670:	230a      	movs	r3, #10
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	8819      	ldrh	r1, [r3, #0]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	2300      	movs	r3, #0
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	0023      	movs	r3, r4
 800567e:	f000 fc9d 	bl	8005fbc <I2C_TransferConfig>
 8005682:	e012      	b.n	80056aa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005692:	b2da      	uxtb	r2, r3
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	049c      	lsls	r4, r3, #18
 8005698:	230a      	movs	r3, #10
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	8819      	ldrh	r1, [r3, #0]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	2300      	movs	r3, #0
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	0023      	movs	r3, r4
 80056a6:	f000 fc89 	bl	8005fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 fb01 	bl	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80056b6:	1e03      	subs	r3, r0, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e081      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03a      	beq.n	800576e <HAL_I2C_Mem_Write+0x1fa>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d136      	bne.n	800576e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	0013      	movs	r3, r2
 800570a:	2200      	movs	r2, #0
 800570c:	2180      	movs	r1, #128	@ 0x80
 800570e:	f000 fa7b 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005712:	1e03      	subs	r3, r0, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e053      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	2bff      	cmp	r3, #255	@ 0xff
 8005722:	d911      	bls.n	8005748 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	22ff      	movs	r2, #255	@ 0xff
 8005728:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572e:	b2da      	uxtb	r2, r3
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	045c      	lsls	r4, r3, #17
 8005734:	230a      	movs	r3, #10
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	8819      	ldrh	r1, [r3, #0]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	2300      	movs	r3, #0
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	0023      	movs	r3, r4
 8005742:	f000 fc3b 	bl	8005fbc <I2C_TransferConfig>
 8005746:	e012      	b.n	800576e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005756:	b2da      	uxtb	r2, r3
 8005758:	2380      	movs	r3, #128	@ 0x80
 800575a:	049c      	lsls	r4, r3, #18
 800575c:	230a      	movs	r3, #10
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	8819      	ldrh	r1, [r3, #0]
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	2300      	movs	r3, #0
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	0023      	movs	r3, r4
 800576a:	f000 fc27 	bl	8005fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d198      	bne.n	80056aa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 fae0 	bl	8005d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005784:	1e03      	subs	r3, r0, #0
 8005786:	d001      	beq.n	800578c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e01a      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2220      	movs	r2, #32
 8005792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	490b      	ldr	r1, [pc, #44]	@ (80057cc <HAL_I2C_Mem_Write+0x258>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2241      	movs	r2, #65	@ 0x41
 80057a8:	2120      	movs	r1, #32
 80057aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2242      	movs	r2, #66	@ 0x42
 80057b0:	2100      	movs	r1, #0
 80057b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2240      	movs	r2, #64	@ 0x40
 80057b8:	2100      	movs	r1, #0
 80057ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b007      	add	sp, #28
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	fe00e800 	.word	0xfe00e800

080057d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b089      	sub	sp, #36	@ 0x24
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	000c      	movs	r4, r1
 80057da:	0010      	movs	r0, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	230a      	movs	r3, #10
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	1c22      	adds	r2, r4, #0
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	2308      	movs	r3, #8
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	1c02      	adds	r2, r0, #0
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	1dbb      	adds	r3, r7, #6
 80057f0:	1c0a      	adds	r2, r1, #0
 80057f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2241      	movs	r2, #65	@ 0x41
 80057f8:	5c9b      	ldrb	r3, [r3, r2]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d000      	beq.n	8005802 <HAL_I2C_Mem_Read+0x32>
 8005800:	e110      	b.n	8005a24 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <HAL_I2C_Mem_Read+0x42>
 8005808:	232c      	movs	r3, #44	@ 0x2c
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2280      	movs	r2, #128	@ 0x80
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e103      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2240      	movs	r2, #64	@ 0x40
 8005822:	5c9b      	ldrb	r3, [r3, r2]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_I2C_Mem_Read+0x5c>
 8005828:	2302      	movs	r3, #2
 800582a:	e0fc      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2240      	movs	r2, #64	@ 0x40
 8005830:	2101      	movs	r1, #1
 8005832:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005834:	f7ff fa8e 	bl	8004d54 <HAL_GetTick>
 8005838:	0003      	movs	r3, r0
 800583a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	0219      	lsls	r1, r3, #8
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2319      	movs	r3, #25
 8005848:	2201      	movs	r2, #1
 800584a:	f000 f9dd 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0e7      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2241      	movs	r2, #65	@ 0x41
 800585a:	2122      	movs	r1, #34	@ 0x22
 800585c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2242      	movs	r2, #66	@ 0x42
 8005862:	2140      	movs	r1, #64	@ 0x40
 8005864:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	222c      	movs	r2, #44	@ 0x2c
 8005876:	18ba      	adds	r2, r7, r2
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005882:	1dbb      	adds	r3, r7, #6
 8005884:	881c      	ldrh	r4, [r3, #0]
 8005886:	2308      	movs	r3, #8
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	881a      	ldrh	r2, [r3, #0]
 800588c:	230a      	movs	r3, #10
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	8819      	ldrh	r1, [r3, #0]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	0023      	movs	r3, r4
 800589e:	f000 f92f 	bl	8005b00 <I2C_RequestMemoryRead>
 80058a2:	1e03      	subs	r3, r0, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2240      	movs	r2, #64	@ 0x40
 80058aa:	2100      	movs	r1, #0
 80058ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e0b9      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2bff      	cmp	r3, #255	@ 0xff
 80058ba:	d911      	bls.n	80058e0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	22ff      	movs	r2, #255	@ 0xff
 80058c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	2380      	movs	r3, #128	@ 0x80
 80058ca:	045c      	lsls	r4, r3, #17
 80058cc:	230a      	movs	r3, #10
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	8819      	ldrh	r1, [r3, #0]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	4b56      	ldr	r3, [pc, #344]	@ (8005a30 <HAL_I2C_Mem_Read+0x260>)
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	0023      	movs	r3, r4
 80058da:	f000 fb6f 	bl	8005fbc <I2C_TransferConfig>
 80058de:	e012      	b.n	8005906 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	049c      	lsls	r4, r3, #18
 80058f4:	230a      	movs	r3, #10
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	8819      	ldrh	r1, [r3, #0]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005a30 <HAL_I2C_Mem_Read+0x260>)
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	0023      	movs	r3, r4
 8005902:	f000 fb5b 	bl	8005fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	0013      	movs	r3, r2
 8005910:	2200      	movs	r2, #0
 8005912:	2104      	movs	r1, #4
 8005914:	f000 f978 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005918:	1e03      	subs	r3, r0, #0
 800591a:	d001      	beq.n	8005920 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e082      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d03a      	beq.n	80059d2 <HAL_I2C_Mem_Read+0x202>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d136      	bne.n	80059d2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	0013      	movs	r3, r2
 800596e:	2200      	movs	r2, #0
 8005970:	2180      	movs	r1, #128	@ 0x80
 8005972:	f000 f949 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005976:	1e03      	subs	r3, r0, #0
 8005978:	d001      	beq.n	800597e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e053      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	2bff      	cmp	r3, #255	@ 0xff
 8005986:	d911      	bls.n	80059ac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	22ff      	movs	r2, #255	@ 0xff
 800598c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005992:	b2da      	uxtb	r2, r3
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	045c      	lsls	r4, r3, #17
 8005998:	230a      	movs	r3, #10
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	8819      	ldrh	r1, [r3, #0]
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	2300      	movs	r3, #0
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	0023      	movs	r3, r4
 80059a6:	f000 fb09 	bl	8005fbc <I2C_TransferConfig>
 80059aa:	e012      	b.n	80059d2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	2380      	movs	r3, #128	@ 0x80
 80059be:	049c      	lsls	r4, r3, #18
 80059c0:	230a      	movs	r3, #10
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	8819      	ldrh	r1, [r3, #0]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	2300      	movs	r3, #0
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	0023      	movs	r3, r4
 80059ce:	f000 faf5 	bl	8005fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d194      	bne.n	8005906 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	0018      	movs	r0, r3
 80059e4:	f000 f9ae 	bl	8005d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059e8:	1e03      	subs	r3, r0, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e01a      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2220      	movs	r2, #32
 80059f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	490c      	ldr	r1, [pc, #48]	@ (8005a34 <HAL_I2C_Mem_Read+0x264>)
 8005a04:	400a      	ands	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2241      	movs	r2, #65	@ 0x41
 8005a0c:	2120      	movs	r1, #32
 8005a0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2242      	movs	r2, #66	@ 0x42
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2240      	movs	r2, #64	@ 0x40
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e000      	b.n	8005a26 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
  }
}
 8005a26:	0018      	movs	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b007      	add	sp, #28
 8005a2c:	bd90      	pop	{r4, r7, pc}
 8005a2e:	46c0      	nop			@ (mov r8, r8)
 8005a30:	80002400 	.word	0x80002400
 8005a34:	fe00e800 	.word	0xfe00e800

08005a38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	000c      	movs	r4, r1
 8005a42:	0010      	movs	r0, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	250a      	movs	r5, #10
 8005a48:	197b      	adds	r3, r7, r5
 8005a4a:	1c22      	adds	r2, r4, #0
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	2308      	movs	r3, #8
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	1c02      	adds	r2, r0, #0
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	1dbb      	adds	r3, r7, #6
 8005a58:	1c0a      	adds	r2, r1, #0
 8005a5a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a5c:	1dbb      	adds	r3, r7, #6
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	2380      	movs	r3, #128	@ 0x80
 8005a64:	045c      	lsls	r4, r3, #17
 8005a66:	197b      	adds	r3, r7, r5
 8005a68:	8819      	ldrh	r1, [r3, #0]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	4b23      	ldr	r3, [pc, #140]	@ (8005afc <I2C_RequestMemoryWrite+0xc4>)
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	0023      	movs	r3, r4
 8005a72:	f000 faa3 	bl	8005fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a78:	6a39      	ldr	r1, [r7, #32]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f000 f91b 	bl	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a82:	1e03      	subs	r3, r0, #0
 8005a84:	d001      	beq.n	8005a8a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e033      	b.n	8005af2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a92:	2308      	movs	r3, #8
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aa0:	e019      	b.n	8005ad6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab6:	6a39      	ldr	r1, [r7, #32]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 f8fc 	bl	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ac0:	1e03      	subs	r3, r0, #0
 8005ac2:	d001      	beq.n	8005ac8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e014      	b.n	8005af2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac8:	2308      	movs	r3, #8
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	0013      	movs	r3, r2
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2180      	movs	r1, #128	@ 0x80
 8005ae4:	f000 f890 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005ae8:	1e03      	subs	r3, r0, #0
 8005aea:	d001      	beq.n	8005af0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b004      	add	sp, #16
 8005af8:	bdb0      	pop	{r4, r5, r7, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	80002000 	.word	0x80002000

08005b00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b00:	b5b0      	push	{r4, r5, r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	000c      	movs	r4, r1
 8005b0a:	0010      	movs	r0, r2
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	250a      	movs	r5, #10
 8005b10:	197b      	adds	r3, r7, r5
 8005b12:	1c22      	adds	r2, r4, #0
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	2308      	movs	r3, #8
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	1c02      	adds	r2, r0, #0
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	1dbb      	adds	r3, r7, #6
 8005b20:	1c0a      	adds	r2, r1, #0
 8005b22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b24:	1dbb      	adds	r3, r7, #6
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	197b      	adds	r3, r7, r5
 8005b2c:	8819      	ldrh	r1, [r3, #0]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	4b23      	ldr	r3, [pc, #140]	@ (8005bc0 <I2C_RequestMemoryRead+0xc0>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	f000 fa41 	bl	8005fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 f8b9 	bl	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b46:	1e03      	subs	r3, r0, #0
 8005b48:	d001      	beq.n	8005b4e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e033      	b.n	8005bb6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b4e:	1dbb      	adds	r3, r7, #6
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d107      	bne.n	8005b66 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b56:	2308      	movs	r3, #8
 8005b58:	18fb      	adds	r3, r7, r3
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b64:	e019      	b.n	8005b9a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b66:	2308      	movs	r3, #8
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7a:	6a39      	ldr	r1, [r7, #32]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f000 f89a 	bl	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b84:	1e03      	subs	r3, r0, #0
 8005b86:	d001      	beq.n	8005b8c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e014      	b.n	8005bb6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	0013      	movs	r3, r2
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2140      	movs	r1, #64	@ 0x40
 8005ba8:	f000 f82e 	bl	8005c08 <I2C_WaitOnFlagUntilTimeout>
 8005bac:	1e03      	subs	r3, r0, #0
 8005bae:	d001      	beq.n	8005bb4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b004      	add	sp, #16
 8005bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	80002000 	.word	0x80002000

08005bc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d103      	bne.n	8005be2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2201      	movs	r2, #1
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d007      	beq.n	8005c00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	619a      	str	r2, [r3, #24]
  }
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	1dfb      	adds	r3, r7, #7
 8005c16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c18:	e03a      	b.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f8d3 	bl	8005dcc <I2C_IsErrorOccurred>
 8005c26:	1e03      	subs	r3, r0, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e040      	b.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	d02d      	beq.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c34:	f7ff f88e 	bl	8004d54 <HAL_GetTick>
 8005c38:	0002      	movs	r2, r0
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d122      	bne.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	425a      	negs	r2, r3
 8005c5a:	4153      	adcs	r3, r2
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	001a      	movs	r2, r3
 8005c60:	1dfb      	adds	r3, r7, #7
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d113      	bne.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2241      	movs	r2, #65	@ 0x41
 8005c78:	2120      	movs	r1, #32
 8005c7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2242      	movs	r2, #66	@ 0x42
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2240      	movs	r2, #64	@ 0x40
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e00f      	b.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	425a      	negs	r2, r3
 8005ca0:	4153      	adcs	r3, r2
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	1dfb      	adds	r3, r7, #7
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d0b5      	beq.n	8005c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b004      	add	sp, #16
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cc4:	e032      	b.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 f87d 	bl	8005dcc <I2C_IsErrorOccurred>
 8005cd2:	1e03      	subs	r3, r0, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e030      	b.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	d025      	beq.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce0:	f7ff f838 	bl	8004d54 <HAL_GetTick>
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d302      	bcc.n	8005cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d11a      	bne.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d013      	beq.n	8005d2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d08:	2220      	movs	r2, #32
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2241      	movs	r2, #65	@ 0x41
 8005d14:	2120      	movs	r1, #32
 8005d16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2242      	movs	r2, #66	@ 0x42
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2240      	movs	r2, #64	@ 0x40
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e007      	b.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2202      	movs	r2, #2
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d1c5      	bne.n	8005cc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b004      	add	sp, #16
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d50:	e02f      	b.n	8005db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f000 f837 	bl	8005dcc <I2C_IsErrorOccurred>
 8005d5e:	1e03      	subs	r3, r0, #0
 8005d60:	d001      	beq.n	8005d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e02d      	b.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d66:	f7fe fff5 	bl	8004d54 <HAL_GetTick>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d302      	bcc.n	8005d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11a      	bne.n	8005db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2220      	movs	r2, #32
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d013      	beq.n	8005db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	2220      	movs	r2, #32
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2241      	movs	r2, #65	@ 0x41
 8005d9a:	2120      	movs	r1, #32
 8005d9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2242      	movs	r2, #66	@ 0x42
 8005da2:	2100      	movs	r1, #0
 8005da4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2240      	movs	r2, #64	@ 0x40
 8005daa:	2100      	movs	r1, #0
 8005dac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e007      	b.n	8005dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2220      	movs	r2, #32
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d1c8      	bne.n	8005d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b004      	add	sp, #16
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	@ 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd8:	2327      	movs	r3, #39	@ 0x27
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2210      	movs	r2, #16
 8005df4:	4013      	ands	r3, r2
 8005df6:	d100      	bne.n	8005dfa <I2C_IsErrorOccurred+0x2e>
 8005df8:	e079      	b.n	8005eee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e02:	e057      	b.n	8005eb4 <I2C_IsErrorOccurred+0xe8>
 8005e04:	2227      	movs	r2, #39	@ 0x27
 8005e06:	18bb      	adds	r3, r7, r2
 8005e08:	18ba      	adds	r2, r7, r2
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3301      	adds	r3, #1
 8005e12:	d04f      	beq.n	8005eb4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e14:	f7fe ff9e 	bl	8004d54 <HAL_GetTick>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d302      	bcc.n	8005e2a <I2C_IsErrorOccurred+0x5e>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d144      	bne.n	8005eb4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	01db      	lsls	r3, r3, #7
 8005e34:	4013      	ands	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e38:	2013      	movs	r0, #19
 8005e3a:	183b      	adds	r3, r7, r0
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	2142      	movs	r1, #66	@ 0x42
 8005e40:	5c52      	ldrb	r2, [r2, r1]
 8005e42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	401a      	ands	r2, r3
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d126      	bne.n	8005ea6 <I2C_IsErrorOccurred+0xda>
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	2380      	movs	r3, #128	@ 0x80
 8005e5c:	01db      	lsls	r3, r3, #7
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d021      	beq.n	8005ea6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005e62:	183b      	adds	r3, r7, r0
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d01d      	beq.n	8005ea6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2180      	movs	r1, #128	@ 0x80
 8005e76:	01c9      	lsls	r1, r1, #7
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e7c:	f7fe ff6a 	bl	8004d54 <HAL_GetTick>
 8005e80:	0003      	movs	r3, r0
 8005e82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e84:	e00f      	b.n	8005ea6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e86:	f7fe ff65 	bl	8004d54 <HAL_GetTick>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b19      	cmp	r3, #25
 8005e92:	d908      	bls.n	8005ea6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2220      	movs	r2, #32
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e9c:	2327      	movs	r3, #39	@ 0x27
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]

              break;
 8005ea4:	e006      	b.n	8005eb4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2220      	movs	r2, #32
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d1e8      	bne.n	8005e86 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d004      	beq.n	8005ecc <I2C_IsErrorOccurred+0x100>
 8005ec2:	2327      	movs	r3, #39	@ 0x27
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d09b      	beq.n	8005e04 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ecc:	2327      	movs	r3, #39	@ 0x27
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2220      	movs	r2, #32
 8005edc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ee6:	2327      	movs	r3, #39	@ 0x27
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4013      	ands	r3, r2
 8005efe:	d00c      	beq.n	8005f1a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2201      	movs	r2, #1
 8005f04:	4313      	orrs	r3, r2
 8005f06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2280      	movs	r2, #128	@ 0x80
 8005f0e:	0052      	lsls	r2, r2, #1
 8005f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f12:	2327      	movs	r3, #39	@ 0x27
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4013      	ands	r3, r2
 8005f22:	d00c      	beq.n	8005f3e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2208      	movs	r2, #8
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2280      	movs	r2, #128	@ 0x80
 8005f32:	00d2      	lsls	r2, r2, #3
 8005f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f36:	2327      	movs	r3, #39	@ 0x27
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	2380      	movs	r3, #128	@ 0x80
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4013      	ands	r3, r2
 8005f46:	d00c      	beq.n	8005f62 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2280      	movs	r2, #128	@ 0x80
 8005f56:	0092      	lsls	r2, r2, #2
 8005f58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f5a:	2327      	movs	r3, #39	@ 0x27
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	2201      	movs	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005f62:	2327      	movs	r3, #39	@ 0x27
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01d      	beq.n	8005fa8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff fe28 	bl	8005bc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	490e      	ldr	r1, [pc, #56]	@ (8005fb8 <I2C_IsErrorOccurred+0x1ec>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2241      	movs	r2, #65	@ 0x41
 8005f94:	2120      	movs	r1, #32
 8005f96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2242      	movs	r2, #66	@ 0x42
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2240      	movs	r2, #64	@ 0x40
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005fa8:	2327      	movs	r3, #39	@ 0x27
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	781b      	ldrb	r3, [r3, #0]
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b00a      	add	sp, #40	@ 0x28
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	fe00e800 	.word	0xfe00e800

08005fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	0008      	movs	r0, r1
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	240a      	movs	r4, #10
 8005fcc:	193b      	adds	r3, r7, r4
 8005fce:	1c02      	adds	r2, r0, #0
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	2009      	movs	r0, #9
 8005fd4:	183b      	adds	r3, r7, r0
 8005fd6:	1c0a      	adds	r2, r1, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fda:	193b      	adds	r3, r7, r4
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	059b      	lsls	r3, r3, #22
 8005fe0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fe2:	183b      	adds	r3, r7, r0
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	0419      	lsls	r1, r3, #16
 8005fe8:	23ff      	movs	r3, #255	@ 0xff
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006006:	0d51      	lsrs	r1, r2, #21
 8006008:	2280      	movs	r2, #128	@ 0x80
 800600a:	00d2      	lsls	r2, r2, #3
 800600c:	400a      	ands	r2, r1
 800600e:	4907      	ldr	r1, [pc, #28]	@ (800602c <I2C_TransferConfig+0x70>)
 8006010:	430a      	orrs	r2, r1
 8006012:	43d2      	mvns	r2, r2
 8006014:	401a      	ands	r2, r3
 8006016:	0011      	movs	r1, r2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	46bd      	mov	sp, r7
 8006026:	b007      	add	sp, #28
 8006028:	bd90      	pop	{r4, r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	03ff63ff 	.word	0x03ff63ff

08006030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2241      	movs	r2, #65	@ 0x41
 800603e:	5c9b      	ldrb	r3, [r3, r2]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b20      	cmp	r3, #32
 8006044:	d138      	bne.n	80060b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2240      	movs	r2, #64	@ 0x40
 800604a:	5c9b      	ldrb	r3, [r3, r2]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006050:	2302      	movs	r3, #2
 8006052:	e032      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2240      	movs	r2, #64	@ 0x40
 8006058:	2101      	movs	r1, #1
 800605a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2241      	movs	r2, #65	@ 0x41
 8006060:	2124      	movs	r1, #36	@ 0x24
 8006062:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2101      	movs	r1, #1
 8006070:	438a      	bics	r2, r1
 8006072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4911      	ldr	r1, [pc, #68]	@ (80060c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006080:	400a      	ands	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2101      	movs	r1, #1
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2241      	movs	r2, #65	@ 0x41
 80060a8:	2120      	movs	r1, #32
 80060aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2240      	movs	r2, #64	@ 0x40
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b002      	add	sp, #8
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	46c0      	nop			@ (mov r8, r8)
 80060c4:	ffffefff 	.word	0xffffefff

080060c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2241      	movs	r2, #65	@ 0x41
 80060d6:	5c9b      	ldrb	r3, [r3, r2]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d139      	bne.n	8006152 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2240      	movs	r2, #64	@ 0x40
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e033      	b.n	8006154 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2240      	movs	r2, #64	@ 0x40
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2241      	movs	r2, #65	@ 0x41
 80060f8:	2124      	movs	r1, #36	@ 0x24
 80060fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2101      	movs	r1, #1
 8006108:	438a      	bics	r2, r1
 800610a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a11      	ldr	r2, [pc, #68]	@ (800615c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2101      	movs	r1, #1
 800613a:	430a      	orrs	r2, r1
 800613c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2241      	movs	r2, #65	@ 0x41
 8006142:	2120      	movs	r1, #32
 8006144:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2240      	movs	r2, #64	@ 0x40
 800614a:	2100      	movs	r1, #0
 800614c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
  }
}
 8006154:	0018      	movs	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	b004      	add	sp, #16
 800615a:	bd80      	pop	{r7, pc}
 800615c:	fffff0ff 	.word	0xfffff0ff

08006160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006168:	4b19      	ldr	r3, [pc, #100]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a19      	ldr	r2, [pc, #100]	@ (80061d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800616e:	4013      	ands	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	4b17      	ldr	r3, [pc, #92]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	2380      	movs	r3, #128	@ 0x80
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d11f      	bne.n	80061c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006184:	4b14      	ldr	r3, [pc, #80]	@ (80061d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	0013      	movs	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	189b      	adds	r3, r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4912      	ldr	r1, [pc, #72]	@ (80061dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006192:	0018      	movs	r0, r3
 8006194:	f7f9 ffd2 	bl	800013c <__udivsi3>
 8006198:	0003      	movs	r3, r0
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800619e:	e008      	b.n	80061b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e001      	b.n	80061b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e009      	b.n	80061c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061b2:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	401a      	ands	r2, r3
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d0ed      	beq.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b004      	add	sp, #16
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	40007000 	.word	0x40007000
 80061d4:	fffff9ff 	.word	0xfffff9ff
 80061d8:	20000000 	.word	0x20000000
 80061dc:	000f4240 	.word	0x000f4240

080061e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80061e4:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	23e0      	movs	r3, #224	@ 0xe0
 80061ea:	01db      	lsls	r3, r3, #7
 80061ec:	4013      	ands	r3, r2
}
 80061ee:	0018      	movs	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40021000 	.word	0x40021000

080061f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f000 fb50 	bl	80068ac <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2201      	movs	r2, #1
 8006212:	4013      	ands	r3, r2
 8006214:	d100      	bne.n	8006218 <HAL_RCC_OscConfig+0x20>
 8006216:	e07c      	b.n	8006312 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006218:	4bc3      	ldr	r3, [pc, #780]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2238      	movs	r2, #56	@ 0x38
 800621e:	4013      	ands	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006222:	4bc1      	ldr	r3, [pc, #772]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	4013      	ands	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b10      	cmp	r3, #16
 8006230:	d102      	bne.n	8006238 <HAL_RCC_OscConfig+0x40>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d002      	beq.n	800623e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10b      	bne.n	8006256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623e:	4bba      	ldr	r3, [pc, #744]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2380      	movs	r3, #128	@ 0x80
 8006244:	029b      	lsls	r3, r3, #10
 8006246:	4013      	ands	r3, r2
 8006248:	d062      	beq.n	8006310 <HAL_RCC_OscConfig+0x118>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d15e      	bne.n	8006310 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e32a      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	2380      	movs	r3, #128	@ 0x80
 800625c:	025b      	lsls	r3, r3, #9
 800625e:	429a      	cmp	r2, r3
 8006260:	d107      	bne.n	8006272 <HAL_RCC_OscConfig+0x7a>
 8006262:	4bb1      	ldr	r3, [pc, #708]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4bb0      	ldr	r3, [pc, #704]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006268:	2180      	movs	r1, #128	@ 0x80
 800626a:	0249      	lsls	r1, r1, #9
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e020      	b.n	80062b4 <HAL_RCC_OscConfig+0xbc>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	23a0      	movs	r3, #160	@ 0xa0
 8006278:	02db      	lsls	r3, r3, #11
 800627a:	429a      	cmp	r2, r3
 800627c:	d10e      	bne.n	800629c <HAL_RCC_OscConfig+0xa4>
 800627e:	4baa      	ldr	r3, [pc, #680]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4ba9      	ldr	r3, [pc, #676]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006284:	2180      	movs	r1, #128	@ 0x80
 8006286:	02c9      	lsls	r1, r1, #11
 8006288:	430a      	orrs	r2, r1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	4ba6      	ldr	r3, [pc, #664]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4ba5      	ldr	r3, [pc, #660]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006292:	2180      	movs	r1, #128	@ 0x80
 8006294:	0249      	lsls	r1, r1, #9
 8006296:	430a      	orrs	r2, r1
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0xbc>
 800629c:	4ba2      	ldr	r3, [pc, #648]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80062a2:	49a2      	ldr	r1, [pc, #648]	@ (800652c <HAL_RCC_OscConfig+0x334>)
 80062a4:	400a      	ands	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	4b9f      	ldr	r3, [pc, #636]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b9e      	ldr	r3, [pc, #632]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80062ae:	49a0      	ldr	r1, [pc, #640]	@ (8006530 <HAL_RCC_OscConfig+0x338>)
 80062b0:	400a      	ands	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d014      	beq.n	80062e6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fe fd4a 	bl	8004d54 <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c6:	f7fe fd45 	bl	8004d54 <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b64      	cmp	r3, #100	@ 0x64
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e2e9      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d8:	4b93      	ldr	r3, [pc, #588]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	2380      	movs	r3, #128	@ 0x80
 80062de:	029b      	lsls	r3, r3, #10
 80062e0:	4013      	ands	r3, r2
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0xce>
 80062e4:	e015      	b.n	8006312 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fe fd35 	bl	8004d54 <HAL_GetTick>
 80062ea:	0003      	movs	r3, r0
 80062ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fe fd30 	bl	8004d54 <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	@ 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e2d4      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006302:	4b89      	ldr	r3, [pc, #548]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	4013      	ands	r3, r2
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0xf8>
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2202      	movs	r2, #2
 8006318:	4013      	ands	r3, r2
 800631a:	d100      	bne.n	800631e <HAL_RCC_OscConfig+0x126>
 800631c:	e099      	b.n	8006452 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631e:	4b82      	ldr	r3, [pc, #520]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2238      	movs	r2, #56	@ 0x38
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006328:	4b7f      	ldr	r3, [pc, #508]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2203      	movs	r2, #3
 800632e:	4013      	ands	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b10      	cmp	r3, #16
 8006336:	d102      	bne.n	800633e <HAL_RCC_OscConfig+0x146>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d002      	beq.n	8006344 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d135      	bne.n	80063b0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006344:	4b78      	ldr	r3, [pc, #480]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	2380      	movs	r3, #128	@ 0x80
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4013      	ands	r3, r2
 800634e:	d005      	beq.n	800635c <HAL_RCC_OscConfig+0x164>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e2a7      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635c:	4b72      	ldr	r3, [pc, #456]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	4a74      	ldr	r2, [pc, #464]	@ (8006534 <HAL_RCC_OscConfig+0x33c>)
 8006362:	4013      	ands	r3, r2
 8006364:	0019      	movs	r1, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	4b6e      	ldr	r3, [pc, #440]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800636e:	430a      	orrs	r2, r1
 8006370:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d112      	bne.n	800639e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006378:	4b6b      	ldr	r3, [pc, #428]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6e      	ldr	r2, [pc, #440]	@ (8006538 <HAL_RCC_OscConfig+0x340>)
 800637e:	4013      	ands	r3, r2
 8006380:	0019      	movs	r1, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	4b68      	ldr	r3, [pc, #416]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800638c:	4b66      	ldr	r3, [pc, #408]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	0adb      	lsrs	r3, r3, #11
 8006392:	2207      	movs	r2, #7
 8006394:	4013      	ands	r3, r2
 8006396:	4a69      	ldr	r2, [pc, #420]	@ (800653c <HAL_RCC_OscConfig+0x344>)
 8006398:	40da      	lsrs	r2, r3
 800639a:	4b69      	ldr	r3, [pc, #420]	@ (8006540 <HAL_RCC_OscConfig+0x348>)
 800639c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800639e:	4b69      	ldr	r3, [pc, #420]	@ (8006544 <HAL_RCC_OscConfig+0x34c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f7fe fc7a 	bl	8004c9c <HAL_InitTick>
 80063a8:	1e03      	subs	r3, r0, #0
 80063aa:	d051      	beq.n	8006450 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e27d      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d030      	beq.n	800641a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80063b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006538 <HAL_RCC_OscConfig+0x340>)
 80063be:	4013      	ands	r3, r2
 80063c0:	0019      	movs	r1, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	4b58      	ldr	r3, [pc, #352]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80063c8:	430a      	orrs	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80063cc:	4b56      	ldr	r3, [pc, #344]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4b55      	ldr	r3, [pc, #340]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80063d2:	2180      	movs	r1, #128	@ 0x80
 80063d4:	0049      	lsls	r1, r1, #1
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063da:	f7fe fcbb 	bl	8004d54 <HAL_GetTick>
 80063de:	0003      	movs	r3, r0
 80063e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e4:	f7fe fcb6 	bl	8004d54 <HAL_GetTick>
 80063e8:	0002      	movs	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e25a      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	2380      	movs	r3, #128	@ 0x80
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4013      	ands	r3, r2
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006402:	4b49      	ldr	r3, [pc, #292]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	4a4b      	ldr	r2, [pc, #300]	@ (8006534 <HAL_RCC_OscConfig+0x33c>)
 8006408:	4013      	ands	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	021a      	lsls	r2, r3, #8
 8006412:	4b45      	ldr	r3, [pc, #276]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
 8006418:	e01b      	b.n	8006452 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800641a:	4b43      	ldr	r3, [pc, #268]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b42      	ldr	r3, [pc, #264]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006420:	4949      	ldr	r1, [pc, #292]	@ (8006548 <HAL_RCC_OscConfig+0x350>)
 8006422:	400a      	ands	r2, r1
 8006424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006426:	f7fe fc95 	bl	8004d54 <HAL_GetTick>
 800642a:	0003      	movs	r3, r0
 800642c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006430:	f7fe fc90 	bl	8004d54 <HAL_GetTick>
 8006434:	0002      	movs	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e234      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006442:	4b39      	ldr	r3, [pc, #228]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	2380      	movs	r3, #128	@ 0x80
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4013      	ands	r3, r2
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0x238>
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006450:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2208      	movs	r2, #8
 8006458:	4013      	ands	r3, r2
 800645a:	d047      	beq.n	80064ec <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800645c:	4b32      	ldr	r3, [pc, #200]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2238      	movs	r2, #56	@ 0x38
 8006462:	4013      	ands	r3, r2
 8006464:	2b18      	cmp	r3, #24
 8006466:	d10a      	bne.n	800647e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006468:	4b2f      	ldr	r3, [pc, #188]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800646a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646c:	2202      	movs	r2, #2
 800646e:	4013      	ands	r3, r2
 8006470:	d03c      	beq.n	80064ec <HAL_RCC_OscConfig+0x2f4>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d138      	bne.n	80064ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e216      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d019      	beq.n	80064ba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006486:	4b28      	ldr	r3, [pc, #160]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006488:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800648a:	4b27      	ldr	r3, [pc, #156]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800648c:	2101      	movs	r1, #1
 800648e:	430a      	orrs	r2, r1
 8006490:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006492:	f7fe fc5f 	bl	8004d54 <HAL_GetTick>
 8006496:	0003      	movs	r3, r0
 8006498:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649c:	f7fe fc5a 	bl	8004d54 <HAL_GetTick>
 80064a0:	0002      	movs	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1fe      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80064b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b2:	2202      	movs	r2, #2
 80064b4:	4013      	ands	r3, r2
 80064b6:	d0f1      	beq.n	800649c <HAL_RCC_OscConfig+0x2a4>
 80064b8:	e018      	b.n	80064ec <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80064bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80064be:	4b1a      	ldr	r3, [pc, #104]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80064c0:	2101      	movs	r1, #1
 80064c2:	438a      	bics	r2, r1
 80064c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fe fc45 	bl	8004d54 <HAL_GetTick>
 80064ca:	0003      	movs	r3, r0
 80064cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d0:	f7fe fc40 	bl	8004d54 <HAL_GetTick>
 80064d4:	0002      	movs	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e1e4      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064e2:	4b11      	ldr	r3, [pc, #68]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 80064e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e6:	2202      	movs	r2, #2
 80064e8:	4013      	ands	r3, r2
 80064ea:	d1f1      	bne.n	80064d0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2204      	movs	r2, #4
 80064f2:	4013      	ands	r3, r2
 80064f4:	d100      	bne.n	80064f8 <HAL_RCC_OscConfig+0x300>
 80064f6:	e0c7      	b.n	8006688 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f8:	231f      	movs	r3, #31
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006500:	4b09      	ldr	r3, [pc, #36]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2238      	movs	r2, #56	@ 0x38
 8006506:	4013      	ands	r3, r2
 8006508:	2b20      	cmp	r3, #32
 800650a:	d11f      	bne.n	800654c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800650c:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <HAL_RCC_OscConfig+0x330>)
 800650e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006510:	2202      	movs	r2, #2
 8006512:	4013      	ands	r3, r2
 8006514:	d100      	bne.n	8006518 <HAL_RCC_OscConfig+0x320>
 8006516:	e0b7      	b.n	8006688 <HAL_RCC_OscConfig+0x490>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d000      	beq.n	8006522 <HAL_RCC_OscConfig+0x32a>
 8006520:	e0b2      	b.n	8006688 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e1c2      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	40021000 	.word	0x40021000
 800652c:	fffeffff 	.word	0xfffeffff
 8006530:	fffbffff 	.word	0xfffbffff
 8006534:	ffff80ff 	.word	0xffff80ff
 8006538:	ffffc7ff 	.word	0xffffc7ff
 800653c:	00f42400 	.word	0x00f42400
 8006540:	20000000 	.word	0x20000000
 8006544:	20000004 	.word	0x20000004
 8006548:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800654c:	4bb5      	ldr	r3, [pc, #724]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800654e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	055b      	lsls	r3, r3, #21
 8006554:	4013      	ands	r3, r2
 8006556:	d101      	bne.n	800655c <HAL_RCC_OscConfig+0x364>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <HAL_RCC_OscConfig+0x366>
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d011      	beq.n	8006586 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006562:	4bb0      	ldr	r3, [pc, #704]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006566:	4baf      	ldr	r3, [pc, #700]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006568:	2180      	movs	r1, #128	@ 0x80
 800656a:	0549      	lsls	r1, r1, #21
 800656c:	430a      	orrs	r2, r1
 800656e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006570:	4bac      	ldr	r3, [pc, #688]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006574:	2380      	movs	r3, #128	@ 0x80
 8006576:	055b      	lsls	r3, r3, #21
 8006578:	4013      	ands	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800657e:	231f      	movs	r3, #31
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006586:	4ba8      	ldr	r3, [pc, #672]	@ (8006828 <HAL_RCC_OscConfig+0x630>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	2380      	movs	r3, #128	@ 0x80
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4013      	ands	r3, r2
 8006590:	d11a      	bne.n	80065c8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006592:	4ba5      	ldr	r3, [pc, #660]	@ (8006828 <HAL_RCC_OscConfig+0x630>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4ba4      	ldr	r3, [pc, #656]	@ (8006828 <HAL_RCC_OscConfig+0x630>)
 8006598:	2180      	movs	r1, #128	@ 0x80
 800659a:	0049      	lsls	r1, r1, #1
 800659c:	430a      	orrs	r2, r1
 800659e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80065a0:	f7fe fbd8 	bl	8004d54 <HAL_GetTick>
 80065a4:	0003      	movs	r3, r0
 80065a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065aa:	f7fe fbd3 	bl	8004d54 <HAL_GetTick>
 80065ae:	0002      	movs	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e177      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065bc:	4b9a      	ldr	r3, [pc, #616]	@ (8006828 <HAL_RCC_OscConfig+0x630>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	2380      	movs	r3, #128	@ 0x80
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d106      	bne.n	80065de <HAL_RCC_OscConfig+0x3e6>
 80065d0:	4b94      	ldr	r3, [pc, #592]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80065d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065d4:	4b93      	ldr	r3, [pc, #588]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80065d6:	2101      	movs	r1, #1
 80065d8:	430a      	orrs	r2, r1
 80065da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80065dc:	e01c      	b.n	8006618 <HAL_RCC_OscConfig+0x420>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d10c      	bne.n	8006600 <HAL_RCC_OscConfig+0x408>
 80065e6:	4b8f      	ldr	r3, [pc, #572]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80065e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065ea:	4b8e      	ldr	r3, [pc, #568]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80065ec:	2104      	movs	r1, #4
 80065ee:	430a      	orrs	r2, r1
 80065f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80065f2:	4b8c      	ldr	r3, [pc, #560]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80065f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80065f8:	2101      	movs	r1, #1
 80065fa:	430a      	orrs	r2, r1
 80065fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80065fe:	e00b      	b.n	8006618 <HAL_RCC_OscConfig+0x420>
 8006600:	4b88      	ldr	r3, [pc, #544]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006604:	4b87      	ldr	r3, [pc, #540]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006606:	2101      	movs	r1, #1
 8006608:	438a      	bics	r2, r1
 800660a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800660c:	4b85      	ldr	r3, [pc, #532]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800660e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006610:	4b84      	ldr	r3, [pc, #528]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006612:	2104      	movs	r1, #4
 8006614:	438a      	bics	r2, r1
 8006616:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d014      	beq.n	800664a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fe fb98 	bl	8004d54 <HAL_GetTick>
 8006624:	0003      	movs	r3, r0
 8006626:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006628:	e009      	b.n	800663e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662a:	f7fe fb93 	bl	8004d54 <HAL_GetTick>
 800662e:	0002      	movs	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	4a7d      	ldr	r2, [pc, #500]	@ (800682c <HAL_RCC_OscConfig+0x634>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e136      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663e:	4b79      	ldr	r3, [pc, #484]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006642:	2202      	movs	r2, #2
 8006644:	4013      	ands	r3, r2
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x432>
 8006648:	e013      	b.n	8006672 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7fe fb83 	bl	8004d54 <HAL_GetTick>
 800664e:	0003      	movs	r3, r0
 8006650:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006652:	e009      	b.n	8006668 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006654:	f7fe fb7e 	bl	8004d54 <HAL_GetTick>
 8006658:	0002      	movs	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	4a73      	ldr	r2, [pc, #460]	@ (800682c <HAL_RCC_OscConfig+0x634>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e121      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006668:	4b6e      	ldr	r3, [pc, #440]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800666a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666c:	2202      	movs	r2, #2
 800666e:	4013      	ands	r3, r2
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006672:	231f      	movs	r3, #31
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800667c:	4b69      	ldr	r3, [pc, #420]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800667e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006680:	4b68      	ldr	r3, [pc, #416]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006682:	496b      	ldr	r1, [pc, #428]	@ (8006830 <HAL_RCC_OscConfig+0x638>)
 8006684:	400a      	ands	r2, r1
 8006686:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2220      	movs	r2, #32
 800668e:	4013      	ands	r3, r2
 8006690:	d039      	beq.n	8006706 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800669a:	4b62      	ldr	r3, [pc, #392]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b61      	ldr	r3, [pc, #388]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80066a0:	2180      	movs	r1, #128	@ 0x80
 80066a2:	03c9      	lsls	r1, r1, #15
 80066a4:	430a      	orrs	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fe fb54 	bl	8004d54 <HAL_GetTick>
 80066ac:	0003      	movs	r3, r0
 80066ae:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066b2:	f7fe fb4f 	bl	8004d54 <HAL_GetTick>
 80066b6:	0002      	movs	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e0f3      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066c4:	4b57      	ldr	r3, [pc, #348]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	041b      	lsls	r3, r3, #16
 80066cc:	4013      	ands	r3, r2
 80066ce:	d0f0      	beq.n	80066b2 <HAL_RCC_OscConfig+0x4ba>
 80066d0:	e019      	b.n	8006706 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066d2:	4b54      	ldr	r3, [pc, #336]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b53      	ldr	r3, [pc, #332]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80066d8:	4956      	ldr	r1, [pc, #344]	@ (8006834 <HAL_RCC_OscConfig+0x63c>)
 80066da:	400a      	ands	r2, r1
 80066dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066de:	f7fe fb39 	bl	8004d54 <HAL_GetTick>
 80066e2:	0003      	movs	r3, r0
 80066e4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066e8:	f7fe fb34 	bl	8004d54 <HAL_GetTick>
 80066ec:	0002      	movs	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e0d8      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	2380      	movs	r3, #128	@ 0x80
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	4013      	ands	r3, r2
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d100      	bne.n	8006710 <HAL_RCC_OscConfig+0x518>
 800670e:	e0cc      	b.n	80068aa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006710:	4b44      	ldr	r3, [pc, #272]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2238      	movs	r2, #56	@ 0x38
 8006716:	4013      	ands	r3, r2
 8006718:	2b10      	cmp	r3, #16
 800671a:	d100      	bne.n	800671e <HAL_RCC_OscConfig+0x526>
 800671c:	e07b      	b.n	8006816 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d156      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006726:	4b3f      	ldr	r3, [pc, #252]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b3e      	ldr	r3, [pc, #248]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800672c:	4942      	ldr	r1, [pc, #264]	@ (8006838 <HAL_RCC_OscConfig+0x640>)
 800672e:	400a      	ands	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006732:	f7fe fb0f 	bl	8004d54 <HAL_GetTick>
 8006736:	0003      	movs	r3, r0
 8006738:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673c:	f7fe fb0a 	bl	8004d54 <HAL_GetTick>
 8006740:	0002      	movs	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e0ae      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800674e:	4b35      	ldr	r3, [pc, #212]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	2380      	movs	r3, #128	@ 0x80
 8006754:	049b      	lsls	r3, r3, #18
 8006756:	4013      	ands	r3, r2
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800675a:	4b32      	ldr	r3, [pc, #200]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4a37      	ldr	r2, [pc, #220]	@ (800683c <HAL_RCC_OscConfig+0x644>)
 8006760:	4013      	ands	r3, r2
 8006762:	0019      	movs	r1, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	431a      	orrs	r2, r3
 8006788:	4b26      	ldr	r3, [pc, #152]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800678a:	430a      	orrs	r2, r1
 800678c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800678e:	4b25      	ldr	r3, [pc, #148]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b24      	ldr	r3, [pc, #144]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 8006794:	2180      	movs	r1, #128	@ 0x80
 8006796:	0449      	lsls	r1, r1, #17
 8006798:	430a      	orrs	r2, r1
 800679a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800679c:	4b21      	ldr	r3, [pc, #132]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	4b20      	ldr	r3, [pc, #128]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80067a2:	2180      	movs	r1, #128	@ 0x80
 80067a4:	0549      	lsls	r1, r1, #21
 80067a6:	430a      	orrs	r2, r1
 80067a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067aa:	f7fe fad3 	bl	8004d54 <HAL_GetTick>
 80067ae:	0003      	movs	r3, r0
 80067b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fe face 	bl	8004d54 <HAL_GetTick>
 80067b8:	0002      	movs	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e072      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c6:	4b17      	ldr	r3, [pc, #92]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	049b      	lsls	r3, r3, #18
 80067ce:	4013      	ands	r3, r2
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x5bc>
 80067d2:	e06a      	b.n	80068aa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d4:	4b13      	ldr	r3, [pc, #76]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b12      	ldr	r3, [pc, #72]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80067da:	4917      	ldr	r1, [pc, #92]	@ (8006838 <HAL_RCC_OscConfig+0x640>)
 80067dc:	400a      	ands	r2, r1
 80067de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e0:	f7fe fab8 	bl	8004d54 <HAL_GetTick>
 80067e4:	0003      	movs	r3, r0
 80067e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fe fab3 	bl	8004d54 <HAL_GetTick>
 80067ee:	0002      	movs	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e057      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067fc:	4b09      	ldr	r3, [pc, #36]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	2380      	movs	r3, #128	@ 0x80
 8006802:	049b      	lsls	r3, r3, #18
 8006804:	4013      	ands	r3, r2
 8006806:	d1f0      	bne.n	80067ea <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006808:	4b06      	ldr	r3, [pc, #24]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <HAL_RCC_OscConfig+0x62c>)
 800680e:	490c      	ldr	r1, [pc, #48]	@ (8006840 <HAL_RCC_OscConfig+0x648>)
 8006810:	400a      	ands	r2, r1
 8006812:	60da      	str	r2, [r3, #12]
 8006814:	e049      	b.n	80068aa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d112      	bne.n	8006844 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e044      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	40021000 	.word	0x40021000
 8006828:	40007000 	.word	0x40007000
 800682c:	00001388 	.word	0x00001388
 8006830:	efffffff 	.word	0xefffffff
 8006834:	ffbfffff 	.word	0xffbfffff
 8006838:	feffffff 	.word	0xfeffffff
 800683c:	11c1808c 	.word	0x11c1808c
 8006840:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006844:	4b1b      	ldr	r3, [pc, #108]	@ (80068b4 <HAL_RCC_OscConfig+0x6bc>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2203      	movs	r2, #3
 800684e:	401a      	ands	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	429a      	cmp	r2, r3
 8006856:	d126      	bne.n	80068a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2270      	movs	r2, #112	@ 0x70
 800685c:	401a      	ands	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d11f      	bne.n	80068a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	23fe      	movs	r3, #254	@ 0xfe
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	401a      	ands	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d116      	bne.n	80068a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	23f8      	movs	r3, #248	@ 0xf8
 800687c:	039b      	lsls	r3, r3, #14
 800687e:	401a      	ands	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d10e      	bne.n	80068a6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	23e0      	movs	r3, #224	@ 0xe0
 800688c:	051b      	lsls	r3, r3, #20
 800688e:	401a      	ands	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d106      	bne.n	80068a6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	0f5b      	lsrs	r3, r3, #29
 800689c:	075a      	lsls	r2, r3, #29
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d001      	beq.n	80068aa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	0018      	movs	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b008      	add	sp, #32
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40021000 	.word	0x40021000

080068b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0e9      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068cc:	4b76      	ldr	r3, [pc, #472]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2207      	movs	r2, #7
 80068d2:	4013      	ands	r3, r2
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d91e      	bls.n	8006918 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068da:	4b73      	ldr	r3, [pc, #460]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2207      	movs	r2, #7
 80068e0:	4393      	bics	r3, r2
 80068e2:	0019      	movs	r1, r3
 80068e4:	4b70      	ldr	r3, [pc, #448]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068ec:	f7fe fa32 	bl	8004d54 <HAL_GetTick>
 80068f0:	0003      	movs	r3, r0
 80068f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068f4:	e009      	b.n	800690a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f6:	f7fe fa2d 	bl	8004d54 <HAL_GetTick>
 80068fa:	0002      	movs	r2, r0
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	4a6a      	ldr	r2, [pc, #424]	@ (8006aac <HAL_RCC_ClockConfig+0x1f4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d901      	bls.n	800690a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e0ca      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800690a:	4b67      	ldr	r3, [pc, #412]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2207      	movs	r2, #7
 8006910:	4013      	ands	r3, r2
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d1ee      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2202      	movs	r2, #2
 800691e:	4013      	ands	r3, r2
 8006920:	d015      	beq.n	800694e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2204      	movs	r2, #4
 8006928:	4013      	ands	r3, r2
 800692a:	d006      	beq.n	800693a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800692c:	4b60      	ldr	r3, [pc, #384]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	4b5f      	ldr	r3, [pc, #380]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8006932:	21e0      	movs	r1, #224	@ 0xe0
 8006934:	01c9      	lsls	r1, r1, #7
 8006936:	430a      	orrs	r2, r1
 8006938:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1fc>)
 8006940:	4013      	ands	r3, r2
 8006942:	0019      	movs	r1, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	4b59      	ldr	r3, [pc, #356]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800694a:	430a      	orrs	r2, r1
 800694c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2201      	movs	r2, #1
 8006954:	4013      	ands	r3, r2
 8006956:	d057      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006960:	4b53      	ldr	r3, [pc, #332]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	2380      	movs	r3, #128	@ 0x80
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	4013      	ands	r3, r2
 800696a:	d12b      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e097      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d107      	bne.n	8006988 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006978:	4b4d      	ldr	r3, [pc, #308]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2380      	movs	r3, #128	@ 0x80
 800697e:	049b      	lsls	r3, r3, #18
 8006980:	4013      	ands	r3, r2
 8006982:	d11f      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e08b      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d107      	bne.n	80069a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006990:	4b47      	ldr	r3, [pc, #284]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	2380      	movs	r3, #128	@ 0x80
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	4013      	ands	r3, r2
 800699a:	d113      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e07f      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d106      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069a8:	4b41      	ldr	r3, [pc, #260]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80069aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ac:	2202      	movs	r2, #2
 80069ae:	4013      	ands	r3, r2
 80069b0:	d108      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e074      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80069b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ba:	2202      	movs	r2, #2
 80069bc:	4013      	ands	r3, r2
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e06d      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069c4:	4b3a      	ldr	r3, [pc, #232]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2207      	movs	r2, #7
 80069ca:	4393      	bics	r3, r2
 80069cc:	0019      	movs	r1, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	4b37      	ldr	r3, [pc, #220]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d8:	f7fe f9bc 	bl	8004d54 <HAL_GetTick>
 80069dc:	0003      	movs	r3, r0
 80069de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e0:	e009      	b.n	80069f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e2:	f7fe f9b7 	bl	8004d54 <HAL_GetTick>
 80069e6:	0002      	movs	r2, r0
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	4a2f      	ldr	r2, [pc, #188]	@ (8006aac <HAL_RCC_ClockConfig+0x1f4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e054      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f6:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2238      	movs	r2, #56	@ 0x38
 80069fc:	401a      	ands	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d1ec      	bne.n	80069e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a08:	4b27      	ldr	r3, [pc, #156]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2207      	movs	r2, #7
 8006a0e:	4013      	ands	r3, r2
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d21e      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a16:	4b24      	ldr	r3, [pc, #144]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	4393      	bics	r3, r2
 8006a1e:	0019      	movs	r1, r3
 8006a20:	4b21      	ldr	r3, [pc, #132]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a28:	f7fe f994 	bl	8004d54 <HAL_GetTick>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a30:	e009      	b.n	8006a46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a32:	f7fe f98f 	bl	8004d54 <HAL_GetTick>
 8006a36:	0002      	movs	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <HAL_RCC_ClockConfig+0x1f4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e02c      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a46:	4b18      	ldr	r3, [pc, #96]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2207      	movs	r2, #7
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d1ee      	bne.n	8006a32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a5e:	4b14      	ldr	r3, [pc, #80]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <HAL_RCC_ClockConfig+0x200>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	0019      	movs	r1, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	4b10      	ldr	r3, [pc, #64]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a72:	f000 f829 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8006a76:	0001      	movs	r1, r0
 8006a78:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	220f      	movs	r2, #15
 8006a80:	401a      	ands	r2, r3
 8006a82:	4b0e      	ldr	r3, [pc, #56]	@ (8006abc <HAL_RCC_ClockConfig+0x204>)
 8006a84:	0092      	lsls	r2, r2, #2
 8006a86:	58d3      	ldr	r3, [r2, r3]
 8006a88:	221f      	movs	r2, #31
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	000a      	movs	r2, r1
 8006a8e:	40da      	lsrs	r2, r3
 8006a90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <HAL_RCC_ClockConfig+0x208>)
 8006a92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_RCC_ClockConfig+0x20c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7fe f8ff 	bl	8004c9c <HAL_InitTick>
 8006a9e:	0003      	movs	r3, r0
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b004      	add	sp, #16
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40022000 	.word	0x40022000
 8006aac:	00001388 	.word	0x00001388
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	fffff0ff 	.word	0xfffff0ff
 8006ab8:	ffff8fff 	.word	0xffff8fff
 8006abc:	0800e494 	.word	0x0800e494
 8006ac0:	20000000 	.word	0x20000000
 8006ac4:	20000004 	.word	0x20000004

08006ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ace:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2238      	movs	r2, #56	@ 0x38
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d10f      	bne.n	8006af8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006ad8:	4b39      	ldr	r3, [pc, #228]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	0adb      	lsrs	r3, r3, #11
 8006ade:	2207      	movs	r2, #7
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	409a      	lsls	r2, r3
 8006ae6:	0013      	movs	r3, r2
 8006ae8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	4835      	ldr	r0, [pc, #212]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006aee:	f7f9 fb25 	bl	800013c <__udivsi3>
 8006af2:	0003      	movs	r3, r0
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	e05d      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af8:	4b31      	ldr	r3, [pc, #196]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2238      	movs	r2, #56	@ 0x38
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d102      	bne.n	8006b0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b04:	4b30      	ldr	r3, [pc, #192]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	e054      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2238      	movs	r2, #56	@ 0x38
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d138      	bne.n	8006b88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006b16:	4b2a      	ldr	r3, [pc, #168]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b20:	4b27      	ldr	r3, [pc, #156]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	2207      	movs	r2, #7
 8006b28:	4013      	ands	r3, r2
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d10d      	bne.n	8006b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4824      	ldr	r0, [pc, #144]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b38:	f7f9 fb00 	bl	800013c <__udivsi3>
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	0019      	movs	r1, r3
 8006b40:	4b1f      	ldr	r3, [pc, #124]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	227f      	movs	r2, #127	@ 0x7f
 8006b48:	4013      	ands	r3, r2
 8006b4a:	434b      	muls	r3, r1
 8006b4c:	617b      	str	r3, [r7, #20]
        break;
 8006b4e:	e00d      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	481c      	ldr	r0, [pc, #112]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b54:	f7f9 faf2 	bl	800013c <__udivsi3>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	0019      	movs	r1, r3
 8006b5c:	4b18      	ldr	r3, [pc, #96]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	227f      	movs	r2, #127	@ 0x7f
 8006b64:	4013      	ands	r3, r2
 8006b66:	434b      	muls	r3, r1
 8006b68:	617b      	str	r3, [r7, #20]
        break;
 8006b6a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006b6c:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	0f5b      	lsrs	r3, r3, #29
 8006b72:	2207      	movs	r2, #7
 8006b74:	4013      	ands	r3, r2
 8006b76:	3301      	adds	r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	6978      	ldr	r0, [r7, #20]
 8006b7e:	f7f9 fadd 	bl	800013c <__udivsi3>
 8006b82:	0003      	movs	r3, r0
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	e015      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b88:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2238      	movs	r2, #56	@ 0x38
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d103      	bne.n	8006b9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	e00b      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b9c:	4b08      	ldr	r3, [pc, #32]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2238      	movs	r2, #56	@ 0x38
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b18      	cmp	r3, #24
 8006ba6:	d103      	bne.n	8006bb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006ba8:	23fa      	movs	r3, #250	@ 0xfa
 8006baa:	01db      	lsls	r3, r3, #7
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	e001      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bb4:	693b      	ldr	r3, [r7, #16]
}
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	b006      	add	sp, #24
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	00f42400 	.word	0x00f42400
 8006bc8:	007a1200 	.word	0x007a1200

08006bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd0:	4b02      	ldr	r3, [pc, #8]	@ (8006bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	20000000 	.word	0x20000000

08006be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be0:	b5b0      	push	{r4, r5, r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006be4:	f7ff fff2 	bl	8006bcc <HAL_RCC_GetHCLKFreq>
 8006be8:	0004      	movs	r4, r0
 8006bea:	f7ff faf9 	bl	80061e0 <LL_RCC_GetAPB1Prescaler>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	0b1a      	lsrs	r2, r3, #12
 8006bf2:	4b05      	ldr	r3, [pc, #20]	@ (8006c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bf4:	0092      	lsls	r2, r2, #2
 8006bf6:	58d3      	ldr	r3, [r2, r3]
 8006bf8:	221f      	movs	r2, #31
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	40dc      	lsrs	r4, r3
 8006bfe:	0023      	movs	r3, r4
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bdb0      	pop	{r4, r5, r7, pc}
 8006c06:	46c0      	nop			@ (mov r8, r8)
 8006c08:	0800e4d4 	.word	0x0800e4d4

08006c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006c14:	2313      	movs	r3, #19
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c1c:	2312      	movs	r3, #18
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d100      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006c30:	e0ad      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c32:	2011      	movs	r0, #17
 8006c34:	183b      	adds	r3, r7, r0
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c3a:	4b47      	ldr	r3, [pc, #284]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c3e:	2380      	movs	r3, #128	@ 0x80
 8006c40:	055b      	lsls	r3, r3, #21
 8006c42:	4013      	ands	r3, r2
 8006c44:	d110      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c46:	4b44      	ldr	r3, [pc, #272]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c4a:	4b43      	ldr	r3, [pc, #268]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c4c:	2180      	movs	r1, #128	@ 0x80
 8006c4e:	0549      	lsls	r1, r1, #21
 8006c50:	430a      	orrs	r2, r1
 8006c52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c54:	4b40      	ldr	r3, [pc, #256]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	055b      	lsls	r3, r3, #21
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c62:	183b      	adds	r3, r7, r0
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c68:	4b3c      	ldr	r3, [pc, #240]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c6e:	2180      	movs	r1, #128	@ 0x80
 8006c70:	0049      	lsls	r1, r1, #1
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c76:	f7fe f86d 	bl	8004d54 <HAL_GetTick>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fe f868 	bl	8004d54 <HAL_GetTick>
 8006c84:	0002      	movs	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d904      	bls.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006c8e:	2313      	movs	r3, #19
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	2203      	movs	r2, #3
 8006c94:	701a      	strb	r2, [r3, #0]
        break;
 8006c96:	e005      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c98:	4b30      	ldr	r3, [pc, #192]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2380      	movs	r3, #128	@ 0x80
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d0ed      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006ca4:	2313      	movs	r3, #19
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d15e      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cae:	4b2a      	ldr	r3, [pc, #168]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cb2:	23c0      	movs	r3, #192	@ 0xc0
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d019      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d014      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cca:	4b23      	ldr	r3, [pc, #140]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cce:	4a24      	ldr	r2, [pc, #144]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cd4:	4b20      	ldr	r3, [pc, #128]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cda:	2180      	movs	r1, #128	@ 0x80
 8006cdc:	0249      	lsls	r1, r1, #9
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ce4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ce8:	491e      	ldr	r1, [pc, #120]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006cea:	400a      	ands	r2, r1
 8006cec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cee:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	d016      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fe f82a 	bl	8004d54 <HAL_GetTick>
 8006d00:	0003      	movs	r3, r0
 8006d02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d04:	e00c      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fe f825 	bl	8004d54 <HAL_GetTick>
 8006d0a:	0002      	movs	r2, r0
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	4a15      	ldr	r2, [pc, #84]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d904      	bls.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006d16:	2313      	movs	r3, #19
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	701a      	strb	r2, [r3, #0]
            break;
 8006d1e:	e004      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d20:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d24:	2202      	movs	r2, #2
 8006d26:	4013      	ands	r3, r2
 8006d28:	d0ed      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006d2a:	2313      	movs	r3, #19
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d34:	4b08      	ldr	r3, [pc, #32]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d38:	4a09      	ldr	r2, [pc, #36]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	0019      	movs	r1, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d42:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d44:	430a      	orrs	r2, r1
 8006d46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d48:	e016      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d4a:	2312      	movs	r3, #18
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	2213      	movs	r2, #19
 8006d50:	18ba      	adds	r2, r7, r2
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	e00f      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	40007000 	.word	0x40007000
 8006d60:	fffffcff 	.word	0xfffffcff
 8006d64:	fffeffff 	.word	0xfffeffff
 8006d68:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	2312      	movs	r3, #18
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	2213      	movs	r2, #19
 8006d72:	18ba      	adds	r2, r7, r2
 8006d74:	7812      	ldrb	r2, [r2, #0]
 8006d76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d78:	2311      	movs	r3, #17
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d105      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d82:	4bb6      	ldr	r3, [pc, #728]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d86:	4bb5      	ldr	r3, [pc, #724]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d88:	49b5      	ldr	r1, [pc, #724]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2201      	movs	r2, #1
 8006d94:	4013      	ands	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d98:	4bb0      	ldr	r3, [pc, #704]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	4393      	bics	r3, r2
 8006da0:	0019      	movs	r1, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	4bad      	ldr	r3, [pc, #692]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006da8:	430a      	orrs	r2, r1
 8006daa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4013      	ands	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006db6:	4ba9      	ldr	r3, [pc, #676]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	220c      	movs	r2, #12
 8006dbc:	4393      	bics	r3, r2
 8006dbe:	0019      	movs	r1, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	4ba5      	ldr	r3, [pc, #660]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2204      	movs	r2, #4
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd8:	2230      	movs	r2, #48	@ 0x30
 8006dda:	4393      	bics	r3, r2
 8006ddc:	0019      	movs	r1, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	4b9e      	ldr	r3, [pc, #632]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006de4:	430a      	orrs	r2, r1
 8006de6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2210      	movs	r2, #16
 8006dee:	4013      	ands	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006df2:	4b9a      	ldr	r3, [pc, #616]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df6:	4a9b      	ldr	r2, [pc, #620]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	4b96      	ldr	r3, [pc, #600]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e02:	430a      	orrs	r2, r1
 8006e04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	015b      	lsls	r3, r3, #5
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006e12:	4b92      	ldr	r3, [pc, #584]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e16:	4a94      	ldr	r2, [pc, #592]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695a      	ldr	r2, [r3, #20]
 8006e20:	4b8e      	ldr	r3, [pc, #568]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e22:	430a      	orrs	r2, r1
 8006e24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	2380      	movs	r3, #128	@ 0x80
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d009      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e32:	4b8a      	ldr	r3, [pc, #552]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e36:	4a8d      	ldr	r2, [pc, #564]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e40:	4b86      	ldr	r3, [pc, #536]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e42:	430a      	orrs	r2, r1
 8006e44:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	2380      	movs	r3, #128	@ 0x80
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e52:	4b82      	ldr	r3, [pc, #520]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e56:	4a86      	ldr	r2, [pc, #536]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	0019      	movs	r1, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e60:	4b7e      	ldr	r3, [pc, #504]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e62:	430a      	orrs	r2, r1
 8006e64:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d009      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e70:	4b7a      	ldr	r3, [pc, #488]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e74:	4a7f      	ldr	r2, [pc, #508]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	0019      	movs	r1, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	4b77      	ldr	r3, [pc, #476]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e80:	430a      	orrs	r2, r1
 8006e82:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2240      	movs	r2, #64	@ 0x40
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e8e:	4b73      	ldr	r3, [pc, #460]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	4a79      	ldr	r2, [pc, #484]	@ (8007078 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	0019      	movs	r1, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	2380      	movs	r3, #128	@ 0x80
 8006ea8:	01db      	lsls	r3, r3, #7
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d015      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eae:	4b6b      	ldr	r3, [pc, #428]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	0899      	lsrs	r1, r3, #2
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eba:	4b68      	ldr	r3, [pc, #416]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec4:	2380      	movs	r3, #128	@ 0x80
 8006ec6:	05db      	lsls	r3, r3, #23
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d106      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006ecc:	4b63      	ldr	r3, [pc, #396]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	4b62      	ldr	r3, [pc, #392]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ed2:	2180      	movs	r1, #128	@ 0x80
 8006ed4:	0249      	lsls	r1, r1, #9
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	031b      	lsls	r3, r3, #12
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eea:	2240      	movs	r2, #64	@ 0x40
 8006eec:	4393      	bics	r3, r2
 8006eee:	0019      	movs	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef4:	4b59      	ldr	r3, [pc, #356]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	2380      	movs	r3, #128	@ 0x80
 8006f00:	039b      	lsls	r3, r3, #14
 8006f02:	4013      	ands	r3, r2
 8006f04:	d016      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006f06:	4b55      	ldr	r3, [pc, #340]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	0019      	movs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f14:	4b51      	ldr	r3, [pc, #324]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f16:	430a      	orrs	r2, r1
 8006f18:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1e:	2380      	movs	r3, #128	@ 0x80
 8006f20:	03db      	lsls	r3, r3, #15
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d106      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f26:	4b4d      	ldr	r3, [pc, #308]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f2c:	2180      	movs	r1, #128	@ 0x80
 8006f2e:	0449      	lsls	r1, r1, #17
 8006f30:	430a      	orrs	r2, r1
 8006f32:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	2380      	movs	r3, #128	@ 0x80
 8006f3a:	03db      	lsls	r3, r3, #15
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	d016      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006f40:	4b46      	ldr	r3, [pc, #280]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f44:	4a4e      	ldr	r2, [pc, #312]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	0019      	movs	r1, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f4e:	4b43      	ldr	r3, [pc, #268]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f50:	430a      	orrs	r2, r1
 8006f52:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f58:	2380      	movs	r3, #128	@ 0x80
 8006f5a:	045b      	lsls	r3, r3, #17
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d106      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f60:	4b3e      	ldr	r3, [pc, #248]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	4b3d      	ldr	r3, [pc, #244]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f66:	2180      	movs	r1, #128	@ 0x80
 8006f68:	0449      	lsls	r1, r1, #17
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	2380      	movs	r3, #128	@ 0x80
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	4013      	ands	r3, r2
 8006f78:	d014      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006f7a:	4b38      	ldr	r3, [pc, #224]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7e:	2203      	movs	r2, #3
 8006f80:	4393      	bics	r3, r2
 8006f82:	0019      	movs	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	4b34      	ldr	r3, [pc, #208]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f96:	4b31      	ldr	r3, [pc, #196]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	4b30      	ldr	r3, [pc, #192]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f9c:	2180      	movs	r1, #128	@ 0x80
 8006f9e:	0249      	lsls	r1, r1, #9
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2380      	movs	r3, #128	@ 0x80
 8006faa:	019b      	lsls	r3, r3, #6
 8006fac:	4013      	ands	r3, r2
 8006fae:	d014      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb4:	220c      	movs	r2, #12
 8006fb6:	4393      	bics	r3, r2
 8006fb8:	0019      	movs	r1, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fbe:	4b27      	ldr	r3, [pc, #156]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d106      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006fcc:	4b23      	ldr	r3, [pc, #140]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	4b22      	ldr	r3, [pc, #136]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fd2:	2180      	movs	r1, #128	@ 0x80
 8006fd4:	0249      	lsls	r1, r1, #9
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	2380      	movs	r3, #128	@ 0x80
 8006fe0:	045b      	lsls	r3, r3, #17
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d016      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fea:	4a22      	ldr	r2, [pc, #136]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	0019      	movs	r1, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ff4:	4b19      	ldr	r3, [pc, #100]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ffe:	2380      	movs	r3, #128	@ 0x80
 8007000:	019b      	lsls	r3, r3, #6
 8007002:	429a      	cmp	r2, r3
 8007004:	d106      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007006:	4b15      	ldr	r3, [pc, #84]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	4b14      	ldr	r3, [pc, #80]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800700c:	2180      	movs	r1, #128	@ 0x80
 800700e:	0449      	lsls	r1, r1, #17
 8007010:	430a      	orrs	r2, r1
 8007012:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	049b      	lsls	r3, r3, #18
 800701c:	4013      	ands	r3, r2
 800701e:	d016      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007020:	4b0e      	ldr	r3, [pc, #56]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007024:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007026:	4013      	ands	r3, r2
 8007028:	0019      	movs	r1, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800702e:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007030:	430a      	orrs	r2, r1
 8007032:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007038:	2380      	movs	r3, #128	@ 0x80
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	429a      	cmp	r2, r3
 800703e:	d106      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007040:	4b06      	ldr	r3, [pc, #24]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	4b05      	ldr	r3, [pc, #20]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007046:	2180      	movs	r1, #128	@ 0x80
 8007048:	0449      	lsls	r1, r1, #17
 800704a:	430a      	orrs	r2, r1
 800704c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800704e:	2312      	movs	r3, #18
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	781b      	ldrb	r3, [r3, #0]
}
 8007054:	0018      	movs	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	b006      	add	sp, #24
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40021000 	.word	0x40021000
 8007060:	efffffff 	.word	0xefffffff
 8007064:	fffff3ff 	.word	0xfffff3ff
 8007068:	fffffcff 	.word	0xfffffcff
 800706c:	fff3ffff 	.word	0xfff3ffff
 8007070:	ffcfffff 	.word	0xffcfffff
 8007074:	ffffcfff 	.word	0xffffcfff
 8007078:	ffff3fff 	.word	0xffff3fff
 800707c:	ffbfffff 	.word	0xffbfffff
 8007080:	feffffff 	.word	0xfeffffff

08007084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e04a      	b.n	800712c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	223d      	movs	r2, #61	@ 0x3d
 800709a:	5c9b      	ldrb	r3, [r3, r2]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d107      	bne.n	80070b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	223c      	movs	r2, #60	@ 0x3c
 80070a6:	2100      	movs	r1, #0
 80070a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7fd fb25 	bl	80046fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	223d      	movs	r2, #61	@ 0x3d
 80070b6:	2102      	movs	r1, #2
 80070b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3304      	adds	r3, #4
 80070c2:	0019      	movs	r1, r3
 80070c4:	0010      	movs	r0, r2
 80070c6:	f000 fca7 	bl	8007a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2248      	movs	r2, #72	@ 0x48
 80070ce:	2101      	movs	r1, #1
 80070d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	223e      	movs	r2, #62	@ 0x3e
 80070d6:	2101      	movs	r1, #1
 80070d8:	5499      	strb	r1, [r3, r2]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	223f      	movs	r2, #63	@ 0x3f
 80070de:	2101      	movs	r1, #1
 80070e0:	5499      	strb	r1, [r3, r2]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2240      	movs	r2, #64	@ 0x40
 80070e6:	2101      	movs	r1, #1
 80070e8:	5499      	strb	r1, [r3, r2]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2241      	movs	r2, #65	@ 0x41
 80070ee:	2101      	movs	r1, #1
 80070f0:	5499      	strb	r1, [r3, r2]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2242      	movs	r2, #66	@ 0x42
 80070f6:	2101      	movs	r1, #1
 80070f8:	5499      	strb	r1, [r3, r2]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2243      	movs	r2, #67	@ 0x43
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2244      	movs	r2, #68	@ 0x44
 8007106:	2101      	movs	r1, #1
 8007108:	5499      	strb	r1, [r3, r2]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2245      	movs	r2, #69	@ 0x45
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2246      	movs	r2, #70	@ 0x46
 8007116:	2101      	movs	r1, #1
 8007118:	5499      	strb	r1, [r3, r2]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2247      	movs	r2, #71	@ 0x47
 800711e:	2101      	movs	r1, #1
 8007120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	223d      	movs	r2, #61	@ 0x3d
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b002      	add	sp, #8
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e04a      	b.n	80071dc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	223d      	movs	r2, #61	@ 0x3d
 800714a:	5c9b      	ldrb	r3, [r3, r2]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d107      	bne.n	8007162 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	223c      	movs	r2, #60	@ 0x3c
 8007156:	2100      	movs	r1, #0
 8007158:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	0018      	movs	r0, r3
 800715e:	f000 f841 	bl	80071e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	223d      	movs	r2, #61	@ 0x3d
 8007166:	2102      	movs	r1, #2
 8007168:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3304      	adds	r3, #4
 8007172:	0019      	movs	r1, r3
 8007174:	0010      	movs	r0, r2
 8007176:	f000 fc4f 	bl	8007a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2248      	movs	r2, #72	@ 0x48
 800717e:	2101      	movs	r1, #1
 8007180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	223e      	movs	r2, #62	@ 0x3e
 8007186:	2101      	movs	r1, #1
 8007188:	5499      	strb	r1, [r3, r2]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	223f      	movs	r2, #63	@ 0x3f
 800718e:	2101      	movs	r1, #1
 8007190:	5499      	strb	r1, [r3, r2]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2240      	movs	r2, #64	@ 0x40
 8007196:	2101      	movs	r1, #1
 8007198:	5499      	strb	r1, [r3, r2]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2241      	movs	r2, #65	@ 0x41
 800719e:	2101      	movs	r1, #1
 80071a0:	5499      	strb	r1, [r3, r2]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2242      	movs	r2, #66	@ 0x42
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2243      	movs	r2, #67	@ 0x43
 80071ae:	2101      	movs	r1, #1
 80071b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2244      	movs	r2, #68	@ 0x44
 80071b6:	2101      	movs	r1, #1
 80071b8:	5499      	strb	r1, [r3, r2]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2245      	movs	r2, #69	@ 0x45
 80071be:	2101      	movs	r1, #1
 80071c0:	5499      	strb	r1, [r3, r2]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2246      	movs	r2, #70	@ 0x46
 80071c6:	2101      	movs	r1, #1
 80071c8:	5499      	strb	r1, [r3, r2]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2247      	movs	r2, #71	@ 0x47
 80071ce:	2101      	movs	r1, #1
 80071d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	223d      	movs	r2, #61	@ 0x3d
 80071d6:	2101      	movs	r1, #1
 80071d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b002      	add	sp, #8
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071ec:	46c0      	nop			@ (mov r8, r8)
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b002      	add	sp, #8
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d108      	bne.n	8007216 <HAL_TIM_PWM_Start+0x22>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	223e      	movs	r2, #62	@ 0x3e
 8007208:	5c9b      	ldrb	r3, [r3, r2]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	1e5a      	subs	r2, r3, #1
 8007210:	4193      	sbcs	r3, r2
 8007212:	b2db      	uxtb	r3, r3
 8007214:	e037      	b.n	8007286 <HAL_TIM_PWM_Start+0x92>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b04      	cmp	r3, #4
 800721a:	d108      	bne.n	800722e <HAL_TIM_PWM_Start+0x3a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	223f      	movs	r2, #63	@ 0x3f
 8007220:	5c9b      	ldrb	r3, [r3, r2]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	4193      	sbcs	r3, r2
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e02b      	b.n	8007286 <HAL_TIM_PWM_Start+0x92>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b08      	cmp	r3, #8
 8007232:	d108      	bne.n	8007246 <HAL_TIM_PWM_Start+0x52>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2240      	movs	r2, #64	@ 0x40
 8007238:	5c9b      	ldrb	r3, [r3, r2]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	1e5a      	subs	r2, r3, #1
 8007240:	4193      	sbcs	r3, r2
 8007242:	b2db      	uxtb	r3, r3
 8007244:	e01f      	b.n	8007286 <HAL_TIM_PWM_Start+0x92>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b0c      	cmp	r3, #12
 800724a:	d108      	bne.n	800725e <HAL_TIM_PWM_Start+0x6a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2241      	movs	r2, #65	@ 0x41
 8007250:	5c9b      	ldrb	r3, [r3, r2]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	1e5a      	subs	r2, r3, #1
 8007258:	4193      	sbcs	r3, r2
 800725a:	b2db      	uxtb	r3, r3
 800725c:	e013      	b.n	8007286 <HAL_TIM_PWM_Start+0x92>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b10      	cmp	r3, #16
 8007262:	d108      	bne.n	8007276 <HAL_TIM_PWM_Start+0x82>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2242      	movs	r2, #66	@ 0x42
 8007268:	5c9b      	ldrb	r3, [r3, r2]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	1e5a      	subs	r2, r3, #1
 8007270:	4193      	sbcs	r3, r2
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e007      	b.n	8007286 <HAL_TIM_PWM_Start+0x92>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2243      	movs	r2, #67	@ 0x43
 800727a:	5c9b      	ldrb	r3, [r3, r2]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	1e5a      	subs	r2, r3, #1
 8007282:	4193      	sbcs	r3, r2
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e090      	b.n	80073b0 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <HAL_TIM_PWM_Start+0xaa>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	223e      	movs	r2, #62	@ 0x3e
 8007298:	2102      	movs	r1, #2
 800729a:	5499      	strb	r1, [r3, r2]
 800729c:	e023      	b.n	80072e6 <HAL_TIM_PWM_Start+0xf2>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d104      	bne.n	80072ae <HAL_TIM_PWM_Start+0xba>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	223f      	movs	r2, #63	@ 0x3f
 80072a8:	2102      	movs	r1, #2
 80072aa:	5499      	strb	r1, [r3, r2]
 80072ac:	e01b      	b.n	80072e6 <HAL_TIM_PWM_Start+0xf2>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d104      	bne.n	80072be <HAL_TIM_PWM_Start+0xca>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2240      	movs	r2, #64	@ 0x40
 80072b8:	2102      	movs	r1, #2
 80072ba:	5499      	strb	r1, [r3, r2]
 80072bc:	e013      	b.n	80072e6 <HAL_TIM_PWM_Start+0xf2>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b0c      	cmp	r3, #12
 80072c2:	d104      	bne.n	80072ce <HAL_TIM_PWM_Start+0xda>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2241      	movs	r2, #65	@ 0x41
 80072c8:	2102      	movs	r1, #2
 80072ca:	5499      	strb	r1, [r3, r2]
 80072cc:	e00b      	b.n	80072e6 <HAL_TIM_PWM_Start+0xf2>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d104      	bne.n	80072de <HAL_TIM_PWM_Start+0xea>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2242      	movs	r2, #66	@ 0x42
 80072d8:	2102      	movs	r1, #2
 80072da:	5499      	strb	r1, [r3, r2]
 80072dc:	e003      	b.n	80072e6 <HAL_TIM_PWM_Start+0xf2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2243      	movs	r2, #67	@ 0x43
 80072e2:	2102      	movs	r1, #2
 80072e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	2201      	movs	r2, #1
 80072ee:	0018      	movs	r0, r3
 80072f0:	f000 ff8a 	bl	8008208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2f      	ldr	r2, [pc, #188]	@ (80073b8 <HAL_TIM_PWM_Start+0x1c4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00e      	beq.n	800731c <HAL_TIM_PWM_Start+0x128>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2e      	ldr	r2, [pc, #184]	@ (80073bc <HAL_TIM_PWM_Start+0x1c8>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d009      	beq.n	800731c <HAL_TIM_PWM_Start+0x128>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2c      	ldr	r2, [pc, #176]	@ (80073c0 <HAL_TIM_PWM_Start+0x1cc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <HAL_TIM_PWM_Start+0x128>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2b      	ldr	r2, [pc, #172]	@ (80073c4 <HAL_TIM_PWM_Start+0x1d0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d101      	bne.n	8007320 <HAL_TIM_PWM_Start+0x12c>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <HAL_TIM_PWM_Start+0x12e>
 8007320:	2300      	movs	r3, #0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2180      	movs	r1, #128	@ 0x80
 8007332:	0209      	lsls	r1, r1, #8
 8007334:	430a      	orrs	r2, r1
 8007336:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1e      	ldr	r2, [pc, #120]	@ (80073b8 <HAL_TIM_PWM_Start+0x1c4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d014      	beq.n	800736c <HAL_TIM_PWM_Start+0x178>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	2380      	movs	r3, #128	@ 0x80
 8007348:	05db      	lsls	r3, r3, #23
 800734a:	429a      	cmp	r2, r3
 800734c:	d00e      	beq.n	800736c <HAL_TIM_PWM_Start+0x178>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1d      	ldr	r2, [pc, #116]	@ (80073c8 <HAL_TIM_PWM_Start+0x1d4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_TIM_PWM_Start+0x178>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1b      	ldr	r2, [pc, #108]	@ (80073cc <HAL_TIM_PWM_Start+0x1d8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_TIM_PWM_Start+0x178>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a15      	ldr	r2, [pc, #84]	@ (80073bc <HAL_TIM_PWM_Start+0x1c8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d116      	bne.n	800739a <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	4a17      	ldr	r2, [pc, #92]	@ (80073d0 <HAL_TIM_PWM_Start+0x1dc>)
 8007374:	4013      	ands	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b06      	cmp	r3, #6
 800737c:	d016      	beq.n	80073ac <HAL_TIM_PWM_Start+0x1b8>
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	2380      	movs	r3, #128	@ 0x80
 8007382:	025b      	lsls	r3, r3, #9
 8007384:	429a      	cmp	r2, r3
 8007386:	d011      	beq.n	80073ac <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2101      	movs	r1, #1
 8007394:	430a      	orrs	r2, r1
 8007396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007398:	e008      	b.n	80073ac <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2101      	movs	r1, #1
 80073a6:	430a      	orrs	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e000      	b.n	80073ae <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b004      	add	sp, #16
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400
 80073c4:	40014800 	.word	0x40014800
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	00010007 	.word	0x00010007

080073d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e090      	b.n	800750a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	223d      	movs	r2, #61	@ 0x3d
 80073ec:	5c9b      	ldrb	r3, [r3, r2]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d107      	bne.n	8007404 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	223c      	movs	r2, #60	@ 0x3c
 80073f8:	2100      	movs	r1, #0
 80073fa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	0018      	movs	r0, r3
 8007400:	f7fd f9c6 	bl	8004790 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	223d      	movs	r2, #61	@ 0x3d
 8007408:	2102      	movs	r1, #2
 800740a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	493f      	ldr	r1, [pc, #252]	@ (8007514 <HAL_TIM_Encoder_Init+0x140>)
 8007418:	400a      	ands	r2, r1
 800741a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	0019      	movs	r1, r3
 8007426:	0010      	movs	r0, r2
 8007428:	f000 faf6 	bl	8007a18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4a31      	ldr	r2, [pc, #196]	@ (8007518 <HAL_TIM_Encoder_Init+0x144>)
 8007452:	4013      	ands	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	4313      	orrs	r3, r2
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4a2c      	ldr	r2, [pc, #176]	@ (800751c <HAL_TIM_Encoder_Init+0x148>)
 800746c:	4013      	ands	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	4a2b      	ldr	r2, [pc, #172]	@ (8007520 <HAL_TIM_Encoder_Init+0x14c>)
 8007474:	4013      	ands	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	4313      	orrs	r3, r2
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	011a      	lsls	r2, r3, #4
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	031b      	lsls	r3, r3, #12
 8007496:	4313      	orrs	r3, r2
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2222      	movs	r2, #34	@ 0x22
 80074a2:	4393      	bics	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2288      	movs	r2, #136	@ 0x88
 80074aa:	4393      	bics	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4313      	orrs	r3, r2
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2248      	movs	r2, #72	@ 0x48
 80074dc:	2101      	movs	r1, #1
 80074de:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	223e      	movs	r2, #62	@ 0x3e
 80074e4:	2101      	movs	r1, #1
 80074e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	223f      	movs	r2, #63	@ 0x3f
 80074ec:	2101      	movs	r1, #1
 80074ee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2244      	movs	r2, #68	@ 0x44
 80074f4:	2101      	movs	r1, #1
 80074f6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2245      	movs	r2, #69	@ 0x45
 80074fc:	2101      	movs	r1, #1
 80074fe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	223d      	movs	r2, #61	@ 0x3d
 8007504:	2101      	movs	r1, #1
 8007506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	0018      	movs	r0, r3
 800750c:	46bd      	mov	sp, r7
 800750e:	b006      	add	sp, #24
 8007510:	bd80      	pop	{r7, pc}
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	fffebff8 	.word	0xfffebff8
 8007518:	fffffcfc 	.word	0xfffffcfc
 800751c:	fffff3f3 	.word	0xfffff3f3
 8007520:	ffff0f0f 	.word	0xffff0f0f

08007524 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800752e:	200f      	movs	r0, #15
 8007530:	183b      	adds	r3, r7, r0
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	213e      	movs	r1, #62	@ 0x3e
 8007536:	5c52      	ldrb	r2, [r2, r1]
 8007538:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800753a:	230e      	movs	r3, #14
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	213f      	movs	r1, #63	@ 0x3f
 8007542:	5c52      	ldrb	r2, [r2, r1]
 8007544:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007546:	240d      	movs	r4, #13
 8007548:	193b      	adds	r3, r7, r4
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	2144      	movs	r1, #68	@ 0x44
 800754e:	5c52      	ldrb	r2, [r2, r1]
 8007550:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007552:	230c      	movs	r3, #12
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	2145      	movs	r1, #69	@ 0x45
 800755a:	5c52      	ldrb	r2, [r2, r1]
 800755c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d112      	bne.n	800758a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007564:	183b      	adds	r3, r7, r0
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d103      	bne.n	8007574 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800756c:	193b      	adds	r3, r7, r4
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d001      	beq.n	8007578 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e075      	b.n	8007664 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	223e      	movs	r2, #62	@ 0x3e
 800757c:	2102      	movs	r1, #2
 800757e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2244      	movs	r2, #68	@ 0x44
 8007584:	2102      	movs	r1, #2
 8007586:	5499      	strb	r1, [r3, r2]
 8007588:	e03d      	b.n	8007606 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b04      	cmp	r3, #4
 800758e:	d114      	bne.n	80075ba <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007590:	230e      	movs	r3, #14
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d104      	bne.n	80075a4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800759a:	230c      	movs	r3, #12
 800759c:	18fb      	adds	r3, r7, r3
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d001      	beq.n	80075a8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e05d      	b.n	8007664 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	223f      	movs	r2, #63	@ 0x3f
 80075ac:	2102      	movs	r1, #2
 80075ae:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2245      	movs	r2, #69	@ 0x45
 80075b4:	2102      	movs	r1, #2
 80075b6:	5499      	strb	r1, [r3, r2]
 80075b8:	e025      	b.n	8007606 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075ba:	230f      	movs	r3, #15
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10e      	bne.n	80075e2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075c4:	230e      	movs	r3, #14
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d109      	bne.n	80075e2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075ce:	230d      	movs	r3, #13
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075d8:	230c      	movs	r3, #12
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d001      	beq.n	80075e6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e03e      	b.n	8007664 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	223e      	movs	r2, #62	@ 0x3e
 80075ea:	2102      	movs	r1, #2
 80075ec:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	223f      	movs	r2, #63	@ 0x3f
 80075f2:	2102      	movs	r1, #2
 80075f4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2244      	movs	r2, #68	@ 0x44
 80075fa:	2102      	movs	r1, #2
 80075fc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2245      	movs	r2, #69	@ 0x45
 8007602:	2102      	movs	r1, #2
 8007604:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_TIM_Encoder_Start+0xf0>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b04      	cmp	r3, #4
 8007610:	d008      	beq.n	8007624 <HAL_TIM_Encoder_Start+0x100>
 8007612:	e00f      	b.n	8007634 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2201      	movs	r2, #1
 800761a:	2100      	movs	r1, #0
 800761c:	0018      	movs	r0, r3
 800761e:	f000 fdf3 	bl	8008208 <TIM_CCxChannelCmd>
      break;
 8007622:	e016      	b.n	8007652 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2201      	movs	r2, #1
 800762a:	2104      	movs	r1, #4
 800762c:	0018      	movs	r0, r3
 800762e:	f000 fdeb 	bl	8008208 <TIM_CCxChannelCmd>
      break;
 8007632:	e00e      	b.n	8007652 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2201      	movs	r2, #1
 800763a:	2100      	movs	r1, #0
 800763c:	0018      	movs	r0, r3
 800763e:	f000 fde3 	bl	8008208 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2201      	movs	r2, #1
 8007648:	2104      	movs	r1, #4
 800764a:	0018      	movs	r0, r3
 800764c:	f000 fddc 	bl	8008208 <TIM_CCxChannelCmd>
      break;
 8007650:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2101      	movs	r1, #1
 800765e:	430a      	orrs	r2, r1
 8007660:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b005      	add	sp, #20
 800766a:	bd90      	pop	{r4, r7, pc}

0800766c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007678:	2317      	movs	r3, #23
 800767a:	18fb      	adds	r3, r7, r3
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	223c      	movs	r2, #60	@ 0x3c
 8007684:	5c9b      	ldrb	r3, [r3, r2]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_TIM_PWM_ConfigChannel+0x22>
 800768a:	2302      	movs	r3, #2
 800768c:	e0e5      	b.n	800785a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	223c      	movs	r2, #60	@ 0x3c
 8007692:	2101      	movs	r1, #1
 8007694:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b14      	cmp	r3, #20
 800769a:	d900      	bls.n	800769e <HAL_TIM_PWM_ConfigChannel+0x32>
 800769c:	e0d1      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	009a      	lsls	r2, r3, #2
 80076a2:	4b70      	ldr	r3, [pc, #448]	@ (8007864 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80076a4:	18d3      	adds	r3, r2, r3
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 fa48 	bl	8007b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2108      	movs	r1, #8
 80076c4:	430a      	orrs	r2, r1
 80076c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2104      	movs	r1, #4
 80076d4:	438a      	bics	r2, r1
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
      break;
 80076ea:	e0af      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	0011      	movs	r1, r2
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 fab1 	bl	8007c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2180      	movs	r1, #128	@ 0x80
 8007706:	0109      	lsls	r1, r1, #4
 8007708:	430a      	orrs	r2, r1
 800770a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4954      	ldr	r1, [pc, #336]	@ (8007868 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007718:	400a      	ands	r2, r1
 800771a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6999      	ldr	r1, [r3, #24]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	021a      	lsls	r2, r3, #8
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	619a      	str	r2, [r3, #24]
      break;
 8007730:	e08c      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0011      	movs	r1, r2
 800773a:	0018      	movs	r0, r3
 800773c:	f000 fb12 	bl	8007d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2108      	movs	r1, #8
 800774c:	430a      	orrs	r2, r1
 800774e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69da      	ldr	r2, [r3, #28]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2104      	movs	r1, #4
 800775c:	438a      	bics	r2, r1
 800775e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69d9      	ldr	r1, [r3, #28]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	61da      	str	r2, [r3, #28]
      break;
 8007772:	e06b      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	0011      	movs	r1, r2
 800777c:	0018      	movs	r0, r3
 800777e:	f000 fb79 	bl	8007e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2180      	movs	r1, #128	@ 0x80
 800778e:	0109      	lsls	r1, r1, #4
 8007790:	430a      	orrs	r2, r1
 8007792:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4932      	ldr	r1, [pc, #200]	@ (8007868 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80077a0:	400a      	ands	r2, r1
 80077a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69d9      	ldr	r1, [r3, #28]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	021a      	lsls	r2, r3, #8
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	61da      	str	r2, [r3, #28]
      break;
 80077b8:	e048      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	0011      	movs	r1, r2
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 fbc0 	bl	8007f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2108      	movs	r1, #8
 80077d4:	430a      	orrs	r2, r1
 80077d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2104      	movs	r1, #4
 80077e4:	438a      	bics	r2, r1
 80077e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80077fa:	e027      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	0011      	movs	r1, r2
 8007804:	0018      	movs	r0, r3
 8007806:	f000 fbff 	bl	8008008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2180      	movs	r1, #128	@ 0x80
 8007816:	0109      	lsls	r1, r1, #4
 8007818:	430a      	orrs	r2, r1
 800781a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4910      	ldr	r1, [pc, #64]	@ (8007868 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007828:	400a      	ands	r2, r1
 800782a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	021a      	lsls	r2, r3, #8
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007840:	e004      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007842:	2317      	movs	r3, #23
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	2201      	movs	r2, #1
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	223c      	movs	r2, #60	@ 0x3c
 8007850:	2100      	movs	r1, #0
 8007852:	5499      	strb	r1, [r3, r2]

  return status;
 8007854:	2317      	movs	r3, #23
 8007856:	18fb      	adds	r3, r7, r3
 8007858:	781b      	ldrb	r3, [r3, #0]
}
 800785a:	0018      	movs	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	b006      	add	sp, #24
 8007860:	bd80      	pop	{r7, pc}
 8007862:	46c0      	nop			@ (mov r8, r8)
 8007864:	0800e4f4 	.word	0x0800e4f4
 8007868:	fffffbff 	.word	0xfffffbff

0800786c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007876:	230f      	movs	r3, #15
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223c      	movs	r2, #60	@ 0x3c
 8007882:	5c9b      	ldrb	r3, [r3, r2]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_TIM_ConfigClockSource+0x20>
 8007888:	2302      	movs	r3, #2
 800788a:	e0bc      	b.n	8007a06 <HAL_TIM_ConfigClockSource+0x19a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	223c      	movs	r2, #60	@ 0x3c
 8007890:	2101      	movs	r1, #1
 8007892:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	223d      	movs	r2, #61	@ 0x3d
 8007898:	2102      	movs	r1, #2
 800789a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4a5a      	ldr	r2, [pc, #360]	@ (8007a10 <HAL_TIM_ConfigClockSource+0x1a4>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4a59      	ldr	r2, [pc, #356]	@ (8007a14 <HAL_TIM_ConfigClockSource+0x1a8>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2280      	movs	r2, #128	@ 0x80
 80078c2:	0192      	lsls	r2, r2, #6
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d040      	beq.n	800794a <HAL_TIM_ConfigClockSource+0xde>
 80078c8:	2280      	movs	r2, #128	@ 0x80
 80078ca:	0192      	lsls	r2, r2, #6
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d900      	bls.n	80078d2 <HAL_TIM_ConfigClockSource+0x66>
 80078d0:	e088      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 80078d2:	2280      	movs	r2, #128	@ 0x80
 80078d4:	0152      	lsls	r2, r2, #5
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d100      	bne.n	80078dc <HAL_TIM_ConfigClockSource+0x70>
 80078da:	e088      	b.n	80079ee <HAL_TIM_ConfigClockSource+0x182>
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	0152      	lsls	r2, r2, #5
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d900      	bls.n	80078e6 <HAL_TIM_ConfigClockSource+0x7a>
 80078e4:	e07e      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 80078e6:	2b70      	cmp	r3, #112	@ 0x70
 80078e8:	d018      	beq.n	800791c <HAL_TIM_ConfigClockSource+0xb0>
 80078ea:	d900      	bls.n	80078ee <HAL_TIM_ConfigClockSource+0x82>
 80078ec:	e07a      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 80078ee:	2b60      	cmp	r3, #96	@ 0x60
 80078f0:	d04f      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x126>
 80078f2:	d900      	bls.n	80078f6 <HAL_TIM_ConfigClockSource+0x8a>
 80078f4:	e076      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 80078f6:	2b50      	cmp	r3, #80	@ 0x50
 80078f8:	d03b      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x106>
 80078fa:	d900      	bls.n	80078fe <HAL_TIM_ConfigClockSource+0x92>
 80078fc:	e072      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d057      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x146>
 8007902:	d900      	bls.n	8007906 <HAL_TIM_ConfigClockSource+0x9a>
 8007904:	e06e      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 8007906:	2b30      	cmp	r3, #48	@ 0x30
 8007908:	d063      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x166>
 800790a:	d86b      	bhi.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 800790c:	2b20      	cmp	r3, #32
 800790e:	d060      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x166>
 8007910:	d868      	bhi.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d05d      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x166>
 8007916:	2b10      	cmp	r3, #16
 8007918:	d05b      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x166>
 800791a:	e063      	b.n	80079e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800792c:	f000 fc4c 	bl	80081c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2277      	movs	r2, #119	@ 0x77
 800793c:	4313      	orrs	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	609a      	str	r2, [r3, #8]
      break;
 8007948:	e052      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800795a:	f000 fc35 	bl	80081c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2180      	movs	r1, #128	@ 0x80
 800796a:	01c9      	lsls	r1, r1, #7
 800796c:	430a      	orrs	r2, r1
 800796e:	609a      	str	r2, [r3, #8]
      break;
 8007970:	e03e      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800797e:	001a      	movs	r2, r3
 8007980:	f000 fba6 	bl	80080d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2150      	movs	r1, #80	@ 0x50
 800798a:	0018      	movs	r0, r3
 800798c:	f000 fc00 	bl	8008190 <TIM_ITRx_SetConfig>
      break;
 8007990:	e02e      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800799e:	001a      	movs	r2, r3
 80079a0:	f000 fbc4 	bl	800812c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2160      	movs	r1, #96	@ 0x60
 80079aa:	0018      	movs	r0, r3
 80079ac:	f000 fbf0 	bl	8008190 <TIM_ITRx_SetConfig>
      break;
 80079b0:	e01e      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079be:	001a      	movs	r2, r3
 80079c0:	f000 fb86 	bl	80080d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2140      	movs	r1, #64	@ 0x40
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 fbe0 	bl	8008190 <TIM_ITRx_SetConfig>
      break;
 80079d0:	e00e      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	0019      	movs	r1, r3
 80079dc:	0010      	movs	r0, r2
 80079de:	f000 fbd7 	bl	8008190 <TIM_ITRx_SetConfig>
      break;
 80079e2:	e005      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80079e4:	230f      	movs	r3, #15
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	2201      	movs	r2, #1
 80079ea:	701a      	strb	r2, [r3, #0]
      break;
 80079ec:	e000      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80079ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	223d      	movs	r2, #61	@ 0x3d
 80079f4:	2101      	movs	r1, #1
 80079f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	223c      	movs	r2, #60	@ 0x3c
 80079fc:	2100      	movs	r1, #0
 80079fe:	5499      	strb	r1, [r3, r2]

  return status;
 8007a00:	230f      	movs	r3, #15
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	781b      	ldrb	r3, [r3, #0]
}
 8007a06:	0018      	movs	r0, r3
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b004      	add	sp, #16
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	ffceff88 	.word	0xffceff88
 8007a14:	ffff00ff 	.word	0xffff00ff

08007a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b28 <TIM_Base_SetConfig+0x110>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00c      	beq.n	8007a4a <TIM_Base_SetConfig+0x32>
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	2380      	movs	r3, #128	@ 0x80
 8007a34:	05db      	lsls	r3, r3, #23
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0x32>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8007b2c <TIM_Base_SetConfig+0x114>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0x32>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a3a      	ldr	r2, [pc, #232]	@ (8007b30 <TIM_Base_SetConfig+0x118>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2270      	movs	r2, #112	@ 0x70
 8007a4e:	4393      	bics	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a32      	ldr	r2, [pc, #200]	@ (8007b28 <TIM_Base_SetConfig+0x110>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d01c      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	05db      	lsls	r3, r3, #23
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d017      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2e      	ldr	r2, [pc, #184]	@ (8007b2c <TIM_Base_SetConfig+0x114>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2d      	ldr	r2, [pc, #180]	@ (8007b30 <TIM_Base_SetConfig+0x118>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00f      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2c      	ldr	r2, [pc, #176]	@ (8007b34 <TIM_Base_SetConfig+0x11c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00b      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2b      	ldr	r2, [pc, #172]	@ (8007b38 <TIM_Base_SetConfig+0x120>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2a      	ldr	r2, [pc, #168]	@ (8007b3c <TIM_Base_SetConfig+0x124>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_Base_SetConfig+0x86>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a29      	ldr	r2, [pc, #164]	@ (8007b40 <TIM_Base_SetConfig+0x128>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d108      	bne.n	8007ab0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4a28      	ldr	r2, [pc, #160]	@ (8007b44 <TIM_Base_SetConfig+0x12c>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2280      	movs	r2, #128	@ 0x80
 8007ab4:	4393      	bics	r3, r2
 8007ab6:	001a      	movs	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a13      	ldr	r2, [pc, #76]	@ (8007b28 <TIM_Base_SetConfig+0x110>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00b      	beq.n	8007af6 <TIM_Base_SetConfig+0xde>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a15      	ldr	r2, [pc, #84]	@ (8007b38 <TIM_Base_SetConfig+0x120>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d007      	beq.n	8007af6 <TIM_Base_SetConfig+0xde>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a14      	ldr	r2, [pc, #80]	@ (8007b3c <TIM_Base_SetConfig+0x124>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d003      	beq.n	8007af6 <TIM_Base_SetConfig+0xde>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a13      	ldr	r2, [pc, #76]	@ (8007b40 <TIM_Base_SetConfig+0x128>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d103      	bne.n	8007afe <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d106      	bne.n	8007b1e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2201      	movs	r2, #1
 8007b16:	4393      	bics	r3, r2
 8007b18:	001a      	movs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	611a      	str	r2, [r3, #16]
  }
}
 8007b1e:	46c0      	nop			@ (mov r8, r8)
 8007b20:	46bd      	mov	sp, r7
 8007b22:	b004      	add	sp, #16
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	46c0      	nop			@ (mov r8, r8)
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40002000 	.word	0x40002000
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800
 8007b44:	fffffcff 	.word	0xfffffcff

08007b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	4393      	bics	r3, r2
 8007b60:	001a      	movs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4a32      	ldr	r2, [pc, #200]	@ (8007c40 <TIM_OC1_SetConfig+0xf8>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	4393      	bics	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	4393      	bics	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a28      	ldr	r2, [pc, #160]	@ (8007c44 <TIM_OC1_SetConfig+0xfc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00b      	beq.n	8007bbe <TIM_OC1_SetConfig+0x76>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a27      	ldr	r2, [pc, #156]	@ (8007c48 <TIM_OC1_SetConfig+0x100>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d007      	beq.n	8007bbe <TIM_OC1_SetConfig+0x76>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a26      	ldr	r2, [pc, #152]	@ (8007c4c <TIM_OC1_SetConfig+0x104>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d003      	beq.n	8007bbe <TIM_OC1_SetConfig+0x76>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a25      	ldr	r2, [pc, #148]	@ (8007c50 <TIM_OC1_SetConfig+0x108>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d10c      	bne.n	8007bd8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	4393      	bics	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	4393      	bics	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a1a      	ldr	r2, [pc, #104]	@ (8007c44 <TIM_OC1_SetConfig+0xfc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <TIM_OC1_SetConfig+0xb0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <TIM_OC1_SetConfig+0x100>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <TIM_OC1_SetConfig+0xb0>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a18      	ldr	r2, [pc, #96]	@ (8007c4c <TIM_OC1_SetConfig+0x104>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_OC1_SetConfig+0xb0>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a17      	ldr	r2, [pc, #92]	@ (8007c50 <TIM_OC1_SetConfig+0x108>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d111      	bne.n	8007c1c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4a16      	ldr	r2, [pc, #88]	@ (8007c54 <TIM_OC1_SetConfig+0x10c>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	4a15      	ldr	r2, [pc, #84]	@ (8007c58 <TIM_OC1_SetConfig+0x110>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	621a      	str	r2, [r3, #32]
}
 8007c36:	46c0      	nop			@ (mov r8, r8)
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b006      	add	sp, #24
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	fffeff8f 	.word	0xfffeff8f
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	40014400 	.word	0x40014400
 8007c50:	40014800 	.word	0x40014800
 8007c54:	fffffeff 	.word	0xfffffeff
 8007c58:	fffffdff 	.word	0xfffffdff

08007c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	2210      	movs	r2, #16
 8007c72:	4393      	bics	r3, r2
 8007c74:	001a      	movs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a2e      	ldr	r2, [pc, #184]	@ (8007d44 <TIM_OC2_SetConfig+0xe8>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4a2d      	ldr	r2, [pc, #180]	@ (8007d48 <TIM_OC2_SetConfig+0xec>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	4393      	bics	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a24      	ldr	r2, [pc, #144]	@ (8007d4c <TIM_OC2_SetConfig+0xf0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d10d      	bne.n	8007cda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2280      	movs	r2, #128	@ 0x80
 8007cc2:	4393      	bics	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2240      	movs	r2, #64	@ 0x40
 8007cd6:	4393      	bics	r3, r2
 8007cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d4c <TIM_OC2_SetConfig+0xf0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <TIM_OC2_SetConfig+0x9e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d50 <TIM_OC2_SetConfig+0xf4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <TIM_OC2_SetConfig+0x9e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a19      	ldr	r2, [pc, #100]	@ (8007d54 <TIM_OC2_SetConfig+0xf8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC2_SetConfig+0x9e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a18      	ldr	r2, [pc, #96]	@ (8007d58 <TIM_OC2_SetConfig+0xfc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d113      	bne.n	8007d22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	4a17      	ldr	r2, [pc, #92]	@ (8007d5c <TIM_OC2_SetConfig+0x100>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4a16      	ldr	r2, [pc, #88]	@ (8007d60 <TIM_OC2_SetConfig+0x104>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	621a      	str	r2, [r3, #32]
}
 8007d3c:	46c0      	nop			@ (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b006      	add	sp, #24
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	feff8fff 	.word	0xfeff8fff
 8007d48:	fffffcff 	.word	0xfffffcff
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800
 8007d5c:	fffffbff 	.word	0xfffffbff
 8007d60:	fffff7ff 	.word	0xfffff7ff

08007d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	4a33      	ldr	r2, [pc, #204]	@ (8007e48 <TIM_OC3_SetConfig+0xe4>)
 8007d7a:	401a      	ands	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e4c <TIM_OC3_SetConfig+0xe8>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2203      	movs	r2, #3
 8007d98:	4393      	bics	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	4a29      	ldr	r2, [pc, #164]	@ (8007e50 <TIM_OC3_SetConfig+0xec>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a25      	ldr	r2, [pc, #148]	@ (8007e54 <TIM_OC3_SetConfig+0xf0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d10d      	bne.n	8007dde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4a24      	ldr	r2, [pc, #144]	@ (8007e58 <TIM_OC3_SetConfig+0xf4>)
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4a20      	ldr	r2, [pc, #128]	@ (8007e5c <TIM_OC3_SetConfig+0xf8>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e54 <TIM_OC3_SetConfig+0xf0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00b      	beq.n	8007dfe <TIM_OC3_SetConfig+0x9a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <TIM_OC3_SetConfig+0xfc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <TIM_OC3_SetConfig+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e64 <TIM_OC3_SetConfig+0x100>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC3_SetConfig+0x9a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <TIM_OC3_SetConfig+0x104>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d113      	bne.n	8007e26 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	4a1a      	ldr	r2, [pc, #104]	@ (8007e6c <TIM_OC3_SetConfig+0x108>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	4a19      	ldr	r2, [pc, #100]	@ (8007e70 <TIM_OC3_SetConfig+0x10c>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	621a      	str	r2, [r3, #32]
}
 8007e40:	46c0      	nop			@ (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b006      	add	sp, #24
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	fffffeff 	.word	0xfffffeff
 8007e4c:	fffeff8f 	.word	0xfffeff8f
 8007e50:	fffffdff 	.word	0xfffffdff
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	fffff7ff 	.word	0xfffff7ff
 8007e5c:	fffffbff 	.word	0xfffffbff
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400
 8007e68:	40014800 	.word	0x40014800
 8007e6c:	ffffefff 	.word	0xffffefff
 8007e70:	ffffdfff 	.word	0xffffdfff

08007e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	4a26      	ldr	r2, [pc, #152]	@ (8007f24 <TIM_OC4_SetConfig+0xb0>)
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a22      	ldr	r2, [pc, #136]	@ (8007f28 <TIM_OC4_SetConfig+0xb4>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4a21      	ldr	r2, [pc, #132]	@ (8007f2c <TIM_OC4_SetConfig+0xb8>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <TIM_OC4_SetConfig+0xbc>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a19      	ldr	r2, [pc, #100]	@ (8007f34 <TIM_OC4_SetConfig+0xc0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00b      	beq.n	8007eec <TIM_OC4_SetConfig+0x78>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	@ (8007f38 <TIM_OC4_SetConfig+0xc4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d007      	beq.n	8007eec <TIM_OC4_SetConfig+0x78>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a17      	ldr	r2, [pc, #92]	@ (8007f3c <TIM_OC4_SetConfig+0xc8>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d003      	beq.n	8007eec <TIM_OC4_SetConfig+0x78>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a16      	ldr	r2, [pc, #88]	@ (8007f40 <TIM_OC4_SetConfig+0xcc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d109      	bne.n	8007f00 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	4a15      	ldr	r2, [pc, #84]	@ (8007f44 <TIM_OC4_SetConfig+0xd0>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	019b      	lsls	r3, r3, #6
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	46c0      	nop			@ (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b006      	add	sp, #24
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	ffffefff 	.word	0xffffefff
 8007f28:	feff8fff 	.word	0xfeff8fff
 8007f2c:	fffffcff 	.word	0xfffffcff
 8007f30:	ffffdfff 	.word	0xffffdfff
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40014000 	.word	0x40014000
 8007f3c:	40014400 	.word	0x40014400
 8007f40:	40014800 	.word	0x40014800
 8007f44:	ffffbfff 	.word	0xffffbfff

08007f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	4a23      	ldr	r2, [pc, #140]	@ (8007fec <TIM_OC5_SetConfig+0xa4>)
 8007f5e:	401a      	ands	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a1f      	ldr	r2, [pc, #124]	@ (8007ff0 <TIM_OC5_SetConfig+0xa8>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff4 <TIM_OC5_SetConfig+0xac>)
 8007f86:	4013      	ands	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a17      	ldr	r2, [pc, #92]	@ (8007ff8 <TIM_OC5_SetConfig+0xb0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00b      	beq.n	8007fb6 <TIM_OC5_SetConfig+0x6e>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a16      	ldr	r2, [pc, #88]	@ (8007ffc <TIM_OC5_SetConfig+0xb4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <TIM_OC5_SetConfig+0x6e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a15      	ldr	r2, [pc, #84]	@ (8008000 <TIM_OC5_SetConfig+0xb8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d003      	beq.n	8007fb6 <TIM_OC5_SetConfig+0x6e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a14      	ldr	r2, [pc, #80]	@ (8008004 <TIM_OC5_SetConfig+0xbc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d109      	bne.n	8007fca <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8007fec <TIM_OC5_SetConfig+0xa4>)
 8007fba:	4013      	ands	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	46c0      	nop			@ (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b006      	add	sp, #24
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	fffeffff 	.word	0xfffeffff
 8007ff0:	fffeff8f 	.word	0xfffeff8f
 8007ff4:	fffdffff 	.word	0xfffdffff
 8007ff8:	40012c00 	.word	0x40012c00
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40014400 	.word	0x40014400
 8008004:	40014800 	.word	0x40014800

08008008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	4a24      	ldr	r2, [pc, #144]	@ (80080b0 <TIM_OC6_SetConfig+0xa8>)
 800801e:	401a      	ands	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a20      	ldr	r2, [pc, #128]	@ (80080b4 <TIM_OC6_SetConfig+0xac>)
 8008034:	4013      	ands	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4a1c      	ldr	r2, [pc, #112]	@ (80080b8 <TIM_OC6_SetConfig+0xb0>)
 8008048:	4013      	ands	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	051b      	lsls	r3, r3, #20
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a18      	ldr	r2, [pc, #96]	@ (80080bc <TIM_OC6_SetConfig+0xb4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00b      	beq.n	8008078 <TIM_OC6_SetConfig+0x70>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <TIM_OC6_SetConfig+0xb8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_OC6_SetConfig+0x70>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <TIM_OC6_SetConfig+0xbc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_OC6_SetConfig+0x70>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a15      	ldr	r2, [pc, #84]	@ (80080c8 <TIM_OC6_SetConfig+0xc0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d109      	bne.n	800808c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	4a14      	ldr	r2, [pc, #80]	@ (80080cc <TIM_OC6_SetConfig+0xc4>)
 800807c:	4013      	ands	r3, r2
 800807e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	621a      	str	r2, [r3, #32]
}
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b006      	add	sp, #24
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	46c0      	nop			@ (mov r8, r8)
 80080b0:	ffefffff 	.word	0xffefffff
 80080b4:	feff8fff 	.word	0xfeff8fff
 80080b8:	ffdfffff 	.word	0xffdfffff
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40014000 	.word	0x40014000
 80080c4:	40014400 	.word	0x40014400
 80080c8:	40014800 	.word	0x40014800
 80080cc:	fffbffff 	.word	0xfffbffff

080080d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	2201      	movs	r2, #1
 80080e8:	4393      	bics	r3, r2
 80080ea:	001a      	movs	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	22f0      	movs	r2, #240	@ 0xf0
 80080fa:	4393      	bics	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	011b      	lsls	r3, r3, #4
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	220a      	movs	r2, #10
 800810c:	4393      	bics	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	46c0      	nop			@ (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b006      	add	sp, #24
 800812a:	bd80      	pop	{r7, pc}

0800812c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	2210      	movs	r2, #16
 8008144:	4393      	bics	r3, r2
 8008146:	001a      	movs	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4a0d      	ldr	r2, [pc, #52]	@ (800818c <TIM_TI2_ConfigInputStage+0x60>)
 8008156:	4013      	ands	r3, r2
 8008158:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	031b      	lsls	r3, r3, #12
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	22a0      	movs	r2, #160	@ 0xa0
 8008168:	4393      	bics	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	621a      	str	r2, [r3, #32]
}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	46bd      	mov	sp, r7
 8008186:	b006      	add	sp, #24
 8008188:	bd80      	pop	{r7, pc}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	ffff0fff 	.word	0xffff0fff

08008190 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a08      	ldr	r2, [pc, #32]	@ (80081c4 <TIM_ITRx_SetConfig+0x34>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	2207      	movs	r2, #7
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	609a      	str	r2, [r3, #8]
}
 80081ba:	46c0      	nop			@ (mov r8, r8)
 80081bc:	46bd      	mov	sp, r7
 80081be:	b004      	add	sp, #16
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	ffcfff8f 	.word	0xffcfff8f

080081c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	4a09      	ldr	r2, [pc, #36]	@ (8008204 <TIM_ETR_SetConfig+0x3c>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	609a      	str	r2, [r3, #8]
}
 80081fc:	46c0      	nop			@ (mov r8, r8)
 80081fe:	46bd      	mov	sp, r7
 8008200:	b006      	add	sp, #24
 8008202:	bd80      	pop	{r7, pc}
 8008204:	ffff00ff 	.word	0xffff00ff

08008208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	221f      	movs	r2, #31
 8008218:	4013      	ands	r3, r2
 800821a:	2201      	movs	r2, #1
 800821c:	409a      	lsls	r2, r3
 800821e:	0013      	movs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	43d2      	mvns	r2, r2
 800822a:	401a      	ands	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a1a      	ldr	r2, [r3, #32]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	211f      	movs	r1, #31
 8008238:	400b      	ands	r3, r1
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	4099      	lsls	r1, r3
 800823e:	000b      	movs	r3, r1
 8008240:	431a      	orrs	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	b006      	add	sp, #24
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	223c      	movs	r2, #60	@ 0x3c
 800825e:	5c9b      	ldrb	r3, [r3, r2]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008264:	2302      	movs	r3, #2
 8008266:	e05a      	b.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	223c      	movs	r2, #60	@ 0x3c
 800826c:	2101      	movs	r1, #1
 800826e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	223d      	movs	r2, #61	@ 0x3d
 8008274:	2102      	movs	r1, #2
 8008276:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a26      	ldr	r2, [pc, #152]	@ (8008328 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d108      	bne.n	80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4a25      	ldr	r2, [pc, #148]	@ (800832c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008296:	4013      	ands	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2270      	movs	r2, #112	@ 0x70
 80082a8:	4393      	bics	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a19      	ldr	r2, [pc, #100]	@ (8008328 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d014      	beq.n	80082f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	2380      	movs	r3, #128	@ 0x80
 80082ce:	05db      	lsls	r3, r3, #23
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d00e      	beq.n	80082f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a15      	ldr	r2, [pc, #84]	@ (8008330 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d009      	beq.n	80082f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a14      	ldr	r2, [pc, #80]	@ (8008334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d004      	beq.n	80082f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a12      	ldr	r2, [pc, #72]	@ (8008338 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d10c      	bne.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2280      	movs	r2, #128	@ 0x80
 80082f6:	4393      	bics	r3, r2
 80082f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4313      	orrs	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	223d      	movs	r2, #61	@ 0x3d
 8008310:	2101      	movs	r1, #1
 8008312:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	223c      	movs	r2, #60	@ 0x3c
 8008318:	2100      	movs	r1, #0
 800831a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	0018      	movs	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	b004      	add	sp, #16
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	40012c00 	.word	0x40012c00
 800832c:	ff0fffff 	.word	0xff0fffff
 8008330:	40000400 	.word	0x40000400
 8008334:	40000800 	.word	0x40000800
 8008338:	40014000 	.word	0x40014000

0800833c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	223c      	movs	r2, #60	@ 0x3c
 800834e:	5c9b      	ldrb	r3, [r3, r2]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008354:	2302      	movs	r3, #2
 8008356:	e06f      	b.n	8008438 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	223c      	movs	r2, #60	@ 0x3c
 800835c:	2101      	movs	r1, #1
 800835e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	22ff      	movs	r2, #255	@ 0xff
 8008364:	4393      	bics	r3, r2
 8008366:	001a      	movs	r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	4313      	orrs	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4a33      	ldr	r2, [pc, #204]	@ (8008440 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8008374:	401a      	ands	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4a30      	ldr	r2, [pc, #192]	@ (8008444 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008382:	401a      	ands	r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4a2e      	ldr	r2, [pc, #184]	@ (8008448 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8008390:	401a      	ands	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4a2b      	ldr	r2, [pc, #172]	@ (800844c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800839e:	401a      	ands	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4a29      	ldr	r2, [pc, #164]	@ (8008450 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80083ac:	401a      	ands	r2, r3
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4a26      	ldr	r2, [pc, #152]	@ (8008454 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80083ba:	401a      	ands	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a24      	ldr	r2, [pc, #144]	@ (8008458 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80083c8:	401a      	ands	r2, r3
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a21      	ldr	r2, [pc, #132]	@ (800845c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80083d8:	401a      	ands	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008460 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d11c      	bne.n	8008426 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008464 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80083f0:	401a      	ands	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	051b      	lsls	r3, r3, #20
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008468 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008400:	401a      	ands	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a17      	ldr	r2, [pc, #92]	@ (800846c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800840e:	401a      	ands	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4a15      	ldr	r2, [pc, #84]	@ (8008470 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800841c:	401a      	ands	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	223c      	movs	r2, #60	@ 0x3c
 8008432:	2100      	movs	r1, #0
 8008434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b004      	add	sp, #16
 800843e:	bd80      	pop	{r7, pc}
 8008440:	fffffcff 	.word	0xfffffcff
 8008444:	fffffbff 	.word	0xfffffbff
 8008448:	fffff7ff 	.word	0xfffff7ff
 800844c:	ffffefff 	.word	0xffffefff
 8008450:	ffffdfff 	.word	0xffffdfff
 8008454:	ffffbfff 	.word	0xffffbfff
 8008458:	fff0ffff 	.word	0xfff0ffff
 800845c:	efffffff 	.word	0xefffffff
 8008460:	40012c00 	.word	0x40012c00
 8008464:	ff0fffff 	.word	0xff0fffff
 8008468:	feffffff 	.word	0xfeffffff
 800846c:	fdffffff 	.word	0xfdffffff
 8008470:	dfffffff 	.word	0xdfffffff

08008474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e046      	b.n	8008514 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2288      	movs	r2, #136	@ 0x88
 800848a:	589b      	ldr	r3, [r3, r2]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d107      	bne.n	80084a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2284      	movs	r2, #132	@ 0x84
 8008494:	2100      	movs	r1, #0
 8008496:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0018      	movs	r0, r3
 800849c:	f7fc fa62 	bl	8004964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2288      	movs	r2, #136	@ 0x88
 80084a4:	2124      	movs	r1, #36	@ 0x24
 80084a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2101      	movs	r1, #1
 80084b4:	438a      	bics	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	0018      	movs	r0, r3
 80084c4:	f000 ffce 	bl	8009464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	0018      	movs	r0, r3
 80084cc:	f000 fc74 	bl	8008db8 <UART_SetConfig>
 80084d0:	0003      	movs	r3, r0
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e01c      	b.n	8008514 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	490d      	ldr	r1, [pc, #52]	@ (800851c <HAL_UART_Init+0xa8>)
 80084e6:	400a      	ands	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	212a      	movs	r1, #42	@ 0x2a
 80084f6:	438a      	bics	r2, r1
 80084f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2101      	movs	r1, #1
 8008506:	430a      	orrs	r2, r1
 8008508:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	0018      	movs	r0, r3
 800850e:	f001 f85d 	bl	80095cc <UART_CheckIdleState>
 8008512:	0003      	movs	r3, r0
}
 8008514:	0018      	movs	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	b002      	add	sp, #8
 800851a:	bd80      	pop	{r7, pc}
 800851c:	ffffb7ff 	.word	0xffffb7ff

08008520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08a      	sub	sp, #40	@ 0x28
 8008524:	af02      	add	r7, sp, #8
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	1dbb      	adds	r3, r7, #6
 800852e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2288      	movs	r2, #136	@ 0x88
 8008534:	589b      	ldr	r3, [r3, r2]
 8008536:	2b20      	cmp	r3, #32
 8008538:	d000      	beq.n	800853c <HAL_UART_Transmit+0x1c>
 800853a:	e090      	b.n	800865e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_UART_Transmit+0x2a>
 8008542:	1dbb      	adds	r3, r7, #6
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e088      	b.n	8008660 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	2380      	movs	r3, #128	@ 0x80
 8008554:	015b      	lsls	r3, r3, #5
 8008556:	429a      	cmp	r2, r3
 8008558:	d109      	bne.n	800856e <HAL_UART_Transmit+0x4e>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d105      	bne.n	800856e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2201      	movs	r2, #1
 8008566:	4013      	ands	r3, r2
 8008568:	d001      	beq.n	800856e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e078      	b.n	8008660 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2290      	movs	r2, #144	@ 0x90
 8008572:	2100      	movs	r1, #0
 8008574:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2288      	movs	r2, #136	@ 0x88
 800857a:	2121      	movs	r1, #33	@ 0x21
 800857c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800857e:	f7fc fbe9 	bl	8004d54 <HAL_GetTick>
 8008582:	0003      	movs	r3, r0
 8008584:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1dba      	adds	r2, r7, #6
 800858a:	2154      	movs	r1, #84	@ 0x54
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1dba      	adds	r2, r7, #6
 8008594:	2156      	movs	r1, #86	@ 0x56
 8008596:	8812      	ldrh	r2, [r2, #0]
 8008598:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	2380      	movs	r3, #128	@ 0x80
 80085a0:	015b      	lsls	r3, r3, #5
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d108      	bne.n	80085b8 <HAL_UART_Transmit+0x98>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	e003      	b.n	80085c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085bc:	2300      	movs	r3, #0
 80085be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085c0:	e030      	b.n	8008624 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	0013      	movs	r3, r2
 80085cc:	2200      	movs	r2, #0
 80085ce:	2180      	movs	r1, #128	@ 0x80
 80085d0:	f001 f8a6 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 80085d4:	1e03      	subs	r3, r0, #0
 80085d6:	d005      	beq.n	80085e4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2288      	movs	r2, #136	@ 0x88
 80085dc:	2120      	movs	r1, #32
 80085de:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e03d      	b.n	8008660 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	001a      	movs	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	05d2      	lsls	r2, r2, #23
 80085f6:	0dd2      	lsrs	r2, r2, #23
 80085f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	3302      	adds	r3, #2
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	e007      	b.n	8008612 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2256      	movs	r2, #86	@ 0x56
 8008616:	5a9b      	ldrh	r3, [r3, r2]
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b299      	uxth	r1, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2256      	movs	r2, #86	@ 0x56
 8008622:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2256      	movs	r2, #86	@ 0x56
 8008628:	5a9b      	ldrh	r3, [r3, r2]
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1c8      	bne.n	80085c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	0013      	movs	r3, r2
 800863a:	2200      	movs	r2, #0
 800863c:	2140      	movs	r1, #64	@ 0x40
 800863e:	f001 f86f 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 8008642:	1e03      	subs	r3, r0, #0
 8008644:	d005      	beq.n	8008652 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2288      	movs	r2, #136	@ 0x88
 800864a:	2120      	movs	r1, #32
 800864c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e006      	b.n	8008660 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2288      	movs	r2, #136	@ 0x88
 8008656:	2120      	movs	r1, #32
 8008658:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	e000      	b.n	8008660 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800865e:	2302      	movs	r3, #2
  }
}
 8008660:	0018      	movs	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	b008      	add	sp, #32
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	1dbb      	adds	r3, r7, #6
 8008674:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	228c      	movs	r2, #140	@ 0x8c
 800867a:	589b      	ldr	r3, [r3, r2]
 800867c:	2b20      	cmp	r3, #32
 800867e:	d14f      	bne.n	8008720 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_UART_Receive_IT+0x26>
 8008686:	1dbb      	adds	r3, r7, #6
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e047      	b.n	8008722 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	2380      	movs	r3, #128	@ 0x80
 8008698:	015b      	lsls	r3, r3, #5
 800869a:	429a      	cmp	r2, r3
 800869c:	d109      	bne.n	80086b2 <HAL_UART_Receive_IT+0x4a>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2201      	movs	r2, #1
 80086aa:	4013      	ands	r3, r2
 80086ac:	d001      	beq.n	80086b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e037      	b.n	8008722 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1b      	ldr	r2, [pc, #108]	@ (800872c <HAL_UART_Receive_IT+0xc4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d025      	beq.n	800870e <HAL_UART_Receive_IT+0xa6>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008730 <HAL_UART_Receive_IT+0xc8>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d020      	beq.n	800870e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	2380      	movs	r3, #128	@ 0x80
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	4013      	ands	r3, r2
 80086d8:	d019      	beq.n	800870e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086da:	f3ef 8310 	mrs	r3, PRIMASK
 80086de:	613b      	str	r3, [r7, #16]
  return(result);
 80086e0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f383 8810 	msr	PRIMASK, r3
}
 80086ee:	46c0      	nop			@ (mov r8, r8)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2180      	movs	r1, #128	@ 0x80
 80086fc:	04c9      	lsls	r1, r1, #19
 80086fe:	430a      	orrs	r2, r1
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	f383 8810 	msr	PRIMASK, r3
}
 800870c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800870e:	1dbb      	adds	r3, r7, #6
 8008710:	881a      	ldrh	r2, [r3, #0]
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	0018      	movs	r0, r3
 8008718:	f001 f872 	bl	8009800 <UART_Start_Receive_IT>
 800871c:	0003      	movs	r3, r0
 800871e:	e000      	b.n	8008722 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008720:	2302      	movs	r3, #2
  }
}
 8008722:	0018      	movs	r0, r3
 8008724:	46bd      	mov	sp, r7
 8008726:	b008      	add	sp, #32
 8008728:	bd80      	pop	{r7, pc}
 800872a:	46c0      	nop			@ (mov r8, r8)
 800872c:	40008000 	.word	0x40008000
 8008730:	40008400 	.word	0x40008400

08008734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008734:	b5b0      	push	{r4, r5, r7, lr}
 8008736:	b0aa      	sub	sp, #168	@ 0xa8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	22a4      	movs	r2, #164	@ 0xa4
 8008744:	18b9      	adds	r1, r7, r2
 8008746:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	20a0      	movs	r0, #160	@ 0xa0
 8008750:	1839      	adds	r1, r7, r0
 8008752:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	249c      	movs	r4, #156	@ 0x9c
 800875c:	1939      	adds	r1, r7, r4
 800875e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008760:	0011      	movs	r1, r2
 8008762:	18bb      	adds	r3, r7, r2
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4aa2      	ldr	r2, [pc, #648]	@ (80089f0 <HAL_UART_IRQHandler+0x2bc>)
 8008768:	4013      	ands	r3, r2
 800876a:	2298      	movs	r2, #152	@ 0x98
 800876c:	18bd      	adds	r5, r7, r2
 800876e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008770:	18bb      	adds	r3, r7, r2
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11a      	bne.n	80087ae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008778:	187b      	adds	r3, r7, r1
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2220      	movs	r2, #32
 800877e:	4013      	ands	r3, r2
 8008780:	d015      	beq.n	80087ae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008782:	183b      	adds	r3, r7, r0
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2220      	movs	r2, #32
 8008788:	4013      	ands	r3, r2
 800878a:	d105      	bne.n	8008798 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800878c:	193b      	adds	r3, r7, r4
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	2380      	movs	r3, #128	@ 0x80
 8008792:	055b      	lsls	r3, r3, #21
 8008794:	4013      	ands	r3, r2
 8008796:	d00a      	beq.n	80087ae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879c:	2b00      	cmp	r3, #0
 800879e:	d100      	bne.n	80087a2 <HAL_UART_IRQHandler+0x6e>
 80087a0:	e2dc      	b.n	8008d5c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	0010      	movs	r0, r2
 80087aa:	4798      	blx	r3
      }
      return;
 80087ac:	e2d6      	b.n	8008d5c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087ae:	2398      	movs	r3, #152	@ 0x98
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d100      	bne.n	80087ba <HAL_UART_IRQHandler+0x86>
 80087b8:	e122      	b.n	8008a00 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087ba:	239c      	movs	r3, #156	@ 0x9c
 80087bc:	18fb      	adds	r3, r7, r3
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a8c      	ldr	r2, [pc, #560]	@ (80089f4 <HAL_UART_IRQHandler+0x2c0>)
 80087c2:	4013      	ands	r3, r2
 80087c4:	d106      	bne.n	80087d4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087c6:	23a0      	movs	r3, #160	@ 0xa0
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a8a      	ldr	r2, [pc, #552]	@ (80089f8 <HAL_UART_IRQHandler+0x2c4>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	d100      	bne.n	80087d4 <HAL_UART_IRQHandler+0xa0>
 80087d2:	e115      	b.n	8008a00 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087d4:	23a4      	movs	r3, #164	@ 0xa4
 80087d6:	18fb      	adds	r3, r7, r3
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2201      	movs	r2, #1
 80087dc:	4013      	ands	r3, r2
 80087de:	d012      	beq.n	8008806 <HAL_UART_IRQHandler+0xd2>
 80087e0:	23a0      	movs	r3, #160	@ 0xa0
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	2380      	movs	r3, #128	@ 0x80
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4013      	ands	r3, r2
 80087ec:	d00b      	beq.n	8008806 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2201      	movs	r2, #1
 80087f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2290      	movs	r2, #144	@ 0x90
 80087fa:	589b      	ldr	r3, [r3, r2]
 80087fc:	2201      	movs	r2, #1
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2190      	movs	r1, #144	@ 0x90
 8008804:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008806:	23a4      	movs	r3, #164	@ 0xa4
 8008808:	18fb      	adds	r3, r7, r3
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2202      	movs	r2, #2
 800880e:	4013      	ands	r3, r2
 8008810:	d011      	beq.n	8008836 <HAL_UART_IRQHandler+0x102>
 8008812:	239c      	movs	r3, #156	@ 0x9c
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2201      	movs	r2, #1
 800881a:	4013      	ands	r3, r2
 800881c:	d00b      	beq.n	8008836 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2202      	movs	r2, #2
 8008824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2290      	movs	r2, #144	@ 0x90
 800882a:	589b      	ldr	r3, [r3, r2]
 800882c:	2204      	movs	r2, #4
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2190      	movs	r1, #144	@ 0x90
 8008834:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008836:	23a4      	movs	r3, #164	@ 0xa4
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2204      	movs	r2, #4
 800883e:	4013      	ands	r3, r2
 8008840:	d011      	beq.n	8008866 <HAL_UART_IRQHandler+0x132>
 8008842:	239c      	movs	r3, #156	@ 0x9c
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2201      	movs	r2, #1
 800884a:	4013      	ands	r3, r2
 800884c:	d00b      	beq.n	8008866 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2204      	movs	r2, #4
 8008854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2290      	movs	r2, #144	@ 0x90
 800885a:	589b      	ldr	r3, [r3, r2]
 800885c:	2202      	movs	r2, #2
 800885e:	431a      	orrs	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2190      	movs	r1, #144	@ 0x90
 8008864:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008866:	23a4      	movs	r3, #164	@ 0xa4
 8008868:	18fb      	adds	r3, r7, r3
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2208      	movs	r2, #8
 800886e:	4013      	ands	r3, r2
 8008870:	d017      	beq.n	80088a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008872:	23a0      	movs	r3, #160	@ 0xa0
 8008874:	18fb      	adds	r3, r7, r3
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2220      	movs	r2, #32
 800887a:	4013      	ands	r3, r2
 800887c:	d105      	bne.n	800888a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800887e:	239c      	movs	r3, #156	@ 0x9c
 8008880:	18fb      	adds	r3, r7, r3
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a5b      	ldr	r2, [pc, #364]	@ (80089f4 <HAL_UART_IRQHandler+0x2c0>)
 8008886:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008888:	d00b      	beq.n	80088a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2208      	movs	r2, #8
 8008890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2290      	movs	r2, #144	@ 0x90
 8008896:	589b      	ldr	r3, [r3, r2]
 8008898:	2208      	movs	r2, #8
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2190      	movs	r1, #144	@ 0x90
 80088a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088a2:	23a4      	movs	r3, #164	@ 0xa4
 80088a4:	18fb      	adds	r3, r7, r3
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	2380      	movs	r3, #128	@ 0x80
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	4013      	ands	r3, r2
 80088ae:	d013      	beq.n	80088d8 <HAL_UART_IRQHandler+0x1a4>
 80088b0:	23a0      	movs	r3, #160	@ 0xa0
 80088b2:	18fb      	adds	r3, r7, r3
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	2380      	movs	r3, #128	@ 0x80
 80088b8:	04db      	lsls	r3, r3, #19
 80088ba:	4013      	ands	r3, r2
 80088bc:	d00c      	beq.n	80088d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2280      	movs	r2, #128	@ 0x80
 80088c4:	0112      	lsls	r2, r2, #4
 80088c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2290      	movs	r2, #144	@ 0x90
 80088cc:	589b      	ldr	r3, [r3, r2]
 80088ce:	2220      	movs	r2, #32
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2190      	movs	r1, #144	@ 0x90
 80088d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2290      	movs	r2, #144	@ 0x90
 80088dc:	589b      	ldr	r3, [r3, r2]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d100      	bne.n	80088e4 <HAL_UART_IRQHandler+0x1b0>
 80088e2:	e23d      	b.n	8008d60 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088e4:	23a4      	movs	r3, #164	@ 0xa4
 80088e6:	18fb      	adds	r3, r7, r3
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2220      	movs	r2, #32
 80088ec:	4013      	ands	r3, r2
 80088ee:	d015      	beq.n	800891c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088f0:	23a0      	movs	r3, #160	@ 0xa0
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2220      	movs	r2, #32
 80088f8:	4013      	ands	r3, r2
 80088fa:	d106      	bne.n	800890a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088fc:	239c      	movs	r3, #156	@ 0x9c
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	2380      	movs	r3, #128	@ 0x80
 8008904:	055b      	lsls	r3, r3, #21
 8008906:	4013      	ands	r3, r2
 8008908:	d008      	beq.n	800891c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	0010      	movs	r0, r2
 800891a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2290      	movs	r2, #144	@ 0x90
 8008920:	589b      	ldr	r3, [r3, r2]
 8008922:	2194      	movs	r1, #148	@ 0x94
 8008924:	187a      	adds	r2, r7, r1
 8008926:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2240      	movs	r2, #64	@ 0x40
 8008930:	4013      	ands	r3, r2
 8008932:	2b40      	cmp	r3, #64	@ 0x40
 8008934:	d004      	beq.n	8008940 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008936:	187b      	adds	r3, r7, r1
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2228      	movs	r2, #40	@ 0x28
 800893c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800893e:	d04c      	beq.n	80089da <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	0018      	movs	r0, r3
 8008944:	f001 f880 	bl	8009a48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2240      	movs	r2, #64	@ 0x40
 8008950:	4013      	ands	r3, r2
 8008952:	2b40      	cmp	r3, #64	@ 0x40
 8008954:	d13c      	bne.n	80089d0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008956:	f3ef 8310 	mrs	r3, PRIMASK
 800895a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800895c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	2090      	movs	r0, #144	@ 0x90
 8008960:	183a      	adds	r2, r7, r0
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	2301      	movs	r3, #1
 8008966:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800896a:	f383 8810 	msr	PRIMASK, r3
}
 800896e:	46c0      	nop			@ (mov r8, r8)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2140      	movs	r1, #64	@ 0x40
 800897c:	438a      	bics	r2, r1
 800897e:	609a      	str	r2, [r3, #8]
 8008980:	183b      	adds	r3, r7, r0
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008988:	f383 8810 	msr	PRIMASK, r3
}
 800898c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2280      	movs	r2, #128	@ 0x80
 8008992:	589b      	ldr	r3, [r3, r2]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d016      	beq.n	80089c6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2280      	movs	r2, #128	@ 0x80
 800899c:	589b      	ldr	r3, [r3, r2]
 800899e:	4a17      	ldr	r2, [pc, #92]	@ (80089fc <HAL_UART_IRQHandler+0x2c8>)
 80089a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2280      	movs	r2, #128	@ 0x80
 80089a6:	589b      	ldr	r3, [r3, r2]
 80089a8:	0018      	movs	r0, r3
 80089aa:	f7fc fb31 	bl	8005010 <HAL_DMA_Abort_IT>
 80089ae:	1e03      	subs	r3, r0, #0
 80089b0:	d01c      	beq.n	80089ec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2280      	movs	r2, #128	@ 0x80
 80089b6:	589b      	ldr	r3, [r3, r2]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	2180      	movs	r1, #128	@ 0x80
 80089be:	5852      	ldr	r2, [r2, r1]
 80089c0:	0010      	movs	r0, r2
 80089c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c4:	e012      	b.n	80089ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	0018      	movs	r0, r3
 80089ca:	f000 f9e1 	bl	8008d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ce:	e00d      	b.n	80089ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	0018      	movs	r0, r3
 80089d4:	f000 f9dc 	bl	8008d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	e008      	b.n	80089ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	0018      	movs	r0, r3
 80089de:	f000 f9d7 	bl	8008d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2290      	movs	r2, #144	@ 0x90
 80089e6:	2100      	movs	r1, #0
 80089e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80089ea:	e1b9      	b.n	8008d60 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ec:	46c0      	nop			@ (mov r8, r8)
    return;
 80089ee:	e1b7      	b.n	8008d60 <HAL_UART_IRQHandler+0x62c>
 80089f0:	0000080f 	.word	0x0000080f
 80089f4:	10000001 	.word	0x10000001
 80089f8:	04000120 	.word	0x04000120
 80089fc:	08009b15 	.word	0x08009b15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d000      	beq.n	8008a0a <HAL_UART_IRQHandler+0x2d6>
 8008a08:	e13e      	b.n	8008c88 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a0a:	23a4      	movs	r3, #164	@ 0xa4
 8008a0c:	18fb      	adds	r3, r7, r3
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2210      	movs	r2, #16
 8008a12:	4013      	ands	r3, r2
 8008a14:	d100      	bne.n	8008a18 <HAL_UART_IRQHandler+0x2e4>
 8008a16:	e137      	b.n	8008c88 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a18:	23a0      	movs	r3, #160	@ 0xa0
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2210      	movs	r2, #16
 8008a20:	4013      	ands	r3, r2
 8008a22:	d100      	bne.n	8008a26 <HAL_UART_IRQHandler+0x2f2>
 8008a24:	e130      	b.n	8008c88 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2210      	movs	r2, #16
 8008a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2240      	movs	r2, #64	@ 0x40
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b40      	cmp	r3, #64	@ 0x40
 8008a3a:	d000      	beq.n	8008a3e <HAL_UART_IRQHandler+0x30a>
 8008a3c:	e0a4      	b.n	8008b88 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2280      	movs	r2, #128	@ 0x80
 8008a42:	589b      	ldr	r3, [r3, r2]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	217e      	movs	r1, #126	@ 0x7e
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d100      	bne.n	8008a58 <HAL_UART_IRQHandler+0x324>
 8008a56:	e185      	b.n	8008d64 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	225c      	movs	r2, #92	@ 0x5c
 8008a5c:	5a9b      	ldrh	r3, [r3, r2]
 8008a5e:	187a      	adds	r2, r7, r1
 8008a60:	8812      	ldrh	r2, [r2, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d300      	bcc.n	8008a68 <HAL_UART_IRQHandler+0x334>
 8008a66:	e17d      	b.n	8008d64 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	187a      	adds	r2, r7, r1
 8008a6c:	215e      	movs	r1, #94	@ 0x5e
 8008a6e:	8812      	ldrh	r2, [r2, #0]
 8008a70:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2280      	movs	r2, #128	@ 0x80
 8008a76:	589b      	ldr	r3, [r3, r2]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	4013      	ands	r3, r2
 8008a80:	d170      	bne.n	8008b64 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a82:	f3ef 8310 	mrs	r3, PRIMASK
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a92:	f383 8810 	msr	PRIMASK, r3
}
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	49b4      	ldr	r1, [pc, #720]	@ (8008d74 <HAL_UART_IRQHandler+0x640>)
 8008aa4:	400a      	ands	r2, r1
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	f383 8810 	msr	PRIMASK, r3
}
 8008ab2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	677b      	str	r3, [r7, #116]	@ 0x74
 8008abe:	2301      	movs	r3, #1
 8008ac0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac4:	f383 8810 	msr	PRIMASK, r3
}
 8008ac8:	46c0      	nop			@ (mov r8, r8)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	438a      	bics	r2, r1
 8008ad8:	609a      	str	r2, [r3, #8]
 8008ada:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008adc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae0:	f383 8810 	msr	PRIMASK, r3
}
 8008ae4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aee:	673b      	str	r3, [r7, #112]	@ 0x70
 8008af0:	2301      	movs	r3, #1
 8008af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af6:	f383 8810 	msr	PRIMASK, r3
}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2140      	movs	r1, #64	@ 0x40
 8008b08:	438a      	bics	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
 8008b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b0e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b12:	f383 8810 	msr	PRIMASK, r3
}
 8008b16:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	228c      	movs	r2, #140	@ 0x8c
 8008b1c:	2120      	movs	r1, #32
 8008b1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b26:	f3ef 8310 	mrs	r3, PRIMASK
 8008b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b30:	2301      	movs	r3, #1
 8008b32:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b36:	f383 8810 	msr	PRIMASK, r3
}
 8008b3a:	46c0      	nop			@ (mov r8, r8)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2110      	movs	r1, #16
 8008b48:	438a      	bics	r2, r1
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b52:	f383 8810 	msr	PRIMASK, r3
}
 8008b56:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2280      	movs	r2, #128	@ 0x80
 8008b5c:	589b      	ldr	r3, [r3, r2]
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7fc f9f6 	bl	8004f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	225c      	movs	r2, #92	@ 0x5c
 8008b6e:	5a9a      	ldrh	r2, [r3, r2]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	215e      	movs	r1, #94	@ 0x5e
 8008b74:	5a5b      	ldrh	r3, [r3, r1]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	0011      	movs	r1, r2
 8008b80:	0018      	movs	r0, r3
 8008b82:	f000 f90d 	bl	8008da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b86:	e0ed      	b.n	8008d64 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	225c      	movs	r2, #92	@ 0x5c
 8008b8c:	5a99      	ldrh	r1, [r3, r2]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	225e      	movs	r2, #94	@ 0x5e
 8008b92:	5a9b      	ldrh	r3, [r3, r2]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	208e      	movs	r0, #142	@ 0x8e
 8008b98:	183b      	adds	r3, r7, r0
 8008b9a:	1a8a      	subs	r2, r1, r2
 8008b9c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	225e      	movs	r2, #94	@ 0x5e
 8008ba2:	5a9b      	ldrh	r3, [r3, r2]
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d100      	bne.n	8008bac <HAL_UART_IRQHandler+0x478>
 8008baa:	e0dd      	b.n	8008d68 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008bac:	183b      	adds	r3, r7, r0
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d100      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x482>
 8008bb4:	e0d8      	b.n	8008d68 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bbe:	2488      	movs	r4, #136	@ 0x88
 8008bc0:	193a      	adds	r2, r7, r4
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f383 8810 	msr	PRIMASK, r3
}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4967      	ldr	r1, [pc, #412]	@ (8008d78 <HAL_UART_IRQHandler+0x644>)
 8008bdc:	400a      	ands	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	193b      	adds	r3, r7, r4
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f383 8810 	msr	PRIMASK, r3
}
 8008bec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bee:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bf4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bf6:	2484      	movs	r4, #132	@ 0x84
 8008bf8:	193a      	adds	r2, r7, r4
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f383 8810 	msr	PRIMASK, r3
}
 8008c06:	46c0      	nop			@ (mov r8, r8)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	495a      	ldr	r1, [pc, #360]	@ (8008d7c <HAL_UART_IRQHandler+0x648>)
 8008c14:	400a      	ands	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]
 8008c18:	193b      	adds	r3, r7, r4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	f383 8810 	msr	PRIMASK, r3
}
 8008c24:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	228c      	movs	r2, #140	@ 0x8c
 8008c2a:	2120      	movs	r1, #32
 8008c2c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c42:	2480      	movs	r4, #128	@ 0x80
 8008c44:	193a      	adds	r2, r7, r4
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4e:	f383 8810 	msr	PRIMASK, r3
}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2110      	movs	r1, #16
 8008c60:	438a      	bics	r2, r1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	193b      	adds	r3, r7, r4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	f383 8810 	msr	PRIMASK, r3
}
 8008c70:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c78:	183b      	adds	r3, r7, r0
 8008c7a:	881a      	ldrh	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	0011      	movs	r1, r2
 8008c80:	0018      	movs	r0, r3
 8008c82:	f000 f88d 	bl	8008da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c86:	e06f      	b.n	8008d68 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c88:	23a4      	movs	r3, #164	@ 0xa4
 8008c8a:	18fb      	adds	r3, r7, r3
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	2380      	movs	r3, #128	@ 0x80
 8008c90:	035b      	lsls	r3, r3, #13
 8008c92:	4013      	ands	r3, r2
 8008c94:	d010      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x584>
 8008c96:	239c      	movs	r3, #156	@ 0x9c
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	2380      	movs	r3, #128	@ 0x80
 8008c9e:	03db      	lsls	r3, r3, #15
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	d009      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2280      	movs	r2, #128	@ 0x80
 8008caa:	0352      	lsls	r2, r2, #13
 8008cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f001 fc9f 	bl	800a5f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cb6:	e05a      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cb8:	23a4      	movs	r3, #164	@ 0xa4
 8008cba:	18fb      	adds	r3, r7, r3
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2280      	movs	r2, #128	@ 0x80
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	d016      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cc4:	23a0      	movs	r3, #160	@ 0xa0
 8008cc6:	18fb      	adds	r3, r7, r3
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2280      	movs	r2, #128	@ 0x80
 8008ccc:	4013      	ands	r3, r2
 8008cce:	d106      	bne.n	8008cde <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008cd0:	239c      	movs	r3, #156	@ 0x9c
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	2380      	movs	r3, #128	@ 0x80
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d009      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d042      	beq.n	8008d6c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	0010      	movs	r0, r2
 8008cee:	4798      	blx	r3
    }
    return;
 8008cf0:	e03c      	b.n	8008d6c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cf2:	23a4      	movs	r3, #164	@ 0xa4
 8008cf4:	18fb      	adds	r3, r7, r3
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2240      	movs	r2, #64	@ 0x40
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d00a      	beq.n	8008d14 <HAL_UART_IRQHandler+0x5e0>
 8008cfe:	23a0      	movs	r3, #160	@ 0xa0
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2240      	movs	r2, #64	@ 0x40
 8008d06:	4013      	ands	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f000 ff18 	bl	8009b42 <UART_EndTransmit_IT>
    return;
 8008d12:	e02c      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d14:	23a4      	movs	r3, #164	@ 0xa4
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	2380      	movs	r3, #128	@ 0x80
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d00b      	beq.n	8008d3a <HAL_UART_IRQHandler+0x606>
 8008d22:	23a0      	movs	r3, #160	@ 0xa0
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	2380      	movs	r3, #128	@ 0x80
 8008d2a:	05db      	lsls	r3, r3, #23
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	d004      	beq.n	8008d3a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	0018      	movs	r0, r3
 8008d34:	f001 fc6e 	bl	800a614 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d38:	e019      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d3a:	23a4      	movs	r3, #164	@ 0xa4
 8008d3c:	18fb      	adds	r3, r7, r3
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	2380      	movs	r3, #128	@ 0x80
 8008d42:	045b      	lsls	r3, r3, #17
 8008d44:	4013      	ands	r3, r2
 8008d46:	d012      	beq.n	8008d6e <HAL_UART_IRQHandler+0x63a>
 8008d48:	23a0      	movs	r3, #160	@ 0xa0
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da0d      	bge.n	8008d6e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	0018      	movs	r0, r3
 8008d56:	f001 fc55 	bl	800a604 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d5a:	e008      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
      return;
 8008d5c:	46c0      	nop			@ (mov r8, r8)
 8008d5e:	e006      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
    return;
 8008d60:	46c0      	nop			@ (mov r8, r8)
 8008d62:	e004      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
      return;
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	e002      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
      return;
 8008d68:	46c0      	nop			@ (mov r8, r8)
 8008d6a:	e000      	b.n	8008d6e <HAL_UART_IRQHandler+0x63a>
    return;
 8008d6c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	b02a      	add	sp, #168	@ 0xa8
 8008d72:	bdb0      	pop	{r4, r5, r7, pc}
 8008d74:	fffffeff 	.word	0xfffffeff
 8008d78:	fffffedf 	.word	0xfffffedf
 8008d7c:	effffffe 	.word	0xeffffffe

08008d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d88:	46c0      	nop			@ (mov r8, r8)
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	b002      	add	sp, #8
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d98:	46c0      	nop			@ (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b002      	add	sp, #8
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	000a      	movs	r2, r1
 8008daa:	1cbb      	adds	r3, r7, #2
 8008dac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dae:	46c0      	nop			@ (mov r8, r8)
 8008db0:	46bd      	mov	sp, r7
 8008db2:	b002      	add	sp, #8
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b090      	sub	sp, #64	@ 0x40
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dc0:	231a      	movs	r3, #26
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	189b      	adds	r3, r3, r2
 8008dc6:	19db      	adds	r3, r3, r7
 8008dc8:	2200      	movs	r2, #0
 8008dca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4ac1      	ldr	r2, [pc, #772]	@ (80090f0 <UART_SetConfig+0x338>)
 8008dec:	4013      	ands	r3, r2
 8008dee:	0019      	movs	r1, r3
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df6:	430b      	orrs	r3, r1
 8008df8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4abc      	ldr	r2, [pc, #752]	@ (80090f4 <UART_SetConfig+0x33c>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	0018      	movs	r0, r3
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	68d9      	ldr	r1, [r3, #12]
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	0003      	movs	r3, r0
 8008e10:	430b      	orrs	r3, r1
 8008e12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4ab6      	ldr	r2, [pc, #728]	@ (80090f8 <UART_SetConfig+0x340>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d009      	beq.n	8008e38 <UART_SetConfig+0x80>
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4ab4      	ldr	r2, [pc, #720]	@ (80090fc <UART_SetConfig+0x344>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d004      	beq.n	8008e38 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e34:	4313      	orrs	r3, r2
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	4ab0      	ldr	r2, [pc, #704]	@ (8009100 <UART_SetConfig+0x348>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	0019      	movs	r1, r3
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	220f      	movs	r2, #15
 8008e56:	4393      	bics	r3, r2
 8008e58:	0018      	movs	r0, r3
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	0003      	movs	r3, r0
 8008e64:	430b      	orrs	r3, r1
 8008e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4aa5      	ldr	r2, [pc, #660]	@ (8009104 <UART_SetConfig+0x34c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d131      	bne.n	8008ed6 <UART_SetConfig+0x11e>
 8008e72:	4ba5      	ldr	r3, [pc, #660]	@ (8009108 <UART_SetConfig+0x350>)
 8008e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e76:	2203      	movs	r2, #3
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d01d      	beq.n	8008eba <UART_SetConfig+0x102>
 8008e7e:	d823      	bhi.n	8008ec8 <UART_SetConfig+0x110>
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d00c      	beq.n	8008e9e <UART_SetConfig+0xe6>
 8008e84:	d820      	bhi.n	8008ec8 <UART_SetConfig+0x110>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <UART_SetConfig+0xd8>
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d00e      	beq.n	8008eac <UART_SetConfig+0xf4>
 8008e8e:	e01b      	b.n	8008ec8 <UART_SetConfig+0x110>
 8008e90:	231b      	movs	r3, #27
 8008e92:	2220      	movs	r2, #32
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	19db      	adds	r3, r3, r7
 8008e98:	2200      	movs	r2, #0
 8008e9a:	701a      	strb	r2, [r3, #0]
 8008e9c:	e154      	b.n	8009148 <UART_SetConfig+0x390>
 8008e9e:	231b      	movs	r3, #27
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	189b      	adds	r3, r3, r2
 8008ea4:	19db      	adds	r3, r3, r7
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e14d      	b.n	8009148 <UART_SetConfig+0x390>
 8008eac:	231b      	movs	r3, #27
 8008eae:	2220      	movs	r2, #32
 8008eb0:	189b      	adds	r3, r3, r2
 8008eb2:	19db      	adds	r3, r3, r7
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	701a      	strb	r2, [r3, #0]
 8008eb8:	e146      	b.n	8009148 <UART_SetConfig+0x390>
 8008eba:	231b      	movs	r3, #27
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	19db      	adds	r3, r3, r7
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	e13f      	b.n	8009148 <UART_SetConfig+0x390>
 8008ec8:	231b      	movs	r3, #27
 8008eca:	2220      	movs	r2, #32
 8008ecc:	189b      	adds	r3, r3, r2
 8008ece:	19db      	adds	r3, r3, r7
 8008ed0:	2210      	movs	r2, #16
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	e138      	b.n	8009148 <UART_SetConfig+0x390>
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a8c      	ldr	r2, [pc, #560]	@ (800910c <UART_SetConfig+0x354>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d131      	bne.n	8008f44 <UART_SetConfig+0x18c>
 8008ee0:	4b89      	ldr	r3, [pc, #548]	@ (8009108 <UART_SetConfig+0x350>)
 8008ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee4:	220c      	movs	r2, #12
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	2b0c      	cmp	r3, #12
 8008eea:	d01d      	beq.n	8008f28 <UART_SetConfig+0x170>
 8008eec:	d823      	bhi.n	8008f36 <UART_SetConfig+0x17e>
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d00c      	beq.n	8008f0c <UART_SetConfig+0x154>
 8008ef2:	d820      	bhi.n	8008f36 <UART_SetConfig+0x17e>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <UART_SetConfig+0x146>
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d00e      	beq.n	8008f1a <UART_SetConfig+0x162>
 8008efc:	e01b      	b.n	8008f36 <UART_SetConfig+0x17e>
 8008efe:	231b      	movs	r3, #27
 8008f00:	2220      	movs	r2, #32
 8008f02:	189b      	adds	r3, r3, r2
 8008f04:	19db      	adds	r3, r3, r7
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e11d      	b.n	8009148 <UART_SetConfig+0x390>
 8008f0c:	231b      	movs	r3, #27
 8008f0e:	2220      	movs	r2, #32
 8008f10:	189b      	adds	r3, r3, r2
 8008f12:	19db      	adds	r3, r3, r7
 8008f14:	2202      	movs	r2, #2
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e116      	b.n	8009148 <UART_SetConfig+0x390>
 8008f1a:	231b      	movs	r3, #27
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	189b      	adds	r3, r3, r2
 8008f20:	19db      	adds	r3, r3, r7
 8008f22:	2204      	movs	r2, #4
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e10f      	b.n	8009148 <UART_SetConfig+0x390>
 8008f28:	231b      	movs	r3, #27
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	189b      	adds	r3, r3, r2
 8008f2e:	19db      	adds	r3, r3, r7
 8008f30:	2208      	movs	r2, #8
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	e108      	b.n	8009148 <UART_SetConfig+0x390>
 8008f36:	231b      	movs	r3, #27
 8008f38:	2220      	movs	r2, #32
 8008f3a:	189b      	adds	r3, r3, r2
 8008f3c:	19db      	adds	r3, r3, r7
 8008f3e:	2210      	movs	r2, #16
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	e101      	b.n	8009148 <UART_SetConfig+0x390>
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a71      	ldr	r2, [pc, #452]	@ (8009110 <UART_SetConfig+0x358>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d131      	bne.n	8008fb2 <UART_SetConfig+0x1fa>
 8008f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8009108 <UART_SetConfig+0x350>)
 8008f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f52:	2230      	movs	r2, #48	@ 0x30
 8008f54:	4013      	ands	r3, r2
 8008f56:	2b30      	cmp	r3, #48	@ 0x30
 8008f58:	d01d      	beq.n	8008f96 <UART_SetConfig+0x1de>
 8008f5a:	d823      	bhi.n	8008fa4 <UART_SetConfig+0x1ec>
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d00c      	beq.n	8008f7a <UART_SetConfig+0x1c2>
 8008f60:	d820      	bhi.n	8008fa4 <UART_SetConfig+0x1ec>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <UART_SetConfig+0x1b4>
 8008f66:	2b10      	cmp	r3, #16
 8008f68:	d00e      	beq.n	8008f88 <UART_SetConfig+0x1d0>
 8008f6a:	e01b      	b.n	8008fa4 <UART_SetConfig+0x1ec>
 8008f6c:	231b      	movs	r3, #27
 8008f6e:	2220      	movs	r2, #32
 8008f70:	189b      	adds	r3, r3, r2
 8008f72:	19db      	adds	r3, r3, r7
 8008f74:	2200      	movs	r2, #0
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	e0e6      	b.n	8009148 <UART_SetConfig+0x390>
 8008f7a:	231b      	movs	r3, #27
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	189b      	adds	r3, r3, r2
 8008f80:	19db      	adds	r3, r3, r7
 8008f82:	2202      	movs	r2, #2
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	e0df      	b.n	8009148 <UART_SetConfig+0x390>
 8008f88:	231b      	movs	r3, #27
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	189b      	adds	r3, r3, r2
 8008f8e:	19db      	adds	r3, r3, r7
 8008f90:	2204      	movs	r2, #4
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	e0d8      	b.n	8009148 <UART_SetConfig+0x390>
 8008f96:	231b      	movs	r3, #27
 8008f98:	2220      	movs	r2, #32
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	19db      	adds	r3, r3, r7
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e0d1      	b.n	8009148 <UART_SetConfig+0x390>
 8008fa4:	231b      	movs	r3, #27
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	189b      	adds	r3, r3, r2
 8008faa:	19db      	adds	r3, r3, r7
 8008fac:	2210      	movs	r2, #16
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	e0ca      	b.n	8009148 <UART_SetConfig+0x390>
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a57      	ldr	r2, [pc, #348]	@ (8009114 <UART_SetConfig+0x35c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d106      	bne.n	8008fca <UART_SetConfig+0x212>
 8008fbc:	231b      	movs	r3, #27
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	189b      	adds	r3, r3, r2
 8008fc2:	19db      	adds	r3, r3, r7
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	e0be      	b.n	8009148 <UART_SetConfig+0x390>
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a52      	ldr	r2, [pc, #328]	@ (8009118 <UART_SetConfig+0x360>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d106      	bne.n	8008fe2 <UART_SetConfig+0x22a>
 8008fd4:	231b      	movs	r3, #27
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	189b      	adds	r3, r3, r2
 8008fda:	19db      	adds	r3, r3, r7
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	e0b2      	b.n	8009148 <UART_SetConfig+0x390>
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a4d      	ldr	r2, [pc, #308]	@ (800911c <UART_SetConfig+0x364>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d106      	bne.n	8008ffa <UART_SetConfig+0x242>
 8008fec:	231b      	movs	r3, #27
 8008fee:	2220      	movs	r2, #32
 8008ff0:	189b      	adds	r3, r3, r2
 8008ff2:	19db      	adds	r3, r3, r7
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]
 8008ff8:	e0a6      	b.n	8009148 <UART_SetConfig+0x390>
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80090f8 <UART_SetConfig+0x340>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d13e      	bne.n	8009082 <UART_SetConfig+0x2ca>
 8009004:	4b40      	ldr	r3, [pc, #256]	@ (8009108 <UART_SetConfig+0x350>)
 8009006:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009008:	23c0      	movs	r3, #192	@ 0xc0
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	4013      	ands	r3, r2
 800900e:	22c0      	movs	r2, #192	@ 0xc0
 8009010:	0112      	lsls	r2, r2, #4
 8009012:	4293      	cmp	r3, r2
 8009014:	d027      	beq.n	8009066 <UART_SetConfig+0x2ae>
 8009016:	22c0      	movs	r2, #192	@ 0xc0
 8009018:	0112      	lsls	r2, r2, #4
 800901a:	4293      	cmp	r3, r2
 800901c:	d82a      	bhi.n	8009074 <UART_SetConfig+0x2bc>
 800901e:	2280      	movs	r2, #128	@ 0x80
 8009020:	0112      	lsls	r2, r2, #4
 8009022:	4293      	cmp	r3, r2
 8009024:	d011      	beq.n	800904a <UART_SetConfig+0x292>
 8009026:	2280      	movs	r2, #128	@ 0x80
 8009028:	0112      	lsls	r2, r2, #4
 800902a:	4293      	cmp	r3, r2
 800902c:	d822      	bhi.n	8009074 <UART_SetConfig+0x2bc>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <UART_SetConfig+0x284>
 8009032:	2280      	movs	r2, #128	@ 0x80
 8009034:	00d2      	lsls	r2, r2, #3
 8009036:	4293      	cmp	r3, r2
 8009038:	d00e      	beq.n	8009058 <UART_SetConfig+0x2a0>
 800903a:	e01b      	b.n	8009074 <UART_SetConfig+0x2bc>
 800903c:	231b      	movs	r3, #27
 800903e:	2220      	movs	r2, #32
 8009040:	189b      	adds	r3, r3, r2
 8009042:	19db      	adds	r3, r3, r7
 8009044:	2200      	movs	r2, #0
 8009046:	701a      	strb	r2, [r3, #0]
 8009048:	e07e      	b.n	8009148 <UART_SetConfig+0x390>
 800904a:	231b      	movs	r3, #27
 800904c:	2220      	movs	r2, #32
 800904e:	189b      	adds	r3, r3, r2
 8009050:	19db      	adds	r3, r3, r7
 8009052:	2202      	movs	r2, #2
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e077      	b.n	8009148 <UART_SetConfig+0x390>
 8009058:	231b      	movs	r3, #27
 800905a:	2220      	movs	r2, #32
 800905c:	189b      	adds	r3, r3, r2
 800905e:	19db      	adds	r3, r3, r7
 8009060:	2204      	movs	r2, #4
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e070      	b.n	8009148 <UART_SetConfig+0x390>
 8009066:	231b      	movs	r3, #27
 8009068:	2220      	movs	r2, #32
 800906a:	189b      	adds	r3, r3, r2
 800906c:	19db      	adds	r3, r3, r7
 800906e:	2208      	movs	r2, #8
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	e069      	b.n	8009148 <UART_SetConfig+0x390>
 8009074:	231b      	movs	r3, #27
 8009076:	2220      	movs	r2, #32
 8009078:	189b      	adds	r3, r3, r2
 800907a:	19db      	adds	r3, r3, r7
 800907c:	2210      	movs	r2, #16
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	e062      	b.n	8009148 <UART_SetConfig+0x390>
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a1d      	ldr	r2, [pc, #116]	@ (80090fc <UART_SetConfig+0x344>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d157      	bne.n	800913c <UART_SetConfig+0x384>
 800908c:	4b1e      	ldr	r3, [pc, #120]	@ (8009108 <UART_SetConfig+0x350>)
 800908e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009090:	23c0      	movs	r3, #192	@ 0xc0
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4013      	ands	r3, r2
 8009096:	22c0      	movs	r2, #192	@ 0xc0
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	4293      	cmp	r3, r2
 800909c:	d040      	beq.n	8009120 <UART_SetConfig+0x368>
 800909e:	22c0      	movs	r2, #192	@ 0xc0
 80090a0:	0092      	lsls	r2, r2, #2
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d843      	bhi.n	800912e <UART_SetConfig+0x376>
 80090a6:	2280      	movs	r2, #128	@ 0x80
 80090a8:	0092      	lsls	r2, r2, #2
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d011      	beq.n	80090d2 <UART_SetConfig+0x31a>
 80090ae:	2280      	movs	r2, #128	@ 0x80
 80090b0:	0092      	lsls	r2, r2, #2
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d83b      	bhi.n	800912e <UART_SetConfig+0x376>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <UART_SetConfig+0x30c>
 80090ba:	2280      	movs	r2, #128	@ 0x80
 80090bc:	0052      	lsls	r2, r2, #1
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00e      	beq.n	80090e0 <UART_SetConfig+0x328>
 80090c2:	e034      	b.n	800912e <UART_SetConfig+0x376>
 80090c4:	231b      	movs	r3, #27
 80090c6:	2220      	movs	r2, #32
 80090c8:	189b      	adds	r3, r3, r2
 80090ca:	19db      	adds	r3, r3, r7
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	e03a      	b.n	8009148 <UART_SetConfig+0x390>
 80090d2:	231b      	movs	r3, #27
 80090d4:	2220      	movs	r2, #32
 80090d6:	189b      	adds	r3, r3, r2
 80090d8:	19db      	adds	r3, r3, r7
 80090da:	2202      	movs	r2, #2
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	e033      	b.n	8009148 <UART_SetConfig+0x390>
 80090e0:	231b      	movs	r3, #27
 80090e2:	2220      	movs	r2, #32
 80090e4:	189b      	adds	r3, r3, r2
 80090e6:	19db      	adds	r3, r3, r7
 80090e8:	2204      	movs	r2, #4
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	e02c      	b.n	8009148 <UART_SetConfig+0x390>
 80090ee:	46c0      	nop			@ (mov r8, r8)
 80090f0:	cfff69f3 	.word	0xcfff69f3
 80090f4:	ffffcfff 	.word	0xffffcfff
 80090f8:	40008000 	.word	0x40008000
 80090fc:	40008400 	.word	0x40008400
 8009100:	11fff4ff 	.word	0x11fff4ff
 8009104:	40013800 	.word	0x40013800
 8009108:	40021000 	.word	0x40021000
 800910c:	40004400 	.word	0x40004400
 8009110:	40004800 	.word	0x40004800
 8009114:	40004c00 	.word	0x40004c00
 8009118:	40005000 	.word	0x40005000
 800911c:	40013c00 	.word	0x40013c00
 8009120:	231b      	movs	r3, #27
 8009122:	2220      	movs	r2, #32
 8009124:	189b      	adds	r3, r3, r2
 8009126:	19db      	adds	r3, r3, r7
 8009128:	2208      	movs	r2, #8
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	e00c      	b.n	8009148 <UART_SetConfig+0x390>
 800912e:	231b      	movs	r3, #27
 8009130:	2220      	movs	r2, #32
 8009132:	189b      	adds	r3, r3, r2
 8009134:	19db      	adds	r3, r3, r7
 8009136:	2210      	movs	r2, #16
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	e005      	b.n	8009148 <UART_SetConfig+0x390>
 800913c:	231b      	movs	r3, #27
 800913e:	2220      	movs	r2, #32
 8009140:	189b      	adds	r3, r3, r2
 8009142:	19db      	adds	r3, r3, r7
 8009144:	2210      	movs	r2, #16
 8009146:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4ac1      	ldr	r2, [pc, #772]	@ (8009454 <UART_SetConfig+0x69c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d005      	beq.n	800915e <UART_SetConfig+0x3a6>
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4ac0      	ldr	r2, [pc, #768]	@ (8009458 <UART_SetConfig+0x6a0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d000      	beq.n	800915e <UART_SetConfig+0x3a6>
 800915c:	e093      	b.n	8009286 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800915e:	231b      	movs	r3, #27
 8009160:	2220      	movs	r2, #32
 8009162:	189b      	adds	r3, r3, r2
 8009164:	19db      	adds	r3, r3, r7
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b08      	cmp	r3, #8
 800916a:	d015      	beq.n	8009198 <UART_SetConfig+0x3e0>
 800916c:	dc18      	bgt.n	80091a0 <UART_SetConfig+0x3e8>
 800916e:	2b04      	cmp	r3, #4
 8009170:	d00d      	beq.n	800918e <UART_SetConfig+0x3d6>
 8009172:	dc15      	bgt.n	80091a0 <UART_SetConfig+0x3e8>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <UART_SetConfig+0x3c6>
 8009178:	2b02      	cmp	r3, #2
 800917a:	d005      	beq.n	8009188 <UART_SetConfig+0x3d0>
 800917c:	e010      	b.n	80091a0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800917e:	f7fd fd2f 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 8009182:	0003      	movs	r3, r0
 8009184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009186:	e014      	b.n	80091b2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009188:	4bb4      	ldr	r3, [pc, #720]	@ (800945c <UART_SetConfig+0x6a4>)
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800918c:	e011      	b.n	80091b2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800918e:	f7fd fc9b 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8009192:	0003      	movs	r3, r0
 8009194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009196:	e00c      	b.n	80091b2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009198:	2380      	movs	r3, #128	@ 0x80
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800919e:	e008      	b.n	80091b2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80091a4:	231a      	movs	r3, #26
 80091a6:	2220      	movs	r2, #32
 80091a8:	189b      	adds	r3, r3, r2
 80091aa:	19db      	adds	r3, r3, r7
 80091ac:	2201      	movs	r2, #1
 80091ae:	701a      	strb	r2, [r3, #0]
        break;
 80091b0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d100      	bne.n	80091ba <UART_SetConfig+0x402>
 80091b8:	e135      	b.n	8009426 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091be:	4ba8      	ldr	r3, [pc, #672]	@ (8009460 <UART_SetConfig+0x6a8>)
 80091c0:	0052      	lsls	r2, r2, #1
 80091c2:	5ad3      	ldrh	r3, [r2, r3]
 80091c4:	0019      	movs	r1, r3
 80091c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80091c8:	f7f6 ffb8 	bl	800013c <__udivsi3>
 80091cc:	0003      	movs	r3, r0
 80091ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	0013      	movs	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	189b      	adds	r3, r3, r2
 80091da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091dc:	429a      	cmp	r2, r3
 80091de:	d305      	bcc.n	80091ec <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d906      	bls.n	80091fa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80091ec:	231a      	movs	r3, #26
 80091ee:	2220      	movs	r2, #32
 80091f0:	189b      	adds	r3, r3, r2
 80091f2:	19db      	adds	r3, r3, r7
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e044      	b.n	8009284 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009206:	4b96      	ldr	r3, [pc, #600]	@ (8009460 <UART_SetConfig+0x6a8>)
 8009208:	0052      	lsls	r2, r2, #1
 800920a:	5ad3      	ldrh	r3, [r2, r3]
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	69b8      	ldr	r0, [r7, #24]
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	f7f7 f97d 	bl	8000518 <__aeabi_uldivmod>
 800921e:	0002      	movs	r2, r0
 8009220:	000b      	movs	r3, r1
 8009222:	0e11      	lsrs	r1, r2, #24
 8009224:	021d      	lsls	r5, r3, #8
 8009226:	430d      	orrs	r5, r1
 8009228:	0214      	lsls	r4, r2, #8
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	60bb      	str	r3, [r7, #8]
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	68f9      	ldr	r1, [r7, #12]
 800923a:	1900      	adds	r0, r0, r4
 800923c:	4169      	adcs	r1, r5
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	607b      	str	r3, [r7, #4]
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f7f7 f964 	bl	8000518 <__aeabi_uldivmod>
 8009250:	0002      	movs	r2, r0
 8009252:	000b      	movs	r3, r1
 8009254:	0013      	movs	r3, r2
 8009256:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800925a:	23c0      	movs	r3, #192	@ 0xc0
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	429a      	cmp	r2, r3
 8009260:	d309      	bcc.n	8009276 <UART_SetConfig+0x4be>
 8009262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	035b      	lsls	r3, r3, #13
 8009268:	429a      	cmp	r2, r3
 800926a:	d204      	bcs.n	8009276 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800926c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009272:	60da      	str	r2, [r3, #12]
 8009274:	e006      	b.n	8009284 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8009276:	231a      	movs	r3, #26
 8009278:	2220      	movs	r2, #32
 800927a:	189b      	adds	r3, r3, r2
 800927c:	19db      	adds	r3, r3, r7
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8009282:	e0d0      	b.n	8009426 <UART_SetConfig+0x66e>
 8009284:	e0cf      	b.n	8009426 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	69da      	ldr	r2, [r3, #28]
 800928a:	2380      	movs	r3, #128	@ 0x80
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	429a      	cmp	r2, r3
 8009290:	d000      	beq.n	8009294 <UART_SetConfig+0x4dc>
 8009292:	e070      	b.n	8009376 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8009294:	231b      	movs	r3, #27
 8009296:	2220      	movs	r2, #32
 8009298:	189b      	adds	r3, r3, r2
 800929a:	19db      	adds	r3, r3, r7
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d015      	beq.n	80092ce <UART_SetConfig+0x516>
 80092a2:	dc18      	bgt.n	80092d6 <UART_SetConfig+0x51e>
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d00d      	beq.n	80092c4 <UART_SetConfig+0x50c>
 80092a8:	dc15      	bgt.n	80092d6 <UART_SetConfig+0x51e>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <UART_SetConfig+0x4fc>
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d005      	beq.n	80092be <UART_SetConfig+0x506>
 80092b2:	e010      	b.n	80092d6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b4:	f7fd fc94 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 80092b8:	0003      	movs	r3, r0
 80092ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092bc:	e014      	b.n	80092e8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092be:	4b67      	ldr	r3, [pc, #412]	@ (800945c <UART_SetConfig+0x6a4>)
 80092c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092c2:	e011      	b.n	80092e8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092c4:	f7fd fc00 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 80092c8:	0003      	movs	r3, r0
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092cc:	e00c      	b.n	80092e8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ce:	2380      	movs	r3, #128	@ 0x80
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092d4:	e008      	b.n	80092e8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80092da:	231a      	movs	r3, #26
 80092dc:	2220      	movs	r2, #32
 80092de:	189b      	adds	r3, r3, r2
 80092e0:	19db      	adds	r3, r3, r7
 80092e2:	2201      	movs	r2, #1
 80092e4:	701a      	strb	r2, [r3, #0]
        break;
 80092e6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d100      	bne.n	80092f0 <UART_SetConfig+0x538>
 80092ee:	e09a      	b.n	8009426 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092f4:	4b5a      	ldr	r3, [pc, #360]	@ (8009460 <UART_SetConfig+0x6a8>)
 80092f6:	0052      	lsls	r2, r2, #1
 80092f8:	5ad3      	ldrh	r3, [r2, r3]
 80092fa:	0019      	movs	r1, r3
 80092fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80092fe:	f7f6 ff1d 	bl	800013c <__udivsi3>
 8009302:	0003      	movs	r3, r0
 8009304:	005a      	lsls	r2, r3, #1
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	18d2      	adds	r2, r2, r3
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	0019      	movs	r1, r3
 8009314:	0010      	movs	r0, r2
 8009316:	f7f6 ff11 	bl	800013c <__udivsi3>
 800931a:	0003      	movs	r3, r0
 800931c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	2b0f      	cmp	r3, #15
 8009322:	d921      	bls.n	8009368 <UART_SetConfig+0x5b0>
 8009324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009326:	2380      	movs	r3, #128	@ 0x80
 8009328:	025b      	lsls	r3, r3, #9
 800932a:	429a      	cmp	r2, r3
 800932c:	d21c      	bcs.n	8009368 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	b29a      	uxth	r2, r3
 8009332:	200e      	movs	r0, #14
 8009334:	2420      	movs	r4, #32
 8009336:	1903      	adds	r3, r0, r4
 8009338:	19db      	adds	r3, r3, r7
 800933a:	210f      	movs	r1, #15
 800933c:	438a      	bics	r2, r1
 800933e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009342:	085b      	lsrs	r3, r3, #1
 8009344:	b29b      	uxth	r3, r3
 8009346:	2207      	movs	r2, #7
 8009348:	4013      	ands	r3, r2
 800934a:	b299      	uxth	r1, r3
 800934c:	1903      	adds	r3, r0, r4
 800934e:	19db      	adds	r3, r3, r7
 8009350:	1902      	adds	r2, r0, r4
 8009352:	19d2      	adds	r2, r2, r7
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	1902      	adds	r2, r0, r4
 8009360:	19d2      	adds	r2, r2, r7
 8009362:	8812      	ldrh	r2, [r2, #0]
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	e05e      	b.n	8009426 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8009368:	231a      	movs	r3, #26
 800936a:	2220      	movs	r2, #32
 800936c:	189b      	adds	r3, r3, r2
 800936e:	19db      	adds	r3, r3, r7
 8009370:	2201      	movs	r2, #1
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e057      	b.n	8009426 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009376:	231b      	movs	r3, #27
 8009378:	2220      	movs	r2, #32
 800937a:	189b      	adds	r3, r3, r2
 800937c:	19db      	adds	r3, r3, r7
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b08      	cmp	r3, #8
 8009382:	d015      	beq.n	80093b0 <UART_SetConfig+0x5f8>
 8009384:	dc18      	bgt.n	80093b8 <UART_SetConfig+0x600>
 8009386:	2b04      	cmp	r3, #4
 8009388:	d00d      	beq.n	80093a6 <UART_SetConfig+0x5ee>
 800938a:	dc15      	bgt.n	80093b8 <UART_SetConfig+0x600>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <UART_SetConfig+0x5de>
 8009390:	2b02      	cmp	r3, #2
 8009392:	d005      	beq.n	80093a0 <UART_SetConfig+0x5e8>
 8009394:	e010      	b.n	80093b8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009396:	f7fd fc23 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 800939a:	0003      	movs	r3, r0
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800939e:	e014      	b.n	80093ca <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093a0:	4b2e      	ldr	r3, [pc, #184]	@ (800945c <UART_SetConfig+0x6a4>)
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093a4:	e011      	b.n	80093ca <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093a6:	f7fd fb8f 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 80093aa:	0003      	movs	r3, r0
 80093ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ae:	e00c      	b.n	80093ca <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093b6:	e008      	b.n	80093ca <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80093bc:	231a      	movs	r3, #26
 80093be:	2220      	movs	r2, #32
 80093c0:	189b      	adds	r3, r3, r2
 80093c2:	19db      	adds	r3, r3, r7
 80093c4:	2201      	movs	r2, #1
 80093c6:	701a      	strb	r2, [r3, #0]
        break;
 80093c8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80093ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d02a      	beq.n	8009426 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d4:	4b22      	ldr	r3, [pc, #136]	@ (8009460 <UART_SetConfig+0x6a8>)
 80093d6:	0052      	lsls	r2, r2, #1
 80093d8:	5ad3      	ldrh	r3, [r2, r3]
 80093da:	0019      	movs	r1, r3
 80093dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80093de:	f7f6 fead 	bl	800013c <__udivsi3>
 80093e2:	0003      	movs	r3, r0
 80093e4:	001a      	movs	r2, r3
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	18d2      	adds	r2, r2, r3
 80093ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	0019      	movs	r1, r3
 80093f4:	0010      	movs	r0, r2
 80093f6:	f7f6 fea1 	bl	800013c <__udivsi3>
 80093fa:	0003      	movs	r3, r0
 80093fc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2b0f      	cmp	r3, #15
 8009402:	d90a      	bls.n	800941a <UART_SetConfig+0x662>
 8009404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009406:	2380      	movs	r3, #128	@ 0x80
 8009408:	025b      	lsls	r3, r3, #9
 800940a:	429a      	cmp	r2, r3
 800940c:	d205      	bcs.n	800941a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	b29a      	uxth	r2, r3
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60da      	str	r2, [r3, #12]
 8009418:	e005      	b.n	8009426 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800941a:	231a      	movs	r3, #26
 800941c:	2220      	movs	r2, #32
 800941e:	189b      	adds	r3, r3, r2
 8009420:	19db      	adds	r3, r3, r7
 8009422:	2201      	movs	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009428:	226a      	movs	r2, #106	@ 0x6a
 800942a:	2101      	movs	r1, #1
 800942c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	2268      	movs	r2, #104	@ 0x68
 8009432:	2101      	movs	r1, #1
 8009434:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	2200      	movs	r2, #0
 800943a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	2200      	movs	r2, #0
 8009440:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009442:	231a      	movs	r3, #26
 8009444:	2220      	movs	r2, #32
 8009446:	189b      	adds	r3, r3, r2
 8009448:	19db      	adds	r3, r3, r7
 800944a:	781b      	ldrb	r3, [r3, #0]
}
 800944c:	0018      	movs	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	b010      	add	sp, #64	@ 0x40
 8009452:	bdb0      	pop	{r4, r5, r7, pc}
 8009454:	40008000 	.word	0x40008000
 8009458:	40008400 	.word	0x40008400
 800945c:	00f42400 	.word	0x00f42400
 8009460:	0800e548 	.word	0x0800e548

08009464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009470:	2208      	movs	r2, #8
 8009472:	4013      	ands	r3, r2
 8009474:	d00b      	beq.n	800948e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	4a4a      	ldr	r2, [pc, #296]	@ (80095a8 <UART_AdvFeatureConfig+0x144>)
 800947e:	4013      	ands	r3, r2
 8009480:	0019      	movs	r1, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009492:	2201      	movs	r2, #1
 8009494:	4013      	ands	r3, r2
 8009496:	d00b      	beq.n	80094b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	4a43      	ldr	r2, [pc, #268]	@ (80095ac <UART_AdvFeatureConfig+0x148>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	0019      	movs	r1, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b4:	2202      	movs	r2, #2
 80094b6:	4013      	ands	r3, r2
 80094b8:	d00b      	beq.n	80094d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4a3b      	ldr	r2, [pc, #236]	@ (80095b0 <UART_AdvFeatureConfig+0x14c>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	0019      	movs	r1, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d6:	2204      	movs	r2, #4
 80094d8:	4013      	ands	r3, r2
 80094da:	d00b      	beq.n	80094f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	4a34      	ldr	r2, [pc, #208]	@ (80095b4 <UART_AdvFeatureConfig+0x150>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	0019      	movs	r1, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f8:	2210      	movs	r2, #16
 80094fa:	4013      	ands	r3, r2
 80094fc:	d00b      	beq.n	8009516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	4a2c      	ldr	r2, [pc, #176]	@ (80095b8 <UART_AdvFeatureConfig+0x154>)
 8009506:	4013      	ands	r3, r2
 8009508:	0019      	movs	r1, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951a:	2220      	movs	r2, #32
 800951c:	4013      	ands	r3, r2
 800951e:	d00b      	beq.n	8009538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	4a25      	ldr	r2, [pc, #148]	@ (80095bc <UART_AdvFeatureConfig+0x158>)
 8009528:	4013      	ands	r3, r2
 800952a:	0019      	movs	r1, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953c:	2240      	movs	r2, #64	@ 0x40
 800953e:	4013      	ands	r3, r2
 8009540:	d01d      	beq.n	800957e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4a1d      	ldr	r2, [pc, #116]	@ (80095c0 <UART_AdvFeatureConfig+0x15c>)
 800954a:	4013      	ands	r3, r2
 800954c:	0019      	movs	r1, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800955e:	2380      	movs	r3, #128	@ 0x80
 8009560:	035b      	lsls	r3, r3, #13
 8009562:	429a      	cmp	r2, r3
 8009564:	d10b      	bne.n	800957e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	4a15      	ldr	r2, [pc, #84]	@ (80095c4 <UART_AdvFeatureConfig+0x160>)
 800956e:	4013      	ands	r3, r2
 8009570:	0019      	movs	r1, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	2280      	movs	r2, #128	@ 0x80
 8009584:	4013      	ands	r3, r2
 8009586:	d00b      	beq.n	80095a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	4a0e      	ldr	r2, [pc, #56]	@ (80095c8 <UART_AdvFeatureConfig+0x164>)
 8009590:	4013      	ands	r3, r2
 8009592:	0019      	movs	r1, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	605a      	str	r2, [r3, #4]
  }
}
 80095a0:	46c0      	nop			@ (mov r8, r8)
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b002      	add	sp, #8
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	ffff7fff 	.word	0xffff7fff
 80095ac:	fffdffff 	.word	0xfffdffff
 80095b0:	fffeffff 	.word	0xfffeffff
 80095b4:	fffbffff 	.word	0xfffbffff
 80095b8:	ffffefff 	.word	0xffffefff
 80095bc:	ffffdfff 	.word	0xffffdfff
 80095c0:	ffefffff 	.word	0xffefffff
 80095c4:	ff9fffff 	.word	0xff9fffff
 80095c8:	fff7ffff 	.word	0xfff7ffff

080095cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b092      	sub	sp, #72	@ 0x48
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2290      	movs	r2, #144	@ 0x90
 80095d8:	2100      	movs	r1, #0
 80095da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095dc:	f7fb fbba 	bl	8004d54 <HAL_GetTick>
 80095e0:	0003      	movs	r3, r0
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2208      	movs	r2, #8
 80095ec:	4013      	ands	r3, r2
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d12d      	bne.n	800964e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f4:	2280      	movs	r2, #128	@ 0x80
 80095f6:	0391      	lsls	r1, r2, #14
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4a47      	ldr	r2, [pc, #284]	@ (8009718 <UART_CheckIdleState+0x14c>)
 80095fc:	9200      	str	r2, [sp, #0]
 80095fe:	2200      	movs	r2, #0
 8009600:	f000 f88e 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 8009604:	1e03      	subs	r3, r0, #0
 8009606:	d022      	beq.n	800964e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009608:	f3ef 8310 	mrs	r3, PRIMASK
 800960c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009612:	2301      	movs	r3, #1
 8009614:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f383 8810 	msr	PRIMASK, r3
}
 800961c:	46c0      	nop			@ (mov r8, r8)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2180      	movs	r1, #128	@ 0x80
 800962a:	438a      	bics	r2, r1
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009634:	f383 8810 	msr	PRIMASK, r3
}
 8009638:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2288      	movs	r2, #136	@ 0x88
 800963e:	2120      	movs	r1, #32
 8009640:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2284      	movs	r2, #132	@ 0x84
 8009646:	2100      	movs	r1, #0
 8009648:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e060      	b.n	8009710 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2204      	movs	r2, #4
 8009656:	4013      	ands	r3, r2
 8009658:	2b04      	cmp	r3, #4
 800965a:	d146      	bne.n	80096ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800965c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800965e:	2280      	movs	r2, #128	@ 0x80
 8009660:	03d1      	lsls	r1, r2, #15
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4a2c      	ldr	r2, [pc, #176]	@ (8009718 <UART_CheckIdleState+0x14c>)
 8009666:	9200      	str	r2, [sp, #0]
 8009668:	2200      	movs	r2, #0
 800966a:	f000 f859 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 800966e:	1e03      	subs	r3, r0, #0
 8009670:	d03b      	beq.n	80096ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009672:	f3ef 8310 	mrs	r3, PRIMASK
 8009676:	60fb      	str	r3, [r7, #12]
  return(result);
 8009678:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34
 800967c:	2301      	movs	r3, #1
 800967e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f383 8810 	msr	PRIMASK, r3
}
 8009686:	46c0      	nop			@ (mov r8, r8)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4922      	ldr	r1, [pc, #136]	@ (800971c <UART_CheckIdleState+0x150>)
 8009694:	400a      	ands	r2, r1
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800969a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f383 8810 	msr	PRIMASK, r3
}
 80096a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096a4:	f3ef 8310 	mrs	r3, PRIMASK
 80096a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80096aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ae:	2301      	movs	r3, #1
 80096b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f383 8810 	msr	PRIMASK, r3
}
 80096b8:	46c0      	nop			@ (mov r8, r8)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2101      	movs	r1, #1
 80096c6:	438a      	bics	r2, r1
 80096c8:	609a      	str	r2, [r3, #8]
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	f383 8810 	msr	PRIMASK, r3
}
 80096d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	228c      	movs	r2, #140	@ 0x8c
 80096da:	2120      	movs	r1, #32
 80096dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2284      	movs	r2, #132	@ 0x84
 80096e2:	2100      	movs	r1, #0
 80096e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e012      	b.n	8009710 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2288      	movs	r2, #136	@ 0x88
 80096ee:	2120      	movs	r1, #32
 80096f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	228c      	movs	r2, #140	@ 0x8c
 80096f6:	2120      	movs	r1, #32
 80096f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2284      	movs	r2, #132	@ 0x84
 800970a:	2100      	movs	r1, #0
 800970c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	0018      	movs	r0, r3
 8009712:	46bd      	mov	sp, r7
 8009714:	b010      	add	sp, #64	@ 0x40
 8009716:	bd80      	pop	{r7, pc}
 8009718:	01ffffff 	.word	0x01ffffff
 800971c:	fffffedf 	.word	0xfffffedf

08009720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	1dfb      	adds	r3, r7, #7
 800972e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009730:	e051      	b.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	3301      	adds	r3, #1
 8009736:	d04e      	beq.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009738:	f7fb fb0c 	bl	8004d54 <HAL_GetTick>
 800973c:	0002      	movs	r2, r0
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	429a      	cmp	r2, r3
 8009746:	d302      	bcc.n	800974e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e051      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2204      	movs	r2, #4
 800975a:	4013      	ands	r3, r2
 800975c:	d03b      	beq.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b80      	cmp	r3, #128	@ 0x80
 8009762:	d038      	beq.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2b40      	cmp	r3, #64	@ 0x40
 8009768:	d035      	beq.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	2208      	movs	r2, #8
 8009772:	4013      	ands	r3, r2
 8009774:	2b08      	cmp	r3, #8
 8009776:	d111      	bne.n	800979c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2208      	movs	r2, #8
 800977e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	0018      	movs	r0, r3
 8009784:	f000 f960 	bl	8009a48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2290      	movs	r2, #144	@ 0x90
 800978c:	2108      	movs	r1, #8
 800978e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2284      	movs	r2, #132	@ 0x84
 8009794:	2100      	movs	r1, #0
 8009796:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e02c      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	69da      	ldr	r2, [r3, #28]
 80097a2:	2380      	movs	r3, #128	@ 0x80
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	401a      	ands	r2, r3
 80097a8:	2380      	movs	r3, #128	@ 0x80
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d112      	bne.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2280      	movs	r2, #128	@ 0x80
 80097b6:	0112      	lsls	r2, r2, #4
 80097b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	0018      	movs	r0, r3
 80097be:	f000 f943 	bl	8009a48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2290      	movs	r2, #144	@ 0x90
 80097c6:	2120      	movs	r1, #32
 80097c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2284      	movs	r2, #132	@ 0x84
 80097ce:	2100      	movs	r1, #0
 80097d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e00f      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4013      	ands	r3, r2
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	425a      	negs	r2, r3
 80097e6:	4153      	adcs	r3, r2
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	001a      	movs	r2, r3
 80097ec:	1dfb      	adds	r3, r7, #7
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d09e      	beq.n	8009732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	0018      	movs	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b004      	add	sp, #16
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b098      	sub	sp, #96	@ 0x60
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	1dbb      	adds	r3, r7, #6
 800980c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	1dba      	adds	r2, r7, #6
 8009818:	215c      	movs	r1, #92	@ 0x5c
 800981a:	8812      	ldrh	r2, [r2, #0]
 800981c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1dba      	adds	r2, r7, #6
 8009822:	215e      	movs	r1, #94	@ 0x5e
 8009824:	8812      	ldrh	r2, [r2, #0]
 8009826:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	2380      	movs	r3, #128	@ 0x80
 8009834:	015b      	lsls	r3, r3, #5
 8009836:	429a      	cmp	r2, r3
 8009838:	d10d      	bne.n	8009856 <UART_Start_Receive_IT+0x56>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <UART_Start_Receive_IT+0x4c>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2260      	movs	r2, #96	@ 0x60
 8009846:	497b      	ldr	r1, [pc, #492]	@ (8009a34 <UART_Start_Receive_IT+0x234>)
 8009848:	5299      	strh	r1, [r3, r2]
 800984a:	e02e      	b.n	80098aa <UART_Start_Receive_IT+0xaa>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2260      	movs	r2, #96	@ 0x60
 8009850:	21ff      	movs	r1, #255	@ 0xff
 8009852:	5299      	strh	r1, [r3, r2]
 8009854:	e029      	b.n	80098aa <UART_Start_Receive_IT+0xaa>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10d      	bne.n	800987a <UART_Start_Receive_IT+0x7a>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <UART_Start_Receive_IT+0x70>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2260      	movs	r2, #96	@ 0x60
 800986a:	21ff      	movs	r1, #255	@ 0xff
 800986c:	5299      	strh	r1, [r3, r2]
 800986e:	e01c      	b.n	80098aa <UART_Start_Receive_IT+0xaa>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2260      	movs	r2, #96	@ 0x60
 8009874:	217f      	movs	r1, #127	@ 0x7f
 8009876:	5299      	strh	r1, [r3, r2]
 8009878:	e017      	b.n	80098aa <UART_Start_Receive_IT+0xaa>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	2380      	movs	r3, #128	@ 0x80
 8009880:	055b      	lsls	r3, r3, #21
 8009882:	429a      	cmp	r2, r3
 8009884:	d10d      	bne.n	80098a2 <UART_Start_Receive_IT+0xa2>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <UART_Start_Receive_IT+0x98>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2260      	movs	r2, #96	@ 0x60
 8009892:	217f      	movs	r1, #127	@ 0x7f
 8009894:	5299      	strh	r1, [r3, r2]
 8009896:	e008      	b.n	80098aa <UART_Start_Receive_IT+0xaa>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2260      	movs	r2, #96	@ 0x60
 800989c:	213f      	movs	r1, #63	@ 0x3f
 800989e:	5299      	strh	r1, [r3, r2]
 80098a0:	e003      	b.n	80098aa <UART_Start_Receive_IT+0xaa>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2260      	movs	r2, #96	@ 0x60
 80098a6:	2100      	movs	r1, #0
 80098a8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2290      	movs	r2, #144	@ 0x90
 80098ae:	2100      	movs	r1, #0
 80098b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	228c      	movs	r2, #140	@ 0x8c
 80098b6:	2122      	movs	r1, #34	@ 0x22
 80098b8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ba:	f3ef 8310 	mrs	r3, PRIMASK
 80098be:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80098c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098c4:	2301      	movs	r3, #1
 80098c6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ca:	f383 8810 	msr	PRIMASK, r3
}
 80098ce:	46c0      	nop			@ (mov r8, r8)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689a      	ldr	r2, [r3, #8]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2101      	movs	r1, #1
 80098dc:	430a      	orrs	r2, r1
 80098de:	609a      	str	r2, [r3, #8]
 80098e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e6:	f383 8810 	msr	PRIMASK, r3
}
 80098ea:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80098f0:	2380      	movs	r3, #128	@ 0x80
 80098f2:	059b      	lsls	r3, r3, #22
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d150      	bne.n	800999a <UART_Start_Receive_IT+0x19a>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2268      	movs	r2, #104	@ 0x68
 80098fc:	5a9b      	ldrh	r3, [r3, r2]
 80098fe:	1dba      	adds	r2, r7, #6
 8009900:	8812      	ldrh	r2, [r2, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	d349      	bcc.n	800999a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	2380      	movs	r3, #128	@ 0x80
 800990c:	015b      	lsls	r3, r3, #5
 800990e:	429a      	cmp	r2, r3
 8009910:	d107      	bne.n	8009922 <UART_Start_Receive_IT+0x122>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d103      	bne.n	8009922 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4a46      	ldr	r2, [pc, #280]	@ (8009a38 <UART_Start_Receive_IT+0x238>)
 800991e:	675a      	str	r2, [r3, #116]	@ 0x74
 8009920:	e002      	b.n	8009928 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4a45      	ldr	r2, [pc, #276]	@ (8009a3c <UART_Start_Receive_IT+0x23c>)
 8009926:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d019      	beq.n	8009964 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009930:	f3ef 8310 	mrs	r3, PRIMASK
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8009936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009938:	65bb      	str	r3, [r7, #88]	@ 0x58
 800993a:	2301      	movs	r3, #1
 800993c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	f383 8810 	msr	PRIMASK, r3
}
 8009944:	46c0      	nop			@ (mov r8, r8)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2180      	movs	r1, #128	@ 0x80
 8009952:	0049      	lsls	r1, r1, #1
 8009954:	430a      	orrs	r2, r1
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800995a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995e:	f383 8810 	msr	PRIMASK, r3
}
 8009962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009964:	f3ef 8310 	mrs	r3, PRIMASK
 8009968:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800996a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800996c:	657b      	str	r3, [r7, #84]	@ 0x54
 800996e:	2301      	movs	r3, #1
 8009970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009974:	f383 8810 	msr	PRIMASK, r3
}
 8009978:	46c0      	nop			@ (mov r8, r8)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689a      	ldr	r2, [r3, #8]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2180      	movs	r1, #128	@ 0x80
 8009986:	0549      	lsls	r1, r1, #21
 8009988:	430a      	orrs	r2, r1
 800998a:	609a      	str	r2, [r3, #8]
 800998c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800998e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	f383 8810 	msr	PRIMASK, r3
}
 8009996:	46c0      	nop			@ (mov r8, r8)
 8009998:	e047      	b.n	8009a2a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	2380      	movs	r3, #128	@ 0x80
 80099a0:	015b      	lsls	r3, r3, #5
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d107      	bne.n	80099b6 <UART_Start_Receive_IT+0x1b6>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d103      	bne.n	80099b6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4a23      	ldr	r2, [pc, #140]	@ (8009a40 <UART_Start_Receive_IT+0x240>)
 80099b2:	675a      	str	r2, [r3, #116]	@ 0x74
 80099b4:	e002      	b.n	80099bc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4a22      	ldr	r2, [pc, #136]	@ (8009a44 <UART_Start_Receive_IT+0x244>)
 80099ba:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d019      	beq.n	80099f8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099c4:	f3ef 8310 	mrs	r3, PRIMASK
 80099c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80099ca:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80099cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ce:	2301      	movs	r3, #1
 80099d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f383 8810 	msr	PRIMASK, r3
}
 80099d8:	46c0      	nop			@ (mov r8, r8)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2190      	movs	r1, #144	@ 0x90
 80099e6:	0049      	lsls	r1, r1, #1
 80099e8:	430a      	orrs	r2, r1
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	f383 8810 	msr	PRIMASK, r3
}
 80099f6:	e018      	b.n	8009a2a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f8:	f3ef 8310 	mrs	r3, PRIMASK
 80099fc:	613b      	str	r3, [r7, #16]
  return(result);
 80099fe:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f383 8810 	msr	PRIMASK, r3
}
 8009a0c:	46c0      	nop			@ (mov r8, r8)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2120      	movs	r1, #32
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	f383 8810 	msr	PRIMASK, r3
}
 8009a28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b018      	add	sp, #96	@ 0x60
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	000001ff 	.word	0x000001ff
 8009a38:	0800a291 	.word	0x0800a291
 8009a3c:	08009f45 	.word	0x08009f45
 8009a40:	08009d71 	.word	0x08009d71
 8009a44:	08009b9d 	.word	0x08009b9d

08009a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	@ 0x38
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a50:	f3ef 8310 	mrs	r3, PRIMASK
 8009a54:	617b      	str	r3, [r7, #20]
  return(result);
 8009a56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	f383 8810 	msr	PRIMASK, r3
}
 8009a64:	46c0      	nop			@ (mov r8, r8)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4926      	ldr	r1, [pc, #152]	@ (8009b0c <UART_EndRxTransfer+0xc4>)
 8009a72:	400a      	ands	r2, r1
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f383 8810 	msr	PRIMASK, r3
}
 8009a80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a82:	f3ef 8310 	mrs	r3, PRIMASK
 8009a86:	623b      	str	r3, [r7, #32]
  return(result);
 8009a88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	f383 8810 	msr	PRIMASK, r3
}
 8009a96:	46c0      	nop			@ (mov r8, r8)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	491b      	ldr	r1, [pc, #108]	@ (8009b10 <UART_EndRxTransfer+0xc8>)
 8009aa4:	400a      	ands	r2, r1
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	f383 8810 	msr	PRIMASK, r3
}
 8009ab2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d118      	bne.n	8009aee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009abc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f383 8810 	msr	PRIMASK, r3
}
 8009ad0:	46c0      	nop			@ (mov r8, r8)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2110      	movs	r1, #16
 8009ade:	438a      	bics	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f383 8810 	msr	PRIMASK, r3
}
 8009aec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	228c      	movs	r2, #140	@ 0x8c
 8009af2:	2120      	movs	r1, #32
 8009af4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b02:	46c0      	nop			@ (mov r8, r8)
 8009b04:	46bd      	mov	sp, r7
 8009b06:	b00e      	add	sp, #56	@ 0x38
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	46c0      	nop			@ (mov r8, r8)
 8009b0c:	fffffedf 	.word	0xfffffedf
 8009b10:	effffffe 	.word	0xeffffffe

08009b14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	225e      	movs	r2, #94	@ 0x5e
 8009b26:	2100      	movs	r1, #0
 8009b28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2256      	movs	r2, #86	@ 0x56
 8009b2e:	2100      	movs	r1, #0
 8009b30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	0018      	movs	r0, r3
 8009b36:	f7ff f92b 	bl	8008d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b3a:	46c0      	nop			@ (mov r8, r8)
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	b004      	add	sp, #16
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	2301      	movs	r3, #1
 8009b56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f383 8810 	msr	PRIMASK, r3
}
 8009b5e:	46c0      	nop			@ (mov r8, r8)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2140      	movs	r1, #64	@ 0x40
 8009b6c:	438a      	bics	r2, r1
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f383 8810 	msr	PRIMASK, r3
}
 8009b7a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2288      	movs	r2, #136	@ 0x88
 8009b80:	2120      	movs	r1, #32
 8009b82:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f7ff f8f7 	bl	8008d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b92:	46c0      	nop			@ (mov r8, r8)
 8009b94:	46bd      	mov	sp, r7
 8009b96:	b006      	add	sp, #24
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b094      	sub	sp, #80	@ 0x50
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009ba4:	204e      	movs	r0, #78	@ 0x4e
 8009ba6:	183b      	adds	r3, r7, r0
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	2160      	movs	r1, #96	@ 0x60
 8009bac:	5a52      	ldrh	r2, [r2, r1]
 8009bae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	228c      	movs	r2, #140	@ 0x8c
 8009bb4:	589b      	ldr	r3, [r3, r2]
 8009bb6:	2b22      	cmp	r3, #34	@ 0x22
 8009bb8:	d000      	beq.n	8009bbc <UART_RxISR_8BIT+0x20>
 8009bba:	e0c4      	b.n	8009d46 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bc2:	214c      	movs	r1, #76	@ 0x4c
 8009bc4:	187b      	adds	r3, r7, r1
 8009bc6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	183b      	adds	r3, r7, r0
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	b2d9      	uxtb	r1, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd8:	400a      	ands	r2, r1
 8009bda:	b2d2      	uxtb	r2, r2
 8009bdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	225e      	movs	r2, #94	@ 0x5e
 8009bec:	5a9b      	ldrh	r3, [r3, r2]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	b299      	uxth	r1, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	225e      	movs	r2, #94	@ 0x5e
 8009bf8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	225e      	movs	r2, #94	@ 0x5e
 8009bfe:	5a9b      	ldrh	r3, [r3, r2]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d000      	beq.n	8009c08 <UART_RxISR_8BIT+0x6c>
 8009c06:	e0a6      	b.n	8009d56 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c08:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c12:	2301      	movs	r3, #1
 8009c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f383 8810 	msr	PRIMASK, r3
}
 8009c1c:	46c0      	nop			@ (mov r8, r8)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	494d      	ldr	r1, [pc, #308]	@ (8009d60 <UART_RxISR_8BIT+0x1c4>)
 8009c2a:	400a      	ands	r2, r1
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	f383 8810 	msr	PRIMASK, r3
}
 8009c38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c44:	2301      	movs	r3, #1
 8009c46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4a:	f383 8810 	msr	PRIMASK, r3
}
 8009c4e:	46c0      	nop			@ (mov r8, r8)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	438a      	bics	r2, r1
 8009c5e:	609a      	str	r2, [r3, #8]
 8009c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	f383 8810 	msr	PRIMASK, r3
}
 8009c6a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	228c      	movs	r2, #140	@ 0x8c
 8009c70:	2120      	movs	r1, #32
 8009c72:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a37      	ldr	r2, [pc, #220]	@ (8009d64 <UART_RxISR_8BIT+0x1c8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d024      	beq.n	8009cd4 <UART_RxISR_8BIT+0x138>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a36      	ldr	r2, [pc, #216]	@ (8009d68 <UART_RxISR_8BIT+0x1cc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d01f      	beq.n	8009cd4 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	2380      	movs	r3, #128	@ 0x80
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	d018      	beq.n	8009cd4 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ca6:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cac:	2301      	movs	r3, #1
 8009cae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	f383 8810 	msr	PRIMASK, r3
}
 8009cb6:	46c0      	nop			@ (mov r8, r8)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	492a      	ldr	r1, [pc, #168]	@ (8009d6c <UART_RxISR_8BIT+0x1d0>)
 8009cc4:	400a      	ands	r2, r1
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	f383 8810 	msr	PRIMASK, r3
}
 8009cd2:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d12f      	bne.n	8009d3c <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ce8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cec:	2301      	movs	r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f383 8810 	msr	PRIMASK, r3
}
 8009cf6:	46c0      	nop			@ (mov r8, r8)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2110      	movs	r1, #16
 8009d04:	438a      	bics	r2, r1
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f383 8810 	msr	PRIMASK, r3
}
 8009d12:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	d103      	bne.n	8009d2a <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2210      	movs	r2, #16
 8009d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	225c      	movs	r2, #92	@ 0x5c
 8009d2e:	5a9a      	ldrh	r2, [r3, r2]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	0011      	movs	r1, r2
 8009d34:	0018      	movs	r0, r3
 8009d36:	f7ff f833 	bl	8008da0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d3a:	e00c      	b.n	8009d56 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f7fa f806 	bl	8003d50 <HAL_UART_RxCpltCallback>
}
 8009d44:	e007      	b.n	8009d56 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2108      	movs	r1, #8
 8009d52:	430a      	orrs	r2, r1
 8009d54:	619a      	str	r2, [r3, #24]
}
 8009d56:	46c0      	nop			@ (mov r8, r8)
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	b014      	add	sp, #80	@ 0x50
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	46c0      	nop			@ (mov r8, r8)
 8009d60:	fffffedf 	.word	0xfffffedf
 8009d64:	40008000 	.word	0x40008000
 8009d68:	40008400 	.word	0x40008400
 8009d6c:	fbffffff 	.word	0xfbffffff

08009d70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b094      	sub	sp, #80	@ 0x50
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d78:	204e      	movs	r0, #78	@ 0x4e
 8009d7a:	183b      	adds	r3, r7, r0
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	2160      	movs	r1, #96	@ 0x60
 8009d80:	5a52      	ldrh	r2, [r2, r1]
 8009d82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	228c      	movs	r2, #140	@ 0x8c
 8009d88:	589b      	ldr	r3, [r3, r2]
 8009d8a:	2b22      	cmp	r3, #34	@ 0x22
 8009d8c:	d000      	beq.n	8009d90 <UART_RxISR_16BIT+0x20>
 8009d8e:	e0c4      	b.n	8009f1a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d96:	214c      	movs	r1, #76	@ 0x4c
 8009d98:	187b      	adds	r3, r7, r1
 8009d9a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009da2:	187b      	adds	r3, r7, r1
 8009da4:	183a      	adds	r2, r7, r0
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	8812      	ldrh	r2, [r2, #0]
 8009daa:	4013      	ands	r3, r2
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db6:	1c9a      	adds	r2, r3, #2
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	225e      	movs	r2, #94	@ 0x5e
 8009dc0:	5a9b      	ldrh	r3, [r3, r2]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b299      	uxth	r1, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	225e      	movs	r2, #94	@ 0x5e
 8009dcc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	225e      	movs	r2, #94	@ 0x5e
 8009dd2:	5a9b      	ldrh	r3, [r3, r2]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d000      	beq.n	8009ddc <UART_RxISR_16BIT+0x6c>
 8009dda:	e0a6      	b.n	8009f2a <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8009de0:	623b      	str	r3, [r7, #32]
  return(result);
 8009de2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009de6:	2301      	movs	r3, #1
 8009de8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	f383 8810 	msr	PRIMASK, r3
}
 8009df0:	46c0      	nop			@ (mov r8, r8)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	494d      	ldr	r1, [pc, #308]	@ (8009f34 <UART_RxISR_16BIT+0x1c4>)
 8009dfe:	400a      	ands	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	f383 8810 	msr	PRIMASK, r3
}
 8009e0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e18:	2301      	movs	r3, #1
 8009e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	f383 8810 	msr	PRIMASK, r3
}
 8009e22:	46c0      	nop			@ (mov r8, r8)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2101      	movs	r1, #1
 8009e30:	438a      	bics	r2, r1
 8009e32:	609a      	str	r2, [r3, #8]
 8009e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e3a:	f383 8810 	msr	PRIMASK, r3
}
 8009e3e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	228c      	movs	r2, #140	@ 0x8c
 8009e44:	2120      	movs	r1, #32
 8009e46:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a37      	ldr	r2, [pc, #220]	@ (8009f38 <UART_RxISR_16BIT+0x1c8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d024      	beq.n	8009ea8 <UART_RxISR_16BIT+0x138>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a36      	ldr	r2, [pc, #216]	@ (8009f3c <UART_RxISR_16BIT+0x1cc>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d01f      	beq.n	8009ea8 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	2380      	movs	r3, #128	@ 0x80
 8009e70:	041b      	lsls	r3, r3, #16
 8009e72:	4013      	ands	r3, r2
 8009e74:	d018      	beq.n	8009ea8 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e76:	f3ef 8310 	mrs	r3, PRIMASK
 8009e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8009e7c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e80:	2301      	movs	r3, #1
 8009e82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	f383 8810 	msr	PRIMASK, r3
}
 8009e8a:	46c0      	nop			@ (mov r8, r8)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	492a      	ldr	r1, [pc, #168]	@ (8009f40 <UART_RxISR_16BIT+0x1d0>)
 8009e98:	400a      	ands	r2, r1
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f383 8810 	msr	PRIMASK, r3
}
 8009ea6:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d12f      	bne.n	8009f10 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eba:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ebc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f383 8810 	msr	PRIMASK, r3
}
 8009eca:	46c0      	nop			@ (mov r8, r8)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2110      	movs	r1, #16
 8009ed8:	438a      	bics	r2, r1
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f383 8810 	msr	PRIMASK, r3
}
 8009ee6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	2210      	movs	r2, #16
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	2b10      	cmp	r3, #16
 8009ef4:	d103      	bne.n	8009efe <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2210      	movs	r2, #16
 8009efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	225c      	movs	r2, #92	@ 0x5c
 8009f02:	5a9a      	ldrh	r2, [r3, r2]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	0011      	movs	r1, r2
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f7fe ff49 	bl	8008da0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f0e:	e00c      	b.n	8009f2a <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7f9 ff1c 	bl	8003d50 <HAL_UART_RxCpltCallback>
}
 8009f18:	e007      	b.n	8009f2a <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	699a      	ldr	r2, [r3, #24]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2108      	movs	r1, #8
 8009f26:	430a      	orrs	r2, r1
 8009f28:	619a      	str	r2, [r3, #24]
}
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	b014      	add	sp, #80	@ 0x50
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	fffffedf 	.word	0xfffffedf
 8009f38:	40008000 	.word	0x40008000
 8009f3c:	40008400 	.word	0x40008400
 8009f40:	fbffffff 	.word	0xfbffffff

08009f44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b0a0      	sub	sp, #128	@ 0x80
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f4c:	237a      	movs	r3, #122	@ 0x7a
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	2160      	movs	r1, #96	@ 0x60
 8009f54:	5a52      	ldrh	r2, [r2, r1]
 8009f56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	228c      	movs	r2, #140	@ 0x8c
 8009f74:	589b      	ldr	r3, [r3, r2]
 8009f76:	2b22      	cmp	r3, #34	@ 0x22
 8009f78:	d000      	beq.n	8009f7c <UART_RxISR_8BIT_FIFOEN+0x38>
 8009f7a:	e16f      	b.n	800a25c <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f7c:	236e      	movs	r3, #110	@ 0x6e
 8009f7e:	18fb      	adds	r3, r7, r3
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	2168      	movs	r1, #104	@ 0x68
 8009f84:	5a52      	ldrh	r2, [r2, r1]
 8009f86:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f88:	e116      	b.n	800a1b8 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f90:	216c      	movs	r1, #108	@ 0x6c
 8009f92:	187b      	adds	r3, r7, r1
 8009f94:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f96:	187b      	adds	r3, r7, r1
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	237a      	movs	r3, #122	@ 0x7a
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	b2d9      	uxtb	r1, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa8:	400a      	ands	r2, r1
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	225e      	movs	r2, #94	@ 0x5e
 8009fbc:	5a9b      	ldrh	r3, [r3, r2]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b299      	uxth	r1, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	225e      	movs	r2, #94	@ 0x5e
 8009fc8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fd4:	2207      	movs	r2, #7
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	d049      	beq.n	800a06e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fdc:	2201      	movs	r2, #1
 8009fde:	4013      	ands	r3, r2
 8009fe0:	d010      	beq.n	800a004 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8009fe2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009fe4:	2380      	movs	r3, #128	@ 0x80
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	4013      	ands	r3, r2
 8009fea:	d00b      	beq.n	800a004 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2290      	movs	r2, #144	@ 0x90
 8009ff8:	589b      	ldr	r3, [r3, r2]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2190      	movs	r1, #144	@ 0x90
 800a002:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a004:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a006:	2202      	movs	r2, #2
 800a008:	4013      	ands	r3, r2
 800a00a:	d00f      	beq.n	800a02c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800a00c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a00e:	2201      	movs	r2, #1
 800a010:	4013      	ands	r3, r2
 800a012:	d00b      	beq.n	800a02c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2202      	movs	r2, #2
 800a01a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2290      	movs	r2, #144	@ 0x90
 800a020:	589b      	ldr	r3, [r3, r2]
 800a022:	2204      	movs	r2, #4
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2190      	movs	r1, #144	@ 0x90
 800a02a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a02c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a02e:	2204      	movs	r2, #4
 800a030:	4013      	ands	r3, r2
 800a032:	d00f      	beq.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x110>
 800a034:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a036:	2201      	movs	r2, #1
 800a038:	4013      	ands	r3, r2
 800a03a:	d00b      	beq.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2204      	movs	r2, #4
 800a042:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2290      	movs	r2, #144	@ 0x90
 800a048:	589b      	ldr	r3, [r3, r2]
 800a04a:	2202      	movs	r2, #2
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2190      	movs	r1, #144	@ 0x90
 800a052:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2290      	movs	r2, #144	@ 0x90
 800a058:	589b      	ldr	r3, [r3, r2]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0018      	movs	r0, r3
 800a062:	f7fe fe95 	bl	8008d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2290      	movs	r2, #144	@ 0x90
 800a06a:	2100      	movs	r1, #0
 800a06c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	225e      	movs	r2, #94	@ 0x5e
 800a072:	5a9b      	ldrh	r3, [r3, r2]
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d000      	beq.n	800a07c <UART_RxISR_8BIT_FIFOEN+0x138>
 800a07a:	e09d      	b.n	800a1b8 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a07c:	f3ef 8310 	mrs	r3, PRIMASK
 800a080:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800a082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a084:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a086:	2301      	movs	r3, #1
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08c:	f383 8810 	msr	PRIMASK, r3
}
 800a090:	46c0      	nop			@ (mov r8, r8)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4975      	ldr	r1, [pc, #468]	@ (800a274 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800a09e:	400a      	ands	r2, r1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0a4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0a8:	f383 8810 	msr	PRIMASK, r3
}
 800a0ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800a0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0b6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0be:	f383 8810 	msr	PRIMASK, r3
}
 800a0c2:	46c0      	nop			@ (mov r8, r8)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	496a      	ldr	r1, [pc, #424]	@ (800a278 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800a0d0:	400a      	ands	r2, r1
 800a0d2:	609a      	str	r2, [r3, #8]
 800a0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0da:	f383 8810 	msr	PRIMASK, r3
}
 800a0de:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	228c      	movs	r2, #140	@ 0x8c
 800a0e4:	2120      	movs	r1, #32
 800a0e6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a60      	ldr	r2, [pc, #384]	@ (800a27c <UART_RxISR_8BIT_FIFOEN+0x338>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d024      	beq.n	800a148 <UART_RxISR_8BIT_FIFOEN+0x204>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a5f      	ldr	r2, [pc, #380]	@ (800a280 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d01f      	beq.n	800a148 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	2380      	movs	r3, #128	@ 0x80
 800a110:	041b      	lsls	r3, r3, #16
 800a112:	4013      	ands	r3, r2
 800a114:	d018      	beq.n	800a148 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a116:	f3ef 8310 	mrs	r3, PRIMASK
 800a11a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800a11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a11e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a120:	2301      	movs	r3, #1
 800a122:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	f383 8810 	msr	PRIMASK, r3
}
 800a12a:	46c0      	nop			@ (mov r8, r8)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4953      	ldr	r1, [pc, #332]	@ (800a284 <UART_RxISR_8BIT_FIFOEN+0x340>)
 800a138:	400a      	ands	r2, r1
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a13e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a142:	f383 8810 	msr	PRIMASK, r3
}
 800a146:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d12f      	bne.n	800a1b0 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a156:	f3ef 8310 	mrs	r3, PRIMASK
 800a15a:	623b      	str	r3, [r7, #32]
  return(result);
 800a15c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a15e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a160:	2301      	movs	r3, #1
 800a162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	f383 8810 	msr	PRIMASK, r3
}
 800a16a:	46c0      	nop			@ (mov r8, r8)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2110      	movs	r1, #16
 800a178:	438a      	bics	r2, r1
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a17e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a182:	f383 8810 	msr	PRIMASK, r3
}
 800a186:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	2210      	movs	r2, #16
 800a190:	4013      	ands	r3, r2
 800a192:	2b10      	cmp	r3, #16
 800a194:	d103      	bne.n	800a19e <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2210      	movs	r2, #16
 800a19c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	225c      	movs	r2, #92	@ 0x5c
 800a1a2:	5a9a      	ldrh	r2, [r3, r2]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	0011      	movs	r1, r2
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f7fe fdf9 	bl	8008da0 <HAL_UARTEx_RxEventCallback>
 800a1ae:	e003      	b.n	800a1b8 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7f9 fdcc 	bl	8003d50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1b8:	236e      	movs	r3, #110	@ 0x6e
 800a1ba:	18fb      	adds	r3, r7, r3
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <UART_RxISR_8BIT_FIFOEN+0x288>
 800a1c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	d000      	beq.n	800a1cc <UART_RxISR_8BIT_FIFOEN+0x288>
 800a1ca:	e6de      	b.n	8009f8a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1cc:	205a      	movs	r0, #90	@ 0x5a
 800a1ce:	183b      	adds	r3, r7, r0
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	215e      	movs	r1, #94	@ 0x5e
 800a1d4:	5a52      	ldrh	r2, [r2, r1]
 800a1d6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1d8:	0001      	movs	r1, r0
 800a1da:	187b      	adds	r3, r7, r1
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d044      	beq.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x328>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2268      	movs	r2, #104	@ 0x68
 800a1e6:	5a9b      	ldrh	r3, [r3, r2]
 800a1e8:	187a      	adds	r2, r7, r1
 800a1ea:	8812      	ldrh	r2, [r2, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d23d      	bcs.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f383 8810 	msr	PRIMASK, r3
}
 800a204:	46c0      	nop			@ (mov r8, r8)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	491d      	ldr	r1, [pc, #116]	@ (800a288 <UART_RxISR_8BIT_FIFOEN+0x344>)
 800a212:	400a      	ands	r2, r1
 800a214:	609a      	str	r2, [r3, #8]
 800a216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f383 8810 	msr	PRIMASK, r3
}
 800a220:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a19      	ldr	r2, [pc, #100]	@ (800a28c <UART_RxISR_8BIT_FIFOEN+0x348>)
 800a226:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a228:	f3ef 8310 	mrs	r3, PRIMASK
 800a22c:	617b      	str	r3, [r7, #20]
  return(result);
 800a22e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a230:	653b      	str	r3, [r7, #80]	@ 0x50
 800a232:	2301      	movs	r3, #1
 800a234:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	f383 8810 	msr	PRIMASK, r3
}
 800a23c:	46c0      	nop			@ (mov r8, r8)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2120      	movs	r1, #32
 800a24a:	430a      	orrs	r2, r1
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	f383 8810 	msr	PRIMASK, r3
}
 800a258:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a25a:	e007      	b.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2108      	movs	r1, #8
 800a268:	430a      	orrs	r2, r1
 800a26a:	619a      	str	r2, [r3, #24]
}
 800a26c:	46c0      	nop			@ (mov r8, r8)
 800a26e:	46bd      	mov	sp, r7
 800a270:	b020      	add	sp, #128	@ 0x80
 800a272:	bd80      	pop	{r7, pc}
 800a274:	fffffeff 	.word	0xfffffeff
 800a278:	effffffe 	.word	0xeffffffe
 800a27c:	40008000 	.word	0x40008000
 800a280:	40008400 	.word	0x40008400
 800a284:	fbffffff 	.word	0xfbffffff
 800a288:	efffffff 	.word	0xefffffff
 800a28c:	08009b9d 	.word	0x08009b9d

0800a290 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b0a2      	sub	sp, #136	@ 0x88
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a298:	2382      	movs	r3, #130	@ 0x82
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	2160      	movs	r1, #96	@ 0x60
 800a2a0:	5a52      	ldrh	r2, [r2, r1]
 800a2a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	2284      	movs	r2, #132	@ 0x84
 800a2ac:	18ba      	adds	r2, r7, r2
 800a2ae:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	228c      	movs	r2, #140	@ 0x8c
 800a2c4:	589b      	ldr	r3, [r3, r2]
 800a2c6:	2b22      	cmp	r3, #34	@ 0x22
 800a2c8:	d000      	beq.n	800a2cc <UART_RxISR_16BIT_FIFOEN+0x3c>
 800a2ca:	e179      	b.n	800a5c0 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a2cc:	2376      	movs	r3, #118	@ 0x76
 800a2ce:	18fb      	adds	r3, r7, r3
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	2168      	movs	r1, #104	@ 0x68
 800a2d4:	5a52      	ldrh	r2, [r2, r1]
 800a2d6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2d8:	e11e      	b.n	800a518 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2e0:	2174      	movs	r1, #116	@ 0x74
 800a2e2:	187b      	adds	r3, r7, r1
 800a2e4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ea:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2ec:	187b      	adds	r3, r7, r1
 800a2ee:	2282      	movs	r2, #130	@ 0x82
 800a2f0:	18ba      	adds	r2, r7, r2
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	8812      	ldrh	r2, [r2, #0]
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a302:	1c9a      	adds	r2, r3, #2
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	225e      	movs	r2, #94	@ 0x5e
 800a30c:	5a9b      	ldrh	r3, [r3, r2]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	b299      	uxth	r1, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	225e      	movs	r2, #94	@ 0x5e
 800a318:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	2184      	movs	r1, #132	@ 0x84
 800a322:	187a      	adds	r2, r7, r1
 800a324:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a326:	187b      	adds	r3, r7, r1
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2207      	movs	r2, #7
 800a32c:	4013      	ands	r3, r2
 800a32e:	d04e      	beq.n	800a3ce <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a330:	187b      	adds	r3, r7, r1
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2201      	movs	r2, #1
 800a336:	4013      	ands	r3, r2
 800a338:	d010      	beq.n	800a35c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800a33a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a33c:	2380      	movs	r3, #128	@ 0x80
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	4013      	ands	r3, r2
 800a342:	d00b      	beq.n	800a35c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2201      	movs	r2, #1
 800a34a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2290      	movs	r2, #144	@ 0x90
 800a350:	589b      	ldr	r3, [r3, r2]
 800a352:	2201      	movs	r2, #1
 800a354:	431a      	orrs	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2190      	movs	r1, #144	@ 0x90
 800a35a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a35c:	2384      	movs	r3, #132	@ 0x84
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2202      	movs	r2, #2
 800a364:	4013      	ands	r3, r2
 800a366:	d00f      	beq.n	800a388 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800a368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a36a:	2201      	movs	r2, #1
 800a36c:	4013      	ands	r3, r2
 800a36e:	d00b      	beq.n	800a388 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2202      	movs	r2, #2
 800a376:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2290      	movs	r2, #144	@ 0x90
 800a37c:	589b      	ldr	r3, [r3, r2]
 800a37e:	2204      	movs	r2, #4
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2190      	movs	r1, #144	@ 0x90
 800a386:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a388:	2384      	movs	r3, #132	@ 0x84
 800a38a:	18fb      	adds	r3, r7, r3
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2204      	movs	r2, #4
 800a390:	4013      	ands	r3, r2
 800a392:	d00f      	beq.n	800a3b4 <UART_RxISR_16BIT_FIFOEN+0x124>
 800a394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a396:	2201      	movs	r2, #1
 800a398:	4013      	ands	r3, r2
 800a39a:	d00b      	beq.n	800a3b4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2290      	movs	r2, #144	@ 0x90
 800a3a8:	589b      	ldr	r3, [r3, r2]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2190      	movs	r1, #144	@ 0x90
 800a3b2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2290      	movs	r2, #144	@ 0x90
 800a3b8:	589b      	ldr	r3, [r3, r2]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f7fe fce5 	bl	8008d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2290      	movs	r2, #144	@ 0x90
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	225e      	movs	r2, #94	@ 0x5e
 800a3d2:	5a9b      	ldrh	r3, [r3, r2]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d000      	beq.n	800a3dc <UART_RxISR_16BIT_FIFOEN+0x14c>
 800a3da:	e09d      	b.n	800a518 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800a3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ec:	f383 8810 	msr	PRIMASK, r3
}
 800a3f0:	46c0      	nop			@ (mov r8, r8)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4976      	ldr	r1, [pc, #472]	@ (800a5d8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800a3fe:	400a      	ands	r2, r1
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a404:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a408:	f383 8810 	msr	PRIMASK, r3
}
 800a40c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a40e:	f3ef 8310 	mrs	r3, PRIMASK
 800a412:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800a414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a416:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a418:	2301      	movs	r3, #1
 800a41a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a41c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a41e:	f383 8810 	msr	PRIMASK, r3
}
 800a422:	46c0      	nop			@ (mov r8, r8)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	496b      	ldr	r1, [pc, #428]	@ (800a5dc <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800a430:	400a      	ands	r2, r1
 800a432:	609a      	str	r2, [r3, #8]
 800a434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a436:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a43a:	f383 8810 	msr	PRIMASK, r3
}
 800a43e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	228c      	movs	r2, #140	@ 0x8c
 800a444:	2120      	movs	r1, #32
 800a446:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a61      	ldr	r2, [pc, #388]	@ (800a5e0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d024      	beq.n	800a4a8 <UART_RxISR_16BIT_FIFOEN+0x218>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a60      	ldr	r2, [pc, #384]	@ (800a5e4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d01f      	beq.n	800a4a8 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	2380      	movs	r3, #128	@ 0x80
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	4013      	ands	r3, r2
 800a474:	d018      	beq.n	800a4a8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a476:	f3ef 8310 	mrs	r3, PRIMASK
 800a47a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a47e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a480:	2301      	movs	r3, #1
 800a482:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a486:	f383 8810 	msr	PRIMASK, r3
}
 800a48a:	46c0      	nop			@ (mov r8, r8)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4954      	ldr	r1, [pc, #336]	@ (800a5e8 <UART_RxISR_16BIT_FIFOEN+0x358>)
 800a498:	400a      	ands	r2, r1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a49e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	f383 8810 	msr	PRIMASK, r3
}
 800a4a6:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d12f      	bne.n	800a510 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4be:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	f383 8810 	msr	PRIMASK, r3
}
 800a4ca:	46c0      	nop			@ (mov r8, r8)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2110      	movs	r1, #16
 800a4d8:	438a      	bics	r2, r1
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e2:	f383 8810 	msr	PRIMASK, r3
}
 800a4e6:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	2b10      	cmp	r3, #16
 800a4f4:	d103      	bne.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2210      	movs	r2, #16
 800a4fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	225c      	movs	r2, #92	@ 0x5c
 800a502:	5a9a      	ldrh	r2, [r3, r2]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	0011      	movs	r1, r2
 800a508:	0018      	movs	r0, r3
 800a50a:	f7fe fc49 	bl	8008da0 <HAL_UARTEx_RxEventCallback>
 800a50e:	e003      	b.n	800a518 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0018      	movs	r0, r3
 800a514:	f7f9 fc1c 	bl	8003d50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a518:	2376      	movs	r3, #118	@ 0x76
 800a51a:	18fb      	adds	r3, r7, r3
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d006      	beq.n	800a530 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800a522:	2384      	movs	r3, #132	@ 0x84
 800a524:	18fb      	adds	r3, r7, r3
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2220      	movs	r2, #32
 800a52a:	4013      	ands	r3, r2
 800a52c:	d000      	beq.n	800a530 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800a52e:	e6d4      	b.n	800a2da <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a530:	205e      	movs	r0, #94	@ 0x5e
 800a532:	183b      	adds	r3, r7, r0
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	215e      	movs	r1, #94	@ 0x5e
 800a538:	5a52      	ldrh	r2, [r2, r1]
 800a53a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a53c:	0001      	movs	r1, r0
 800a53e:	187b      	adds	r3, r7, r1
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d044      	beq.n	800a5d0 <UART_RxISR_16BIT_FIFOEN+0x340>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2268      	movs	r2, #104	@ 0x68
 800a54a:	5a9b      	ldrh	r3, [r3, r2]
 800a54c:	187a      	adds	r2, r7, r1
 800a54e:	8812      	ldrh	r2, [r2, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d23d      	bcs.n	800a5d0 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a554:	f3ef 8310 	mrs	r3, PRIMASK
 800a558:	60fb      	str	r3, [r7, #12]
  return(result);
 800a55a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a55c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a55e:	2301      	movs	r3, #1
 800a560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f383 8810 	msr	PRIMASK, r3
}
 800a568:	46c0      	nop			@ (mov r8, r8)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	491d      	ldr	r1, [pc, #116]	@ (800a5ec <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a576:	400a      	ands	r2, r1
 800a578:	609a      	str	r2, [r3, #8]
 800a57a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a57c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f383 8810 	msr	PRIMASK, r3
}
 800a584:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a19      	ldr	r2, [pc, #100]	@ (800a5f0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a58a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a58c:	f3ef 8310 	mrs	r3, PRIMASK
 800a590:	61bb      	str	r3, [r7, #24]
  return(result);
 800a592:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a594:	657b      	str	r3, [r7, #84]	@ 0x54
 800a596:	2301      	movs	r3, #1
 800a598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	f383 8810 	msr	PRIMASK, r3
}
 800a5a0:	46c0      	nop			@ (mov r8, r8)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2120      	movs	r1, #32
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	f383 8810 	msr	PRIMASK, r3
}
 800a5bc:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5be:	e007      	b.n	800a5d0 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	699a      	ldr	r2, [r3, #24]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2108      	movs	r1, #8
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	619a      	str	r2, [r3, #24]
}
 800a5d0:	46c0      	nop			@ (mov r8, r8)
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b022      	add	sp, #136	@ 0x88
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	fffffeff 	.word	0xfffffeff
 800a5dc:	effffffe 	.word	0xeffffffe
 800a5e0:	40008000 	.word	0x40008000
 800a5e4:	40008400 	.word	0x40008400
 800a5e8:	fbffffff 	.word	0xfbffffff
 800a5ec:	efffffff 	.word	0xefffffff
 800a5f0:	08009d71 	.word	0x08009d71

0800a5f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5fc:	46c0      	nop			@ (mov r8, r8)
 800a5fe:	46bd      	mov	sp, r7
 800a600:	b002      	add	sp, #8
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a60c:	46c0      	nop			@ (mov r8, r8)
 800a60e:	46bd      	mov	sp, r7
 800a610:	b002      	add	sp, #8
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a61c:	46c0      	nop			@ (mov r8, r8)
 800a61e:	46bd      	mov	sp, r7
 800a620:	b002      	add	sp, #8
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2284      	movs	r2, #132	@ 0x84
 800a630:	5c9b      	ldrb	r3, [r3, r2]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_UARTEx_DisableFifoMode+0x16>
 800a636:	2302      	movs	r3, #2
 800a638:	e027      	b.n	800a68a <HAL_UARTEx_DisableFifoMode+0x66>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2284      	movs	r2, #132	@ 0x84
 800a63e:	2101      	movs	r1, #1
 800a640:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2288      	movs	r2, #136	@ 0x88
 800a646:	2124      	movs	r1, #36	@ 0x24
 800a648:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2101      	movs	r1, #1
 800a65e:	438a      	bics	r2, r1
 800a660:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a0b      	ldr	r2, [pc, #44]	@ (800a694 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a666:	4013      	ands	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2288      	movs	r2, #136	@ 0x88
 800a67c:	2120      	movs	r1, #32
 800a67e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2284      	movs	r2, #132	@ 0x84
 800a684:	2100      	movs	r1, #0
 800a686:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	0018      	movs	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b004      	add	sp, #16
 800a690:	bd80      	pop	{r7, pc}
 800a692:	46c0      	nop			@ (mov r8, r8)
 800a694:	dfffffff 	.word	0xdfffffff

0800a698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2284      	movs	r2, #132	@ 0x84
 800a6a6:	5c9b      	ldrb	r3, [r3, r2]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e02e      	b.n	800a70e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2284      	movs	r2, #132	@ 0x84
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2288      	movs	r2, #136	@ 0x88
 800a6bc:	2124      	movs	r1, #36	@ 0x24
 800a6be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	438a      	bics	r2, r1
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	08d9      	lsrs	r1, r3, #3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f000 f854 	bl	800a79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2288      	movs	r2, #136	@ 0x88
 800a700:	2120      	movs	r1, #32
 800a702:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2284      	movs	r2, #132	@ 0x84
 800a708:	2100      	movs	r1, #0
 800a70a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	0018      	movs	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	b004      	add	sp, #16
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2284      	movs	r2, #132	@ 0x84
 800a726:	5c9b      	ldrb	r3, [r3, r2]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e02f      	b.n	800a790 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2284      	movs	r2, #132	@ 0x84
 800a734:	2101      	movs	r1, #1
 800a736:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2288      	movs	r2, #136	@ 0x88
 800a73c:	2124      	movs	r1, #36	@ 0x24
 800a73e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2101      	movs	r1, #1
 800a754:	438a      	bics	r2, r1
 800a756:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	4a0e      	ldr	r2, [pc, #56]	@ (800a798 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a760:	4013      	ands	r3, r2
 800a762:	0019      	movs	r1, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	0018      	movs	r0, r3
 800a772:	f000 f813 	bl	800a79c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2288      	movs	r2, #136	@ 0x88
 800a782:	2120      	movs	r1, #32
 800a784:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2284      	movs	r2, #132	@ 0x84
 800a78a:	2100      	movs	r1, #0
 800a78c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	0018      	movs	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	b004      	add	sp, #16
 800a796:	bd80      	pop	{r7, pc}
 800a798:	f1ffffff 	.word	0xf1ffffff

0800a79c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d108      	bne.n	800a7be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	226a      	movs	r2, #106	@ 0x6a
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2268      	movs	r2, #104	@ 0x68
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7bc:	e043      	b.n	800a846 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7be:	260f      	movs	r6, #15
 800a7c0:	19bb      	adds	r3, r7, r6
 800a7c2:	2208      	movs	r2, #8
 800a7c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7c6:	200e      	movs	r0, #14
 800a7c8:	183b      	adds	r3, r7, r0
 800a7ca:	2208      	movs	r2, #8
 800a7cc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	0e5b      	lsrs	r3, r3, #25
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	240d      	movs	r4, #13
 800a7da:	193b      	adds	r3, r7, r4
 800a7dc:	2107      	movs	r1, #7
 800a7de:	400a      	ands	r2, r1
 800a7e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	0f5b      	lsrs	r3, r3, #29
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	250c      	movs	r5, #12
 800a7ee:	197b      	adds	r3, r7, r5
 800a7f0:	2107      	movs	r1, #7
 800a7f2:	400a      	ands	r2, r1
 800a7f4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7f6:	183b      	adds	r3, r7, r0
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	197a      	adds	r2, r7, r5
 800a7fc:	7812      	ldrb	r2, [r2, #0]
 800a7fe:	4914      	ldr	r1, [pc, #80]	@ (800a850 <UARTEx_SetNbDataToProcess+0xb4>)
 800a800:	5c8a      	ldrb	r2, [r1, r2]
 800a802:	435a      	muls	r2, r3
 800a804:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a806:	197b      	adds	r3, r7, r5
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	4a12      	ldr	r2, [pc, #72]	@ (800a854 <UARTEx_SetNbDataToProcess+0xb8>)
 800a80c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a80e:	0019      	movs	r1, r3
 800a810:	f7f5 fd1e 	bl	8000250 <__divsi3>
 800a814:	0003      	movs	r3, r0
 800a816:	b299      	uxth	r1, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	226a      	movs	r2, #106	@ 0x6a
 800a81c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a81e:	19bb      	adds	r3, r7, r6
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	193a      	adds	r2, r7, r4
 800a824:	7812      	ldrb	r2, [r2, #0]
 800a826:	490a      	ldr	r1, [pc, #40]	@ (800a850 <UARTEx_SetNbDataToProcess+0xb4>)
 800a828:	5c8a      	ldrb	r2, [r1, r2]
 800a82a:	435a      	muls	r2, r3
 800a82c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a82e:	193b      	adds	r3, r7, r4
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	4a08      	ldr	r2, [pc, #32]	@ (800a854 <UARTEx_SetNbDataToProcess+0xb8>)
 800a834:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a836:	0019      	movs	r1, r3
 800a838:	f7f5 fd0a 	bl	8000250 <__divsi3>
 800a83c:	0003      	movs	r3, r0
 800a83e:	b299      	uxth	r1, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2268      	movs	r2, #104	@ 0x68
 800a844:	5299      	strh	r1, [r3, r2]
}
 800a846:	46c0      	nop			@ (mov r8, r8)
 800a848:	46bd      	mov	sp, r7
 800a84a:	b005      	add	sp, #20
 800a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84e:	46c0      	nop			@ (mov r8, r8)
 800a850:	0800e560 	.word	0x0800e560
 800a854:	0800e568 	.word	0x0800e568

0800a858 <__cvt>:
 800a858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a85a:	001f      	movs	r7, r3
 800a85c:	2300      	movs	r3, #0
 800a85e:	0016      	movs	r6, r2
 800a860:	b08b      	sub	sp, #44	@ 0x2c
 800a862:	429f      	cmp	r7, r3
 800a864:	da04      	bge.n	800a870 <__cvt+0x18>
 800a866:	2180      	movs	r1, #128	@ 0x80
 800a868:	0609      	lsls	r1, r1, #24
 800a86a:	187b      	adds	r3, r7, r1
 800a86c:	001f      	movs	r7, r3
 800a86e:	232d      	movs	r3, #45	@ 0x2d
 800a870:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a872:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a874:	7013      	strb	r3, [r2, #0]
 800a876:	2320      	movs	r3, #32
 800a878:	2203      	movs	r2, #3
 800a87a:	439d      	bics	r5, r3
 800a87c:	2d46      	cmp	r5, #70	@ 0x46
 800a87e:	d007      	beq.n	800a890 <__cvt+0x38>
 800a880:	002b      	movs	r3, r5
 800a882:	3b45      	subs	r3, #69	@ 0x45
 800a884:	4259      	negs	r1, r3
 800a886:	414b      	adcs	r3, r1
 800a888:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a88a:	3a01      	subs	r2, #1
 800a88c:	18cb      	adds	r3, r1, r3
 800a88e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a890:	ab09      	add	r3, sp, #36	@ 0x24
 800a892:	9304      	str	r3, [sp, #16]
 800a894:	ab08      	add	r3, sp, #32
 800a896:	9303      	str	r3, [sp, #12]
 800a898:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a89a:	9200      	str	r2, [sp, #0]
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8a0:	0032      	movs	r2, r6
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	003b      	movs	r3, r7
 800a8a6:	f000 fe9d 	bl	800b5e4 <_dtoa_r>
 800a8aa:	0004      	movs	r4, r0
 800a8ac:	2d47      	cmp	r5, #71	@ 0x47
 800a8ae:	d11b      	bne.n	800a8e8 <__cvt+0x90>
 800a8b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8b2:	07db      	lsls	r3, r3, #31
 800a8b4:	d511      	bpl.n	800a8da <__cvt+0x82>
 800a8b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8b8:	18c3      	adds	r3, r0, r3
 800a8ba:	9307      	str	r3, [sp, #28]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2300      	movs	r3, #0
 800a8c0:	0030      	movs	r0, r6
 800a8c2:	0039      	movs	r1, r7
 800a8c4:	f7f5 fdc0 	bl	8000448 <__aeabi_dcmpeq>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d001      	beq.n	800a8d0 <__cvt+0x78>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d0:	2230      	movs	r2, #48	@ 0x30
 800a8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d4:	9907      	ldr	r1, [sp, #28]
 800a8d6:	428b      	cmp	r3, r1
 800a8d8:	d320      	bcc.n	800a91c <__cvt+0xc4>
 800a8da:	0020      	movs	r0, r4
 800a8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a8e0:	1b1b      	subs	r3, r3, r4
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	b00b      	add	sp, #44	@ 0x2c
 800a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8ea:	18c3      	adds	r3, r0, r3
 800a8ec:	9307      	str	r3, [sp, #28]
 800a8ee:	2d46      	cmp	r5, #70	@ 0x46
 800a8f0:	d1e4      	bne.n	800a8bc <__cvt+0x64>
 800a8f2:	7803      	ldrb	r3, [r0, #0]
 800a8f4:	2b30      	cmp	r3, #48	@ 0x30
 800a8f6:	d10c      	bne.n	800a912 <__cvt+0xba>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	0030      	movs	r0, r6
 800a8fe:	0039      	movs	r1, r7
 800a900:	f7f5 fda2 	bl	8000448 <__aeabi_dcmpeq>
 800a904:	2800      	cmp	r0, #0
 800a906:	d104      	bne.n	800a912 <__cvt+0xba>
 800a908:	2301      	movs	r3, #1
 800a90a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a90c:	1a9b      	subs	r3, r3, r2
 800a90e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a914:	9a07      	ldr	r2, [sp, #28]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	18d3      	adds	r3, r2, r3
 800a91a:	e7ce      	b.n	800a8ba <__cvt+0x62>
 800a91c:	1c59      	adds	r1, r3, #1
 800a91e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e7d6      	b.n	800a8d2 <__cvt+0x7a>

0800a924 <__exponent>:
 800a924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a926:	232b      	movs	r3, #43	@ 0x2b
 800a928:	b085      	sub	sp, #20
 800a92a:	0005      	movs	r5, r0
 800a92c:	1e0c      	subs	r4, r1, #0
 800a92e:	7002      	strb	r2, [r0, #0]
 800a930:	da01      	bge.n	800a936 <__exponent+0x12>
 800a932:	424c      	negs	r4, r1
 800a934:	3302      	adds	r3, #2
 800a936:	706b      	strb	r3, [r5, #1]
 800a938:	2c09      	cmp	r4, #9
 800a93a:	dd2c      	ble.n	800a996 <__exponent+0x72>
 800a93c:	ab02      	add	r3, sp, #8
 800a93e:	1dde      	adds	r6, r3, #7
 800a940:	0020      	movs	r0, r4
 800a942:	210a      	movs	r1, #10
 800a944:	f7f5 fd6a 	bl	800041c <__aeabi_idivmod>
 800a948:	0037      	movs	r7, r6
 800a94a:	3130      	adds	r1, #48	@ 0x30
 800a94c:	3e01      	subs	r6, #1
 800a94e:	0020      	movs	r0, r4
 800a950:	7031      	strb	r1, [r6, #0]
 800a952:	210a      	movs	r1, #10
 800a954:	9401      	str	r4, [sp, #4]
 800a956:	f7f5 fc7b 	bl	8000250 <__divsi3>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	0004      	movs	r4, r0
 800a95e:	2b63      	cmp	r3, #99	@ 0x63
 800a960:	dcee      	bgt.n	800a940 <__exponent+0x1c>
 800a962:	1eba      	subs	r2, r7, #2
 800a964:	1ca8      	adds	r0, r5, #2
 800a966:	0001      	movs	r1, r0
 800a968:	0013      	movs	r3, r2
 800a96a:	3430      	adds	r4, #48	@ 0x30
 800a96c:	7014      	strb	r4, [r2, #0]
 800a96e:	ac02      	add	r4, sp, #8
 800a970:	3407      	adds	r4, #7
 800a972:	429c      	cmp	r4, r3
 800a974:	d80a      	bhi.n	800a98c <__exponent+0x68>
 800a976:	2300      	movs	r3, #0
 800a978:	4294      	cmp	r4, r2
 800a97a:	d303      	bcc.n	800a984 <__exponent+0x60>
 800a97c:	3309      	adds	r3, #9
 800a97e:	aa02      	add	r2, sp, #8
 800a980:	189b      	adds	r3, r3, r2
 800a982:	1bdb      	subs	r3, r3, r7
 800a984:	18c0      	adds	r0, r0, r3
 800a986:	1b40      	subs	r0, r0, r5
 800a988:	b005      	add	sp, #20
 800a98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98c:	781c      	ldrb	r4, [r3, #0]
 800a98e:	3301      	adds	r3, #1
 800a990:	700c      	strb	r4, [r1, #0]
 800a992:	3101      	adds	r1, #1
 800a994:	e7eb      	b.n	800a96e <__exponent+0x4a>
 800a996:	2330      	movs	r3, #48	@ 0x30
 800a998:	18e4      	adds	r4, r4, r3
 800a99a:	70ab      	strb	r3, [r5, #2]
 800a99c:	1d28      	adds	r0, r5, #4
 800a99e:	70ec      	strb	r4, [r5, #3]
 800a9a0:	e7f1      	b.n	800a986 <__exponent+0x62>
	...

0800a9a4 <_printf_float>:
 800a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a6:	b097      	sub	sp, #92	@ 0x5c
 800a9a8:	000d      	movs	r5, r1
 800a9aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800a9ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a9b2:	f000 fcff 	bl	800b3b4 <_localeconv_r>
 800a9b6:	6803      	ldr	r3, [r0, #0]
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	930d      	str	r3, [sp, #52]	@ 0x34
 800a9bc:	f7f5 fba2 	bl	8000104 <strlen>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a9c4:	9314      	str	r3, [sp, #80]	@ 0x50
 800a9c6:	7e2b      	ldrb	r3, [r5, #24]
 800a9c8:	2207      	movs	r2, #7
 800a9ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	05c9      	lsls	r1, r1, #23
 800a9d6:	d545      	bpl.n	800aa64 <_printf_float+0xc0>
 800a9d8:	189b      	adds	r3, r3, r2
 800a9da:	4393      	bics	r3, r2
 800a9dc:	001a      	movs	r2, r3
 800a9de:	3208      	adds	r2, #8
 800a9e0:	6022      	str	r2, [r4, #0]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	681e      	ldr	r6, [r3, #0]
 800a9e6:	685f      	ldr	r7, [r3, #4]
 800a9e8:	007b      	lsls	r3, r7, #1
 800a9ea:	085b      	lsrs	r3, r3, #1
 800a9ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9ee:	9610      	str	r6, [sp, #64]	@ 0x40
 800a9f0:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a9f2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a9f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a9f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a9f8:	4ba7      	ldr	r3, [pc, #668]	@ (800ac98 <_printf_float+0x2f4>)
 800a9fa:	4252      	negs	r2, r2
 800a9fc:	f7f8 fdca 	bl	8003594 <__aeabi_dcmpun>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d131      	bne.n	800aa68 <_printf_float+0xc4>
 800aa04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aa06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aa08:	2201      	movs	r2, #1
 800aa0a:	4ba3      	ldr	r3, [pc, #652]	@ (800ac98 <_printf_float+0x2f4>)
 800aa0c:	4252      	negs	r2, r2
 800aa0e:	f7f5 fd2b 	bl	8000468 <__aeabi_dcmple>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d128      	bne.n	800aa68 <_printf_float+0xc4>
 800aa16:	2200      	movs	r2, #0
 800aa18:	2300      	movs	r3, #0
 800aa1a:	0030      	movs	r0, r6
 800aa1c:	0039      	movs	r1, r7
 800aa1e:	f7f5 fd19 	bl	8000454 <__aeabi_dcmplt>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d003      	beq.n	800aa2e <_printf_float+0x8a>
 800aa26:	002b      	movs	r3, r5
 800aa28:	222d      	movs	r2, #45	@ 0x2d
 800aa2a:	3343      	adds	r3, #67	@ 0x43
 800aa2c:	701a      	strb	r2, [r3, #0]
 800aa2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa30:	4f9a      	ldr	r7, [pc, #616]	@ (800ac9c <_printf_float+0x2f8>)
 800aa32:	2b47      	cmp	r3, #71	@ 0x47
 800aa34:	d800      	bhi.n	800aa38 <_printf_float+0x94>
 800aa36:	4f9a      	ldr	r7, [pc, #616]	@ (800aca0 <_printf_float+0x2fc>)
 800aa38:	2303      	movs	r3, #3
 800aa3a:	2400      	movs	r4, #0
 800aa3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa3e:	612b      	str	r3, [r5, #16]
 800aa40:	3301      	adds	r3, #1
 800aa42:	439a      	bics	r2, r3
 800aa44:	602a      	str	r2, [r5, #0]
 800aa46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa48:	0029      	movs	r1, r5
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa50:	aa15      	add	r2, sp, #84	@ 0x54
 800aa52:	f000 f9e5 	bl	800ae20 <_printf_common>
 800aa56:	3001      	adds	r0, #1
 800aa58:	d000      	beq.n	800aa5c <_printf_float+0xb8>
 800aa5a:	e09e      	b.n	800ab9a <_printf_float+0x1f6>
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	4240      	negs	r0, r0
 800aa60:	b017      	add	sp, #92	@ 0x5c
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa64:	3307      	adds	r3, #7
 800aa66:	e7b8      	b.n	800a9da <_printf_float+0x36>
 800aa68:	0032      	movs	r2, r6
 800aa6a:	003b      	movs	r3, r7
 800aa6c:	0030      	movs	r0, r6
 800aa6e:	0039      	movs	r1, r7
 800aa70:	f7f8 fd90 	bl	8003594 <__aeabi_dcmpun>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d00b      	beq.n	800aa90 <_printf_float+0xec>
 800aa78:	2f00      	cmp	r7, #0
 800aa7a:	da03      	bge.n	800aa84 <_printf_float+0xe0>
 800aa7c:	002b      	movs	r3, r5
 800aa7e:	222d      	movs	r2, #45	@ 0x2d
 800aa80:	3343      	adds	r3, #67	@ 0x43
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa86:	4f87      	ldr	r7, [pc, #540]	@ (800aca4 <_printf_float+0x300>)
 800aa88:	2b47      	cmp	r3, #71	@ 0x47
 800aa8a:	d8d5      	bhi.n	800aa38 <_printf_float+0x94>
 800aa8c:	4f86      	ldr	r7, [pc, #536]	@ (800aca8 <_printf_float+0x304>)
 800aa8e:	e7d3      	b.n	800aa38 <_printf_float+0x94>
 800aa90:	2220      	movs	r2, #32
 800aa92:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800aa94:	686b      	ldr	r3, [r5, #4]
 800aa96:	4394      	bics	r4, r2
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	d146      	bne.n	800ab2a <_printf_float+0x186>
 800aa9c:	3307      	adds	r3, #7
 800aa9e:	606b      	str	r3, [r5, #4]
 800aaa0:	2380      	movs	r3, #128	@ 0x80
 800aaa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaa4:	00db      	lsls	r3, r3, #3
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	602b      	str	r3, [r5, #0]
 800aaac:	9206      	str	r2, [sp, #24]
 800aaae:	aa14      	add	r2, sp, #80	@ 0x50
 800aab0:	9205      	str	r2, [sp, #20]
 800aab2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aab4:	a90a      	add	r1, sp, #40	@ 0x28
 800aab6:	9204      	str	r2, [sp, #16]
 800aab8:	aa13      	add	r2, sp, #76	@ 0x4c
 800aaba:	9203      	str	r2, [sp, #12]
 800aabc:	2223      	movs	r2, #35	@ 0x23
 800aabe:	1852      	adds	r2, r2, r1
 800aac0:	9202      	str	r2, [sp, #8]
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	686b      	ldr	r3, [r5, #4]
 800aac6:	0032      	movs	r2, r6
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aacc:	003b      	movs	r3, r7
 800aace:	f7ff fec3 	bl	800a858 <__cvt>
 800aad2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aad4:	0007      	movs	r7, r0
 800aad6:	2c47      	cmp	r4, #71	@ 0x47
 800aad8:	d12d      	bne.n	800ab36 <_printf_float+0x192>
 800aada:	1cd3      	adds	r3, r2, #3
 800aadc:	db02      	blt.n	800aae4 <_printf_float+0x140>
 800aade:	686b      	ldr	r3, [r5, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	dd47      	ble.n	800ab74 <_printf_float+0x1d0>
 800aae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aae6:	3b02      	subs	r3, #2
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	930c      	str	r3, [sp, #48]	@ 0x30
 800aaec:	0028      	movs	r0, r5
 800aaee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aaf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aaf2:	3901      	subs	r1, #1
 800aaf4:	3050      	adds	r0, #80	@ 0x50
 800aaf6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aaf8:	f7ff ff14 	bl	800a924 <__exponent>
 800aafc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aafe:	0004      	movs	r4, r0
 800ab00:	1813      	adds	r3, r2, r0
 800ab02:	612b      	str	r3, [r5, #16]
 800ab04:	2a01      	cmp	r2, #1
 800ab06:	dc02      	bgt.n	800ab0e <_printf_float+0x16a>
 800ab08:	682a      	ldr	r2, [r5, #0]
 800ab0a:	07d2      	lsls	r2, r2, #31
 800ab0c:	d501      	bpl.n	800ab12 <_printf_float+0x16e>
 800ab0e:	3301      	adds	r3, #1
 800ab10:	612b      	str	r3, [r5, #16]
 800ab12:	2323      	movs	r3, #35	@ 0x23
 800ab14:	aa0a      	add	r2, sp, #40	@ 0x28
 800ab16:	189b      	adds	r3, r3, r2
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d100      	bne.n	800ab20 <_printf_float+0x17c>
 800ab1e:	e792      	b.n	800aa46 <_printf_float+0xa2>
 800ab20:	002b      	movs	r3, r5
 800ab22:	222d      	movs	r2, #45	@ 0x2d
 800ab24:	3343      	adds	r3, #67	@ 0x43
 800ab26:	701a      	strb	r2, [r3, #0]
 800ab28:	e78d      	b.n	800aa46 <_printf_float+0xa2>
 800ab2a:	2c47      	cmp	r4, #71	@ 0x47
 800ab2c:	d1b8      	bne.n	800aaa0 <_printf_float+0xfc>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1b6      	bne.n	800aaa0 <_printf_float+0xfc>
 800ab32:	3301      	adds	r3, #1
 800ab34:	e7b3      	b.n	800aa9e <_printf_float+0xfa>
 800ab36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab38:	2b65      	cmp	r3, #101	@ 0x65
 800ab3a:	d9d7      	bls.n	800aaec <_printf_float+0x148>
 800ab3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab3e:	2b66      	cmp	r3, #102	@ 0x66
 800ab40:	d11a      	bne.n	800ab78 <_printf_float+0x1d4>
 800ab42:	686b      	ldr	r3, [r5, #4]
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	dd09      	ble.n	800ab5c <_printf_float+0x1b8>
 800ab48:	612a      	str	r2, [r5, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d102      	bne.n	800ab54 <_printf_float+0x1b0>
 800ab4e:	6829      	ldr	r1, [r5, #0]
 800ab50:	07c9      	lsls	r1, r1, #31
 800ab52:	d50b      	bpl.n	800ab6c <_printf_float+0x1c8>
 800ab54:	3301      	adds	r3, #1
 800ab56:	189b      	adds	r3, r3, r2
 800ab58:	612b      	str	r3, [r5, #16]
 800ab5a:	e007      	b.n	800ab6c <_printf_float+0x1c8>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d103      	bne.n	800ab68 <_printf_float+0x1c4>
 800ab60:	2201      	movs	r2, #1
 800ab62:	6829      	ldr	r1, [r5, #0]
 800ab64:	4211      	tst	r1, r2
 800ab66:	d000      	beq.n	800ab6a <_printf_float+0x1c6>
 800ab68:	1c9a      	adds	r2, r3, #2
 800ab6a:	612a      	str	r2, [r5, #16]
 800ab6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab6e:	2400      	movs	r4, #0
 800ab70:	65ab      	str	r3, [r5, #88]	@ 0x58
 800ab72:	e7ce      	b.n	800ab12 <_printf_float+0x16e>
 800ab74:	2367      	movs	r3, #103	@ 0x67
 800ab76:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ab7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab7c:	4299      	cmp	r1, r3
 800ab7e:	db06      	blt.n	800ab8e <_printf_float+0x1ea>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	6129      	str	r1, [r5, #16]
 800ab84:	07db      	lsls	r3, r3, #31
 800ab86:	d5f1      	bpl.n	800ab6c <_printf_float+0x1c8>
 800ab88:	3101      	adds	r1, #1
 800ab8a:	6129      	str	r1, [r5, #16]
 800ab8c:	e7ee      	b.n	800ab6c <_printf_float+0x1c8>
 800ab8e:	2201      	movs	r2, #1
 800ab90:	2900      	cmp	r1, #0
 800ab92:	dce0      	bgt.n	800ab56 <_printf_float+0x1b2>
 800ab94:	1892      	adds	r2, r2, r2
 800ab96:	1a52      	subs	r2, r2, r1
 800ab98:	e7dd      	b.n	800ab56 <_printf_float+0x1b2>
 800ab9a:	682a      	ldr	r2, [r5, #0]
 800ab9c:	0553      	lsls	r3, r2, #21
 800ab9e:	d408      	bmi.n	800abb2 <_printf_float+0x20e>
 800aba0:	692b      	ldr	r3, [r5, #16]
 800aba2:	003a      	movs	r2, r7
 800aba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aba8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800abaa:	47a0      	blx	r4
 800abac:	3001      	adds	r0, #1
 800abae:	d129      	bne.n	800ac04 <_printf_float+0x260>
 800abb0:	e754      	b.n	800aa5c <_printf_float+0xb8>
 800abb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abb4:	2b65      	cmp	r3, #101	@ 0x65
 800abb6:	d800      	bhi.n	800abba <_printf_float+0x216>
 800abb8:	e0db      	b.n	800ad72 <_printf_float+0x3ce>
 800abba:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800abbc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800abbe:	2200      	movs	r2, #0
 800abc0:	2300      	movs	r3, #0
 800abc2:	f7f5 fc41 	bl	8000448 <__aeabi_dcmpeq>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d033      	beq.n	800ac32 <_printf_float+0x28e>
 800abca:	2301      	movs	r3, #1
 800abcc:	4a37      	ldr	r2, [pc, #220]	@ (800acac <_printf_float+0x308>)
 800abce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800abd4:	47a0      	blx	r4
 800abd6:	3001      	adds	r0, #1
 800abd8:	d100      	bne.n	800abdc <_printf_float+0x238>
 800abda:	e73f      	b.n	800aa5c <_printf_float+0xb8>
 800abdc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800abde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abe0:	42b3      	cmp	r3, r6
 800abe2:	db02      	blt.n	800abea <_printf_float+0x246>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	07db      	lsls	r3, r3, #31
 800abe8:	d50c      	bpl.n	800ac04 <_printf_float+0x260>
 800abea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800abec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abf4:	47a0      	blx	r4
 800abf6:	2400      	movs	r4, #0
 800abf8:	3001      	adds	r0, #1
 800abfa:	d100      	bne.n	800abfe <_printf_float+0x25a>
 800abfc:	e72e      	b.n	800aa5c <_printf_float+0xb8>
 800abfe:	1e73      	subs	r3, r6, #1
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	dc0a      	bgt.n	800ac1a <_printf_float+0x276>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	079b      	lsls	r3, r3, #30
 800ac08:	d500      	bpl.n	800ac0c <_printf_float+0x268>
 800ac0a:	e106      	b.n	800ae1a <_printf_float+0x476>
 800ac0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac0e:	68e8      	ldr	r0, [r5, #12]
 800ac10:	4298      	cmp	r0, r3
 800ac12:	db00      	blt.n	800ac16 <_printf_float+0x272>
 800ac14:	e724      	b.n	800aa60 <_printf_float+0xbc>
 800ac16:	0018      	movs	r0, r3
 800ac18:	e722      	b.n	800aa60 <_printf_float+0xbc>
 800ac1a:	002a      	movs	r2, r5
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac22:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ac24:	321a      	adds	r2, #26
 800ac26:	47b8      	blx	r7
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d100      	bne.n	800ac2e <_printf_float+0x28a>
 800ac2c:	e716      	b.n	800aa5c <_printf_float+0xb8>
 800ac2e:	3401      	adds	r4, #1
 800ac30:	e7e5      	b.n	800abfe <_printf_float+0x25a>
 800ac32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dc3b      	bgt.n	800acb0 <_printf_float+0x30c>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4a1c      	ldr	r2, [pc, #112]	@ (800acac <_printf_float+0x308>)
 800ac3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ac42:	47a0      	blx	r4
 800ac44:	3001      	adds	r0, #1
 800ac46:	d100      	bne.n	800ac4a <_printf_float+0x2a6>
 800ac48:	e708      	b.n	800aa5c <_printf_float+0xb8>
 800ac4a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ac4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac4e:	4333      	orrs	r3, r6
 800ac50:	d102      	bne.n	800ac58 <_printf_float+0x2b4>
 800ac52:	682b      	ldr	r3, [r5, #0]
 800ac54:	07db      	lsls	r3, r3, #31
 800ac56:	d5d5      	bpl.n	800ac04 <_printf_float+0x260>
 800ac58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ac62:	47a0      	blx	r4
 800ac64:	2300      	movs	r3, #0
 800ac66:	3001      	adds	r0, #1
 800ac68:	d100      	bne.n	800ac6c <_printf_float+0x2c8>
 800ac6a:	e6f7      	b.n	800aa5c <_printf_float+0xb8>
 800ac6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac72:	425b      	negs	r3, r3
 800ac74:	4293      	cmp	r3, r2
 800ac76:	dc01      	bgt.n	800ac7c <_printf_float+0x2d8>
 800ac78:	0033      	movs	r3, r6
 800ac7a:	e792      	b.n	800aba2 <_printf_float+0x1fe>
 800ac7c:	002a      	movs	r2, r5
 800ac7e:	2301      	movs	r3, #1
 800ac80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ac86:	321a      	adds	r2, #26
 800ac88:	47a0      	blx	r4
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d100      	bne.n	800ac90 <_printf_float+0x2ec>
 800ac8e:	e6e5      	b.n	800aa5c <_printf_float+0xb8>
 800ac90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac92:	3301      	adds	r3, #1
 800ac94:	e7ea      	b.n	800ac6c <_printf_float+0x2c8>
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	7fefffff 	.word	0x7fefffff
 800ac9c:	0800e574 	.word	0x0800e574
 800aca0:	0800e570 	.word	0x0800e570
 800aca4:	0800e57c 	.word	0x0800e57c
 800aca8:	0800e578 	.word	0x0800e578
 800acac:	0800e580 	.word	0x0800e580
 800acb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800acb2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800acb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800acb6:	429e      	cmp	r6, r3
 800acb8:	dd00      	ble.n	800acbc <_printf_float+0x318>
 800acba:	001e      	movs	r6, r3
 800acbc:	2e00      	cmp	r6, #0
 800acbe:	dc31      	bgt.n	800ad24 <_printf_float+0x380>
 800acc0:	43f3      	mvns	r3, r6
 800acc2:	2400      	movs	r4, #0
 800acc4:	17db      	asrs	r3, r3, #31
 800acc6:	4033      	ands	r3, r6
 800acc8:	930e      	str	r3, [sp, #56]	@ 0x38
 800acca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800accc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acce:	1af3      	subs	r3, r6, r3
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	dc30      	bgt.n	800ad36 <_printf_float+0x392>
 800acd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800acd8:	429a      	cmp	r2, r3
 800acda:	dc38      	bgt.n	800ad4e <_printf_float+0x3aa>
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	07db      	lsls	r3, r3, #31
 800ace0:	d435      	bmi.n	800ad4e <_printf_float+0x3aa>
 800ace2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ace4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ace6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ace8:	1b9b      	subs	r3, r3, r6
 800acea:	1b14      	subs	r4, r2, r4
 800acec:	429c      	cmp	r4, r3
 800acee:	dd00      	ble.n	800acf2 <_printf_float+0x34e>
 800acf0:	001c      	movs	r4, r3
 800acf2:	2c00      	cmp	r4, #0
 800acf4:	dc34      	bgt.n	800ad60 <_printf_float+0x3bc>
 800acf6:	43e3      	mvns	r3, r4
 800acf8:	2600      	movs	r6, #0
 800acfa:	17db      	asrs	r3, r3, #31
 800acfc:	401c      	ands	r4, r3
 800acfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	1b1b      	subs	r3, r3, r4
 800ad06:	42b3      	cmp	r3, r6
 800ad08:	dc00      	bgt.n	800ad0c <_printf_float+0x368>
 800ad0a:	e77b      	b.n	800ac04 <_printf_float+0x260>
 800ad0c:	002a      	movs	r2, r5
 800ad0e:	2301      	movs	r3, #1
 800ad10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ad16:	321a      	adds	r2, #26
 800ad18:	47b8      	blx	r7
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	d100      	bne.n	800ad20 <_printf_float+0x37c>
 800ad1e:	e69d      	b.n	800aa5c <_printf_float+0xb8>
 800ad20:	3601      	adds	r6, #1
 800ad22:	e7ec      	b.n	800acfe <_printf_float+0x35a>
 800ad24:	0033      	movs	r3, r6
 800ad26:	003a      	movs	r2, r7
 800ad28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ad2e:	47a0      	blx	r4
 800ad30:	3001      	adds	r0, #1
 800ad32:	d1c5      	bne.n	800acc0 <_printf_float+0x31c>
 800ad34:	e692      	b.n	800aa5c <_printf_float+0xb8>
 800ad36:	002a      	movs	r2, r5
 800ad38:	2301      	movs	r3, #1
 800ad3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad40:	321a      	adds	r2, #26
 800ad42:	47b0      	blx	r6
 800ad44:	3001      	adds	r0, #1
 800ad46:	d100      	bne.n	800ad4a <_printf_float+0x3a6>
 800ad48:	e688      	b.n	800aa5c <_printf_float+0xb8>
 800ad4a:	3401      	adds	r4, #1
 800ad4c:	e7bd      	b.n	800acca <_printf_float+0x326>
 800ad4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ad58:	47a0      	blx	r4
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d1c1      	bne.n	800ace2 <_printf_float+0x33e>
 800ad5e:	e67d      	b.n	800aa5c <_printf_float+0xb8>
 800ad60:	19ba      	adds	r2, r7, r6
 800ad62:	0023      	movs	r3, r4
 800ad64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad6a:	47b0      	blx	r6
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d1c2      	bne.n	800acf6 <_printf_float+0x352>
 800ad70:	e674      	b.n	800aa5c <_printf_float+0xb8>
 800ad72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	dc02      	bgt.n	800ad80 <_printf_float+0x3dc>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	421a      	tst	r2, r3
 800ad7e:	d039      	beq.n	800adf4 <_printf_float+0x450>
 800ad80:	2301      	movs	r3, #1
 800ad82:	003a      	movs	r2, r7
 800ad84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad8a:	47b0      	blx	r6
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d100      	bne.n	800ad92 <_printf_float+0x3ee>
 800ad90:	e664      	b.n	800aa5c <_printf_float+0xb8>
 800ad92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad9c:	47b0      	blx	r6
 800ad9e:	3001      	adds	r0, #1
 800ada0:	d100      	bne.n	800ada4 <_printf_float+0x400>
 800ada2:	e65b      	b.n	800aa5c <_printf_float+0xb8>
 800ada4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ada6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ada8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adaa:	2200      	movs	r2, #0
 800adac:	3b01      	subs	r3, #1
 800adae:	930c      	str	r3, [sp, #48]	@ 0x30
 800adb0:	2300      	movs	r3, #0
 800adb2:	f7f5 fb49 	bl	8000448 <__aeabi_dcmpeq>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d11a      	bne.n	800adf0 <_printf_float+0x44c>
 800adba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adbc:	1c7a      	adds	r2, r7, #1
 800adbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adc2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800adc4:	47b0      	blx	r6
 800adc6:	3001      	adds	r0, #1
 800adc8:	d10e      	bne.n	800ade8 <_printf_float+0x444>
 800adca:	e647      	b.n	800aa5c <_printf_float+0xb8>
 800adcc:	002a      	movs	r2, r5
 800adce:	2301      	movs	r3, #1
 800add0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800add2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800add4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800add6:	321a      	adds	r2, #26
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	d100      	bne.n	800ade0 <_printf_float+0x43c>
 800adde:	e63d      	b.n	800aa5c <_printf_float+0xb8>
 800ade0:	3601      	adds	r6, #1
 800ade2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ade4:	429e      	cmp	r6, r3
 800ade6:	dbf1      	blt.n	800adcc <_printf_float+0x428>
 800ade8:	002a      	movs	r2, r5
 800adea:	0023      	movs	r3, r4
 800adec:	3250      	adds	r2, #80	@ 0x50
 800adee:	e6d9      	b.n	800aba4 <_printf_float+0x200>
 800adf0:	2600      	movs	r6, #0
 800adf2:	e7f6      	b.n	800ade2 <_printf_float+0x43e>
 800adf4:	003a      	movs	r2, r7
 800adf6:	e7e2      	b.n	800adbe <_printf_float+0x41a>
 800adf8:	002a      	movs	r2, r5
 800adfa:	2301      	movs	r3, #1
 800adfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ae02:	3219      	adds	r2, #25
 800ae04:	47b0      	blx	r6
 800ae06:	3001      	adds	r0, #1
 800ae08:	d100      	bne.n	800ae0c <_printf_float+0x468>
 800ae0a:	e627      	b.n	800aa5c <_printf_float+0xb8>
 800ae0c:	3401      	adds	r4, #1
 800ae0e:	68eb      	ldr	r3, [r5, #12]
 800ae10:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ae12:	1a9b      	subs	r3, r3, r2
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	dcef      	bgt.n	800adf8 <_printf_float+0x454>
 800ae18:	e6f8      	b.n	800ac0c <_printf_float+0x268>
 800ae1a:	2400      	movs	r4, #0
 800ae1c:	e7f7      	b.n	800ae0e <_printf_float+0x46a>
 800ae1e:	46c0      	nop			@ (mov r8, r8)

0800ae20 <_printf_common>:
 800ae20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae22:	0016      	movs	r6, r2
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	688a      	ldr	r2, [r1, #8]
 800ae28:	690b      	ldr	r3, [r1, #16]
 800ae2a:	000c      	movs	r4, r1
 800ae2c:	9000      	str	r0, [sp, #0]
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	da00      	bge.n	800ae34 <_printf_common+0x14>
 800ae32:	0013      	movs	r3, r2
 800ae34:	0022      	movs	r2, r4
 800ae36:	6033      	str	r3, [r6, #0]
 800ae38:	3243      	adds	r2, #67	@ 0x43
 800ae3a:	7812      	ldrb	r2, [r2, #0]
 800ae3c:	2a00      	cmp	r2, #0
 800ae3e:	d001      	beq.n	800ae44 <_printf_common+0x24>
 800ae40:	3301      	adds	r3, #1
 800ae42:	6033      	str	r3, [r6, #0]
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	069b      	lsls	r3, r3, #26
 800ae48:	d502      	bpl.n	800ae50 <_printf_common+0x30>
 800ae4a:	6833      	ldr	r3, [r6, #0]
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	6033      	str	r3, [r6, #0]
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	2306      	movs	r3, #6
 800ae54:	0015      	movs	r5, r2
 800ae56:	401d      	ands	r5, r3
 800ae58:	421a      	tst	r2, r3
 800ae5a:	d027      	beq.n	800aeac <_printf_common+0x8c>
 800ae5c:	0023      	movs	r3, r4
 800ae5e:	3343      	adds	r3, #67	@ 0x43
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	1e5a      	subs	r2, r3, #1
 800ae64:	4193      	sbcs	r3, r2
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	0692      	lsls	r2, r2, #26
 800ae6a:	d430      	bmi.n	800aece <_printf_common+0xae>
 800ae6c:	0022      	movs	r2, r4
 800ae6e:	9901      	ldr	r1, [sp, #4]
 800ae70:	9800      	ldr	r0, [sp, #0]
 800ae72:	9d08      	ldr	r5, [sp, #32]
 800ae74:	3243      	adds	r2, #67	@ 0x43
 800ae76:	47a8      	blx	r5
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d025      	beq.n	800aec8 <_printf_common+0xa8>
 800ae7c:	2206      	movs	r2, #6
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	2500      	movs	r5, #0
 800ae82:	4013      	ands	r3, r2
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d105      	bne.n	800ae94 <_printf_common+0x74>
 800ae88:	6833      	ldr	r3, [r6, #0]
 800ae8a:	68e5      	ldr	r5, [r4, #12]
 800ae8c:	1aed      	subs	r5, r5, r3
 800ae8e:	43eb      	mvns	r3, r5
 800ae90:	17db      	asrs	r3, r3, #31
 800ae92:	401d      	ands	r5, r3
 800ae94:	68a3      	ldr	r3, [r4, #8]
 800ae96:	6922      	ldr	r2, [r4, #16]
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	dd01      	ble.n	800aea0 <_printf_common+0x80>
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	18ed      	adds	r5, r5, r3
 800aea0:	2600      	movs	r6, #0
 800aea2:	42b5      	cmp	r5, r6
 800aea4:	d120      	bne.n	800aee8 <_printf_common+0xc8>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e010      	b.n	800aecc <_printf_common+0xac>
 800aeaa:	3501      	adds	r5, #1
 800aeac:	68e3      	ldr	r3, [r4, #12]
 800aeae:	6832      	ldr	r2, [r6, #0]
 800aeb0:	1a9b      	subs	r3, r3, r2
 800aeb2:	42ab      	cmp	r3, r5
 800aeb4:	ddd2      	ble.n	800ae5c <_printf_common+0x3c>
 800aeb6:	0022      	movs	r2, r4
 800aeb8:	2301      	movs	r3, #1
 800aeba:	9901      	ldr	r1, [sp, #4]
 800aebc:	9800      	ldr	r0, [sp, #0]
 800aebe:	9f08      	ldr	r7, [sp, #32]
 800aec0:	3219      	adds	r2, #25
 800aec2:	47b8      	blx	r7
 800aec4:	3001      	adds	r0, #1
 800aec6:	d1f0      	bne.n	800aeaa <_printf_common+0x8a>
 800aec8:	2001      	movs	r0, #1
 800aeca:	4240      	negs	r0, r0
 800aecc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aece:	2030      	movs	r0, #48	@ 0x30
 800aed0:	18e1      	adds	r1, r4, r3
 800aed2:	3143      	adds	r1, #67	@ 0x43
 800aed4:	7008      	strb	r0, [r1, #0]
 800aed6:	0021      	movs	r1, r4
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	3145      	adds	r1, #69	@ 0x45
 800aedc:	7809      	ldrb	r1, [r1, #0]
 800aede:	18a2      	adds	r2, r4, r2
 800aee0:	3243      	adds	r2, #67	@ 0x43
 800aee2:	3302      	adds	r3, #2
 800aee4:	7011      	strb	r1, [r2, #0]
 800aee6:	e7c1      	b.n	800ae6c <_printf_common+0x4c>
 800aee8:	0022      	movs	r2, r4
 800aeea:	2301      	movs	r3, #1
 800aeec:	9901      	ldr	r1, [sp, #4]
 800aeee:	9800      	ldr	r0, [sp, #0]
 800aef0:	9f08      	ldr	r7, [sp, #32]
 800aef2:	321a      	adds	r2, #26
 800aef4:	47b8      	blx	r7
 800aef6:	3001      	adds	r0, #1
 800aef8:	d0e6      	beq.n	800aec8 <_printf_common+0xa8>
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7d1      	b.n	800aea2 <_printf_common+0x82>
	...

0800af00 <_printf_i>:
 800af00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af02:	b08b      	sub	sp, #44	@ 0x2c
 800af04:	9206      	str	r2, [sp, #24]
 800af06:	000a      	movs	r2, r1
 800af08:	3243      	adds	r2, #67	@ 0x43
 800af0a:	9307      	str	r3, [sp, #28]
 800af0c:	9005      	str	r0, [sp, #20]
 800af0e:	9203      	str	r2, [sp, #12]
 800af10:	7e0a      	ldrb	r2, [r1, #24]
 800af12:	000c      	movs	r4, r1
 800af14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af16:	2a78      	cmp	r2, #120	@ 0x78
 800af18:	d809      	bhi.n	800af2e <_printf_i+0x2e>
 800af1a:	2a62      	cmp	r2, #98	@ 0x62
 800af1c:	d80b      	bhi.n	800af36 <_printf_i+0x36>
 800af1e:	2a00      	cmp	r2, #0
 800af20:	d100      	bne.n	800af24 <_printf_i+0x24>
 800af22:	e0ba      	b.n	800b09a <_printf_i+0x19a>
 800af24:	497a      	ldr	r1, [pc, #488]	@ (800b110 <_printf_i+0x210>)
 800af26:	9104      	str	r1, [sp, #16]
 800af28:	2a58      	cmp	r2, #88	@ 0x58
 800af2a:	d100      	bne.n	800af2e <_printf_i+0x2e>
 800af2c:	e08e      	b.n	800b04c <_printf_i+0x14c>
 800af2e:	0025      	movs	r5, r4
 800af30:	3542      	adds	r5, #66	@ 0x42
 800af32:	702a      	strb	r2, [r5, #0]
 800af34:	e022      	b.n	800af7c <_printf_i+0x7c>
 800af36:	0010      	movs	r0, r2
 800af38:	3863      	subs	r0, #99	@ 0x63
 800af3a:	2815      	cmp	r0, #21
 800af3c:	d8f7      	bhi.n	800af2e <_printf_i+0x2e>
 800af3e:	f7f5 f8f3 	bl	8000128 <__gnu_thumb1_case_shi>
 800af42:	0016      	.short	0x0016
 800af44:	fff6001f 	.word	0xfff6001f
 800af48:	fff6fff6 	.word	0xfff6fff6
 800af4c:	001ffff6 	.word	0x001ffff6
 800af50:	fff6fff6 	.word	0xfff6fff6
 800af54:	fff6fff6 	.word	0xfff6fff6
 800af58:	0036009f 	.word	0x0036009f
 800af5c:	fff6007e 	.word	0xfff6007e
 800af60:	00b0fff6 	.word	0x00b0fff6
 800af64:	0036fff6 	.word	0x0036fff6
 800af68:	fff6fff6 	.word	0xfff6fff6
 800af6c:	0082      	.short	0x0082
 800af6e:	0025      	movs	r5, r4
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	3542      	adds	r5, #66	@ 0x42
 800af74:	1d11      	adds	r1, r2, #4
 800af76:	6019      	str	r1, [r3, #0]
 800af78:	6813      	ldr	r3, [r2, #0]
 800af7a:	702b      	strb	r3, [r5, #0]
 800af7c:	2301      	movs	r3, #1
 800af7e:	e09e      	b.n	800b0be <_printf_i+0x1be>
 800af80:	6818      	ldr	r0, [r3, #0]
 800af82:	6809      	ldr	r1, [r1, #0]
 800af84:	1d02      	adds	r2, r0, #4
 800af86:	060d      	lsls	r5, r1, #24
 800af88:	d50b      	bpl.n	800afa2 <_printf_i+0xa2>
 800af8a:	6806      	ldr	r6, [r0, #0]
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	2e00      	cmp	r6, #0
 800af90:	da03      	bge.n	800af9a <_printf_i+0x9a>
 800af92:	232d      	movs	r3, #45	@ 0x2d
 800af94:	9a03      	ldr	r2, [sp, #12]
 800af96:	4276      	negs	r6, r6
 800af98:	7013      	strb	r3, [r2, #0]
 800af9a:	4b5d      	ldr	r3, [pc, #372]	@ (800b110 <_printf_i+0x210>)
 800af9c:	270a      	movs	r7, #10
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	e018      	b.n	800afd4 <_printf_i+0xd4>
 800afa2:	6806      	ldr	r6, [r0, #0]
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	0649      	lsls	r1, r1, #25
 800afa8:	d5f1      	bpl.n	800af8e <_printf_i+0x8e>
 800afaa:	b236      	sxth	r6, r6
 800afac:	e7ef      	b.n	800af8e <_printf_i+0x8e>
 800afae:	6808      	ldr	r0, [r1, #0]
 800afb0:	6819      	ldr	r1, [r3, #0]
 800afb2:	c940      	ldmia	r1!, {r6}
 800afb4:	0605      	lsls	r5, r0, #24
 800afb6:	d402      	bmi.n	800afbe <_printf_i+0xbe>
 800afb8:	0640      	lsls	r0, r0, #25
 800afba:	d500      	bpl.n	800afbe <_printf_i+0xbe>
 800afbc:	b2b6      	uxth	r6, r6
 800afbe:	6019      	str	r1, [r3, #0]
 800afc0:	4b53      	ldr	r3, [pc, #332]	@ (800b110 <_printf_i+0x210>)
 800afc2:	270a      	movs	r7, #10
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	2a6f      	cmp	r2, #111	@ 0x6f
 800afc8:	d100      	bne.n	800afcc <_printf_i+0xcc>
 800afca:	3f02      	subs	r7, #2
 800afcc:	0023      	movs	r3, r4
 800afce:	2200      	movs	r2, #0
 800afd0:	3343      	adds	r3, #67	@ 0x43
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	60a3      	str	r3, [r4, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	db06      	blt.n	800afea <_printf_i+0xea>
 800afdc:	2104      	movs	r1, #4
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	9d03      	ldr	r5, [sp, #12]
 800afe2:	438a      	bics	r2, r1
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	4333      	orrs	r3, r6
 800afe8:	d00c      	beq.n	800b004 <_printf_i+0x104>
 800afea:	9d03      	ldr	r5, [sp, #12]
 800afec:	0030      	movs	r0, r6
 800afee:	0039      	movs	r1, r7
 800aff0:	f7f5 f92a 	bl	8000248 <__aeabi_uidivmod>
 800aff4:	9b04      	ldr	r3, [sp, #16]
 800aff6:	3d01      	subs	r5, #1
 800aff8:	5c5b      	ldrb	r3, [r3, r1]
 800affa:	702b      	strb	r3, [r5, #0]
 800affc:	0033      	movs	r3, r6
 800affe:	0006      	movs	r6, r0
 800b000:	429f      	cmp	r7, r3
 800b002:	d9f3      	bls.n	800afec <_printf_i+0xec>
 800b004:	2f08      	cmp	r7, #8
 800b006:	d109      	bne.n	800b01c <_printf_i+0x11c>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	07db      	lsls	r3, r3, #31
 800b00c:	d506      	bpl.n	800b01c <_printf_i+0x11c>
 800b00e:	6862      	ldr	r2, [r4, #4]
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	429a      	cmp	r2, r3
 800b014:	dc02      	bgt.n	800b01c <_printf_i+0x11c>
 800b016:	2330      	movs	r3, #48	@ 0x30
 800b018:	3d01      	subs	r5, #1
 800b01a:	702b      	strb	r3, [r5, #0]
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	1b5b      	subs	r3, r3, r5
 800b020:	6123      	str	r3, [r4, #16]
 800b022:	9b07      	ldr	r3, [sp, #28]
 800b024:	0021      	movs	r1, r4
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	9805      	ldr	r0, [sp, #20]
 800b02a:	9b06      	ldr	r3, [sp, #24]
 800b02c:	aa09      	add	r2, sp, #36	@ 0x24
 800b02e:	f7ff fef7 	bl	800ae20 <_printf_common>
 800b032:	3001      	adds	r0, #1
 800b034:	d148      	bne.n	800b0c8 <_printf_i+0x1c8>
 800b036:	2001      	movs	r0, #1
 800b038:	4240      	negs	r0, r0
 800b03a:	b00b      	add	sp, #44	@ 0x2c
 800b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03e:	2220      	movs	r2, #32
 800b040:	6809      	ldr	r1, [r1, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	6022      	str	r2, [r4, #0]
 800b046:	2278      	movs	r2, #120	@ 0x78
 800b048:	4932      	ldr	r1, [pc, #200]	@ (800b114 <_printf_i+0x214>)
 800b04a:	9104      	str	r1, [sp, #16]
 800b04c:	0021      	movs	r1, r4
 800b04e:	3145      	adds	r1, #69	@ 0x45
 800b050:	700a      	strb	r2, [r1, #0]
 800b052:	6819      	ldr	r1, [r3, #0]
 800b054:	6822      	ldr	r2, [r4, #0]
 800b056:	c940      	ldmia	r1!, {r6}
 800b058:	0610      	lsls	r0, r2, #24
 800b05a:	d402      	bmi.n	800b062 <_printf_i+0x162>
 800b05c:	0650      	lsls	r0, r2, #25
 800b05e:	d500      	bpl.n	800b062 <_printf_i+0x162>
 800b060:	b2b6      	uxth	r6, r6
 800b062:	6019      	str	r1, [r3, #0]
 800b064:	07d3      	lsls	r3, r2, #31
 800b066:	d502      	bpl.n	800b06e <_printf_i+0x16e>
 800b068:	2320      	movs	r3, #32
 800b06a:	4313      	orrs	r3, r2
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	2e00      	cmp	r6, #0
 800b070:	d001      	beq.n	800b076 <_printf_i+0x176>
 800b072:	2710      	movs	r7, #16
 800b074:	e7aa      	b.n	800afcc <_printf_i+0xcc>
 800b076:	2220      	movs	r2, #32
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	4393      	bics	r3, r2
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	e7f8      	b.n	800b072 <_printf_i+0x172>
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	680d      	ldr	r5, [r1, #0]
 800b084:	1d10      	adds	r0, r2, #4
 800b086:	6949      	ldr	r1, [r1, #20]
 800b088:	6018      	str	r0, [r3, #0]
 800b08a:	6813      	ldr	r3, [r2, #0]
 800b08c:	062e      	lsls	r6, r5, #24
 800b08e:	d501      	bpl.n	800b094 <_printf_i+0x194>
 800b090:	6019      	str	r1, [r3, #0]
 800b092:	e002      	b.n	800b09a <_printf_i+0x19a>
 800b094:	066d      	lsls	r5, r5, #25
 800b096:	d5fb      	bpl.n	800b090 <_printf_i+0x190>
 800b098:	8019      	strh	r1, [r3, #0]
 800b09a:	2300      	movs	r3, #0
 800b09c:	9d03      	ldr	r5, [sp, #12]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	e7bf      	b.n	800b022 <_printf_i+0x122>
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	1d11      	adds	r1, r2, #4
 800b0a6:	6019      	str	r1, [r3, #0]
 800b0a8:	6815      	ldr	r5, [r2, #0]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	0028      	movs	r0, r5
 800b0ae:	6862      	ldr	r2, [r4, #4]
 800b0b0:	f000 f9ff 	bl	800b4b2 <memchr>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d001      	beq.n	800b0bc <_printf_i+0x1bc>
 800b0b8:	1b40      	subs	r0, r0, r5
 800b0ba:	6060      	str	r0, [r4, #4]
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	6123      	str	r3, [r4, #16]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9a03      	ldr	r2, [sp, #12]
 800b0c4:	7013      	strb	r3, [r2, #0]
 800b0c6:	e7ac      	b.n	800b022 <_printf_i+0x122>
 800b0c8:	002a      	movs	r2, r5
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	9906      	ldr	r1, [sp, #24]
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	9d07      	ldr	r5, [sp, #28]
 800b0d2:	47a8      	blx	r5
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d0ae      	beq.n	800b036 <_printf_i+0x136>
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	079b      	lsls	r3, r3, #30
 800b0dc:	d415      	bmi.n	800b10a <_printf_i+0x20a>
 800b0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e0:	68e0      	ldr	r0, [r4, #12]
 800b0e2:	4298      	cmp	r0, r3
 800b0e4:	daa9      	bge.n	800b03a <_printf_i+0x13a>
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	e7a7      	b.n	800b03a <_printf_i+0x13a>
 800b0ea:	0022      	movs	r2, r4
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	9906      	ldr	r1, [sp, #24]
 800b0f0:	9805      	ldr	r0, [sp, #20]
 800b0f2:	9e07      	ldr	r6, [sp, #28]
 800b0f4:	3219      	adds	r2, #25
 800b0f6:	47b0      	blx	r6
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	d09c      	beq.n	800b036 <_printf_i+0x136>
 800b0fc:	3501      	adds	r5, #1
 800b0fe:	68e3      	ldr	r3, [r4, #12]
 800b100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	42ab      	cmp	r3, r5
 800b106:	dcf0      	bgt.n	800b0ea <_printf_i+0x1ea>
 800b108:	e7e9      	b.n	800b0de <_printf_i+0x1de>
 800b10a:	2500      	movs	r5, #0
 800b10c:	e7f7      	b.n	800b0fe <_printf_i+0x1fe>
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	0800e582 	.word	0x0800e582
 800b114:	0800e593 	.word	0x0800e593

0800b118 <std>:
 800b118:	2300      	movs	r3, #0
 800b11a:	b510      	push	{r4, lr}
 800b11c:	0004      	movs	r4, r0
 800b11e:	6003      	str	r3, [r0, #0]
 800b120:	6043      	str	r3, [r0, #4]
 800b122:	6083      	str	r3, [r0, #8]
 800b124:	8181      	strh	r1, [r0, #12]
 800b126:	6643      	str	r3, [r0, #100]	@ 0x64
 800b128:	81c2      	strh	r2, [r0, #14]
 800b12a:	6103      	str	r3, [r0, #16]
 800b12c:	6143      	str	r3, [r0, #20]
 800b12e:	6183      	str	r3, [r0, #24]
 800b130:	0019      	movs	r1, r3
 800b132:	2208      	movs	r2, #8
 800b134:	305c      	adds	r0, #92	@ 0x5c
 800b136:	f000 f935 	bl	800b3a4 <memset>
 800b13a:	4b0b      	ldr	r3, [pc, #44]	@ (800b168 <std+0x50>)
 800b13c:	6224      	str	r4, [r4, #32]
 800b13e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b140:	4b0a      	ldr	r3, [pc, #40]	@ (800b16c <std+0x54>)
 800b142:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b144:	4b0a      	ldr	r3, [pc, #40]	@ (800b170 <std+0x58>)
 800b146:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b148:	4b0a      	ldr	r3, [pc, #40]	@ (800b174 <std+0x5c>)
 800b14a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b14c:	4b0a      	ldr	r3, [pc, #40]	@ (800b178 <std+0x60>)
 800b14e:	429c      	cmp	r4, r3
 800b150:	d005      	beq.n	800b15e <std+0x46>
 800b152:	4b0a      	ldr	r3, [pc, #40]	@ (800b17c <std+0x64>)
 800b154:	429c      	cmp	r4, r3
 800b156:	d002      	beq.n	800b15e <std+0x46>
 800b158:	4b09      	ldr	r3, [pc, #36]	@ (800b180 <std+0x68>)
 800b15a:	429c      	cmp	r4, r3
 800b15c:	d103      	bne.n	800b166 <std+0x4e>
 800b15e:	0020      	movs	r0, r4
 800b160:	3058      	adds	r0, #88	@ 0x58
 800b162:	f000 f9a3 	bl	800b4ac <__retarget_lock_init_recursive>
 800b166:	bd10      	pop	{r4, pc}
 800b168:	0800b30d 	.word	0x0800b30d
 800b16c:	0800b335 	.word	0x0800b335
 800b170:	0800b36d 	.word	0x0800b36d
 800b174:	0800b399 	.word	0x0800b399
 800b178:	20000454 	.word	0x20000454
 800b17c:	200004bc 	.word	0x200004bc
 800b180:	20000524 	.word	0x20000524

0800b184 <stdio_exit_handler>:
 800b184:	b510      	push	{r4, lr}
 800b186:	4a03      	ldr	r2, [pc, #12]	@ (800b194 <stdio_exit_handler+0x10>)
 800b188:	4903      	ldr	r1, [pc, #12]	@ (800b198 <stdio_exit_handler+0x14>)
 800b18a:	4804      	ldr	r0, [pc, #16]	@ (800b19c <stdio_exit_handler+0x18>)
 800b18c:	f000 f86c 	bl	800b268 <_fwalk_sglue>
 800b190:	bd10      	pop	{r4, pc}
 800b192:	46c0      	nop			@ (mov r8, r8)
 800b194:	2000000c 	.word	0x2000000c
 800b198:	0800ced1 	.word	0x0800ced1
 800b19c:	2000001c 	.word	0x2000001c

0800b1a0 <cleanup_stdio>:
 800b1a0:	6841      	ldr	r1, [r0, #4]
 800b1a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d0 <cleanup_stdio+0x30>)
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	0004      	movs	r4, r0
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	d001      	beq.n	800b1b0 <cleanup_stdio+0x10>
 800b1ac:	f001 fe90 	bl	800ced0 <_fflush_r>
 800b1b0:	68a1      	ldr	r1, [r4, #8]
 800b1b2:	4b08      	ldr	r3, [pc, #32]	@ (800b1d4 <cleanup_stdio+0x34>)
 800b1b4:	4299      	cmp	r1, r3
 800b1b6:	d002      	beq.n	800b1be <cleanup_stdio+0x1e>
 800b1b8:	0020      	movs	r0, r4
 800b1ba:	f001 fe89 	bl	800ced0 <_fflush_r>
 800b1be:	68e1      	ldr	r1, [r4, #12]
 800b1c0:	4b05      	ldr	r3, [pc, #20]	@ (800b1d8 <cleanup_stdio+0x38>)
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	d002      	beq.n	800b1cc <cleanup_stdio+0x2c>
 800b1c6:	0020      	movs	r0, r4
 800b1c8:	f001 fe82 	bl	800ced0 <_fflush_r>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	20000454 	.word	0x20000454
 800b1d4:	200004bc 	.word	0x200004bc
 800b1d8:	20000524 	.word	0x20000524

0800b1dc <global_stdio_init.part.0>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4b09      	ldr	r3, [pc, #36]	@ (800b204 <global_stdio_init.part.0+0x28>)
 800b1e0:	4a09      	ldr	r2, [pc, #36]	@ (800b208 <global_stdio_init.part.0+0x2c>)
 800b1e2:	2104      	movs	r1, #4
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	4809      	ldr	r0, [pc, #36]	@ (800b20c <global_stdio_init.part.0+0x30>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7ff ff95 	bl	800b118 <std>
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	2109      	movs	r1, #9
 800b1f2:	4807      	ldr	r0, [pc, #28]	@ (800b210 <global_stdio_init.part.0+0x34>)
 800b1f4:	f7ff ff90 	bl	800b118 <std>
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	2112      	movs	r1, #18
 800b1fc:	4805      	ldr	r0, [pc, #20]	@ (800b214 <global_stdio_init.part.0+0x38>)
 800b1fe:	f7ff ff8b 	bl	800b118 <std>
 800b202:	bd10      	pop	{r4, pc}
 800b204:	2000058c 	.word	0x2000058c
 800b208:	0800b185 	.word	0x0800b185
 800b20c:	20000454 	.word	0x20000454
 800b210:	200004bc 	.word	0x200004bc
 800b214:	20000524 	.word	0x20000524

0800b218 <__sfp_lock_acquire>:
 800b218:	b510      	push	{r4, lr}
 800b21a:	4802      	ldr	r0, [pc, #8]	@ (800b224 <__sfp_lock_acquire+0xc>)
 800b21c:	f000 f947 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800b220:	bd10      	pop	{r4, pc}
 800b222:	46c0      	nop			@ (mov r8, r8)
 800b224:	20000595 	.word	0x20000595

0800b228 <__sfp_lock_release>:
 800b228:	b510      	push	{r4, lr}
 800b22a:	4802      	ldr	r0, [pc, #8]	@ (800b234 <__sfp_lock_release+0xc>)
 800b22c:	f000 f940 	bl	800b4b0 <__retarget_lock_release_recursive>
 800b230:	bd10      	pop	{r4, pc}
 800b232:	46c0      	nop			@ (mov r8, r8)
 800b234:	20000595 	.word	0x20000595

0800b238 <__sinit>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	0004      	movs	r4, r0
 800b23c:	f7ff ffec 	bl	800b218 <__sfp_lock_acquire>
 800b240:	6a23      	ldr	r3, [r4, #32]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <__sinit+0x14>
 800b246:	f7ff ffef 	bl	800b228 <__sfp_lock_release>
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <__sinit+0x28>)
 800b24e:	6223      	str	r3, [r4, #32]
 800b250:	4b04      	ldr	r3, [pc, #16]	@ (800b264 <__sinit+0x2c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1f6      	bne.n	800b246 <__sinit+0xe>
 800b258:	f7ff ffc0 	bl	800b1dc <global_stdio_init.part.0>
 800b25c:	e7f3      	b.n	800b246 <__sinit+0xe>
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	0800b1a1 	.word	0x0800b1a1
 800b264:	2000058c 	.word	0x2000058c

0800b268 <_fwalk_sglue>:
 800b268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b26a:	0014      	movs	r4, r2
 800b26c:	2600      	movs	r6, #0
 800b26e:	9000      	str	r0, [sp, #0]
 800b270:	9101      	str	r1, [sp, #4]
 800b272:	68a5      	ldr	r5, [r4, #8]
 800b274:	6867      	ldr	r7, [r4, #4]
 800b276:	3f01      	subs	r7, #1
 800b278:	d504      	bpl.n	800b284 <_fwalk_sglue+0x1c>
 800b27a:	6824      	ldr	r4, [r4, #0]
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	d1f8      	bne.n	800b272 <_fwalk_sglue+0xa>
 800b280:	0030      	movs	r0, r6
 800b282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b284:	89ab      	ldrh	r3, [r5, #12]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d908      	bls.n	800b29c <_fwalk_sglue+0x34>
 800b28a:	220e      	movs	r2, #14
 800b28c:	5eab      	ldrsh	r3, [r5, r2]
 800b28e:	3301      	adds	r3, #1
 800b290:	d004      	beq.n	800b29c <_fwalk_sglue+0x34>
 800b292:	0029      	movs	r1, r5
 800b294:	9800      	ldr	r0, [sp, #0]
 800b296:	9b01      	ldr	r3, [sp, #4]
 800b298:	4798      	blx	r3
 800b29a:	4306      	orrs	r6, r0
 800b29c:	3568      	adds	r5, #104	@ 0x68
 800b29e:	e7ea      	b.n	800b276 <_fwalk_sglue+0xe>

0800b2a0 <sniprintf>:
 800b2a0:	b40c      	push	{r2, r3}
 800b2a2:	b530      	push	{r4, r5, lr}
 800b2a4:	4b18      	ldr	r3, [pc, #96]	@ (800b308 <sniprintf+0x68>)
 800b2a6:	000c      	movs	r4, r1
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	b09d      	sub	sp, #116	@ 0x74
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	da08      	bge.n	800b2c2 <sniprintf+0x22>
 800b2b0:	238b      	movs	r3, #139	@ 0x8b
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	4240      	negs	r0, r0
 800b2b8:	b01d      	add	sp, #116	@ 0x74
 800b2ba:	bc30      	pop	{r4, r5}
 800b2bc:	bc08      	pop	{r3}
 800b2be:	b002      	add	sp, #8
 800b2c0:	4718      	bx	r3
 800b2c2:	2382      	movs	r3, #130	@ 0x82
 800b2c4:	466a      	mov	r2, sp
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	8293      	strh	r3, [r2, #20]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9002      	str	r0, [sp, #8]
 800b2ce:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b2d0:	9006      	str	r0, [sp, #24]
 800b2d2:	4299      	cmp	r1, r3
 800b2d4:	d000      	beq.n	800b2d8 <sniprintf+0x38>
 800b2d6:	1e4b      	subs	r3, r1, #1
 800b2d8:	9304      	str	r3, [sp, #16]
 800b2da:	9307      	str	r3, [sp, #28]
 800b2dc:	2301      	movs	r3, #1
 800b2de:	466a      	mov	r2, sp
 800b2e0:	425b      	negs	r3, r3
 800b2e2:	82d3      	strh	r3, [r2, #22]
 800b2e4:	0028      	movs	r0, r5
 800b2e6:	ab21      	add	r3, sp, #132	@ 0x84
 800b2e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b2ea:	a902      	add	r1, sp, #8
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	f001 fc6b 	bl	800cbc8 <_svfiprintf_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	da01      	bge.n	800b2fa <sniprintf+0x5a>
 800b2f6:	238b      	movs	r3, #139	@ 0x8b
 800b2f8:	602b      	str	r3, [r5, #0]
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	d0dc      	beq.n	800b2b8 <sniprintf+0x18>
 800b2fe:	2200      	movs	r2, #0
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	e7d8      	b.n	800b2b8 <sniprintf+0x18>
 800b306:	46c0      	nop			@ (mov r8, r8)
 800b308:	20000018 	.word	0x20000018

0800b30c <__sread>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	000c      	movs	r4, r1
 800b310:	250e      	movs	r5, #14
 800b312:	5f49      	ldrsh	r1, [r1, r5]
 800b314:	f000 f878 	bl	800b408 <_read_r>
 800b318:	2800      	cmp	r0, #0
 800b31a:	db03      	blt.n	800b324 <__sread+0x18>
 800b31c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b31e:	181b      	adds	r3, r3, r0
 800b320:	6563      	str	r3, [r4, #84]	@ 0x54
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	4a02      	ldr	r2, [pc, #8]	@ (800b330 <__sread+0x24>)
 800b328:	4013      	ands	r3, r2
 800b32a:	81a3      	strh	r3, [r4, #12]
 800b32c:	e7f9      	b.n	800b322 <__sread+0x16>
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	ffffefff 	.word	0xffffefff

0800b334 <__swrite>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	001f      	movs	r7, r3
 800b338:	898b      	ldrh	r3, [r1, #12]
 800b33a:	0005      	movs	r5, r0
 800b33c:	000c      	movs	r4, r1
 800b33e:	0016      	movs	r6, r2
 800b340:	05db      	lsls	r3, r3, #23
 800b342:	d505      	bpl.n	800b350 <__swrite+0x1c>
 800b344:	230e      	movs	r3, #14
 800b346:	5ec9      	ldrsh	r1, [r1, r3]
 800b348:	2200      	movs	r2, #0
 800b34a:	2302      	movs	r3, #2
 800b34c:	f000 f848 	bl	800b3e0 <_lseek_r>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	4a05      	ldr	r2, [pc, #20]	@ (800b368 <__swrite+0x34>)
 800b354:	0028      	movs	r0, r5
 800b356:	4013      	ands	r3, r2
 800b358:	81a3      	strh	r3, [r4, #12]
 800b35a:	0032      	movs	r2, r6
 800b35c:	230e      	movs	r3, #14
 800b35e:	5ee1      	ldrsh	r1, [r4, r3]
 800b360:	003b      	movs	r3, r7
 800b362:	f000 f865 	bl	800b430 <_write_r>
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b368:	ffffefff 	.word	0xffffefff

0800b36c <__sseek>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	000c      	movs	r4, r1
 800b370:	250e      	movs	r5, #14
 800b372:	5f49      	ldrsh	r1, [r1, r5]
 800b374:	f000 f834 	bl	800b3e0 <_lseek_r>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	1c42      	adds	r2, r0, #1
 800b37c:	d103      	bne.n	800b386 <__sseek+0x1a>
 800b37e:	4a05      	ldr	r2, [pc, #20]	@ (800b394 <__sseek+0x28>)
 800b380:	4013      	ands	r3, r2
 800b382:	81a3      	strh	r3, [r4, #12]
 800b384:	bd70      	pop	{r4, r5, r6, pc}
 800b386:	2280      	movs	r2, #128	@ 0x80
 800b388:	0152      	lsls	r2, r2, #5
 800b38a:	4313      	orrs	r3, r2
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b390:	e7f8      	b.n	800b384 <__sseek+0x18>
 800b392:	46c0      	nop			@ (mov r8, r8)
 800b394:	ffffefff 	.word	0xffffefff

0800b398 <__sclose>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	230e      	movs	r3, #14
 800b39c:	5ec9      	ldrsh	r1, [r1, r3]
 800b39e:	f000 f80d 	bl	800b3bc <_close_r>
 800b3a2:	bd10      	pop	{r4, pc}

0800b3a4 <memset>:
 800b3a4:	0003      	movs	r3, r0
 800b3a6:	1882      	adds	r2, r0, r2
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d100      	bne.n	800b3ae <memset+0xa>
 800b3ac:	4770      	bx	lr
 800b3ae:	7019      	strb	r1, [r3, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	e7f9      	b.n	800b3a8 <memset+0x4>

0800b3b4 <_localeconv_r>:
 800b3b4:	4800      	ldr	r0, [pc, #0]	@ (800b3b8 <_localeconv_r+0x4>)
 800b3b6:	4770      	bx	lr
 800b3b8:	20000158 	.word	0x20000158

0800b3bc <_close_r>:
 800b3bc:	2300      	movs	r3, #0
 800b3be:	b570      	push	{r4, r5, r6, lr}
 800b3c0:	4d06      	ldr	r5, [pc, #24]	@ (800b3dc <_close_r+0x20>)
 800b3c2:	0004      	movs	r4, r0
 800b3c4:	0008      	movs	r0, r1
 800b3c6:	602b      	str	r3, [r5, #0]
 800b3c8:	f7f9 fbb6 	bl	8004b38 <_close>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d103      	bne.n	800b3d8 <_close_r+0x1c>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d000      	beq.n	800b3d8 <_close_r+0x1c>
 800b3d6:	6023      	str	r3, [r4, #0]
 800b3d8:	bd70      	pop	{r4, r5, r6, pc}
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	20000590 	.word	0x20000590

0800b3e0 <_lseek_r>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	0004      	movs	r4, r0
 800b3e4:	0008      	movs	r0, r1
 800b3e6:	0011      	movs	r1, r2
 800b3e8:	001a      	movs	r2, r3
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4d05      	ldr	r5, [pc, #20]	@ (800b404 <_lseek_r+0x24>)
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	f7f9 fbc3 	bl	8004b7a <_lseek>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d103      	bne.n	800b400 <_lseek_r+0x20>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d000      	beq.n	800b400 <_lseek_r+0x20>
 800b3fe:	6023      	str	r3, [r4, #0]
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	46c0      	nop			@ (mov r8, r8)
 800b404:	20000590 	.word	0x20000590

0800b408 <_read_r>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	0004      	movs	r4, r0
 800b40c:	0008      	movs	r0, r1
 800b40e:	0011      	movs	r1, r2
 800b410:	001a      	movs	r2, r3
 800b412:	2300      	movs	r3, #0
 800b414:	4d05      	ldr	r5, [pc, #20]	@ (800b42c <_read_r+0x24>)
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7f9 fb55 	bl	8004ac6 <_read>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d103      	bne.n	800b428 <_read_r+0x20>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d000      	beq.n	800b428 <_read_r+0x20>
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	46c0      	nop			@ (mov r8, r8)
 800b42c:	20000590 	.word	0x20000590

0800b430 <_write_r>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	0004      	movs	r4, r0
 800b434:	0008      	movs	r0, r1
 800b436:	0011      	movs	r1, r2
 800b438:	001a      	movs	r2, r3
 800b43a:	2300      	movs	r3, #0
 800b43c:	4d05      	ldr	r5, [pc, #20]	@ (800b454 <_write_r+0x24>)
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f9 fb5e 	bl	8004b00 <_write>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d103      	bne.n	800b450 <_write_r+0x20>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d000      	beq.n	800b450 <_write_r+0x20>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd70      	pop	{r4, r5, r6, pc}
 800b452:	46c0      	nop			@ (mov r8, r8)
 800b454:	20000590 	.word	0x20000590

0800b458 <__errno>:
 800b458:	4b01      	ldr	r3, [pc, #4]	@ (800b460 <__errno+0x8>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	4770      	bx	lr
 800b45e:	46c0      	nop			@ (mov r8, r8)
 800b460:	20000018 	.word	0x20000018

0800b464 <__libc_init_array>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	2600      	movs	r6, #0
 800b468:	4c0c      	ldr	r4, [pc, #48]	@ (800b49c <__libc_init_array+0x38>)
 800b46a:	4d0d      	ldr	r5, [pc, #52]	@ (800b4a0 <__libc_init_array+0x3c>)
 800b46c:	1b64      	subs	r4, r4, r5
 800b46e:	10a4      	asrs	r4, r4, #2
 800b470:	42a6      	cmp	r6, r4
 800b472:	d109      	bne.n	800b488 <__libc_init_array+0x24>
 800b474:	2600      	movs	r6, #0
 800b476:	f002 ff8d 	bl	800e394 <_init>
 800b47a:	4c0a      	ldr	r4, [pc, #40]	@ (800b4a4 <__libc_init_array+0x40>)
 800b47c:	4d0a      	ldr	r5, [pc, #40]	@ (800b4a8 <__libc_init_array+0x44>)
 800b47e:	1b64      	subs	r4, r4, r5
 800b480:	10a4      	asrs	r4, r4, #2
 800b482:	42a6      	cmp	r6, r4
 800b484:	d105      	bne.n	800b492 <__libc_init_array+0x2e>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	00b3      	lsls	r3, r6, #2
 800b48a:	58eb      	ldr	r3, [r5, r3]
 800b48c:	4798      	blx	r3
 800b48e:	3601      	adds	r6, #1
 800b490:	e7ee      	b.n	800b470 <__libc_init_array+0xc>
 800b492:	00b3      	lsls	r3, r6, #2
 800b494:	58eb      	ldr	r3, [r5, r3]
 800b496:	4798      	blx	r3
 800b498:	3601      	adds	r6, #1
 800b49a:	e7f2      	b.n	800b482 <__libc_init_array+0x1e>
 800b49c:	0800ecc4 	.word	0x0800ecc4
 800b4a0:	0800ecc4 	.word	0x0800ecc4
 800b4a4:	0800ecc8 	.word	0x0800ecc8
 800b4a8:	0800ecc4 	.word	0x0800ecc4

0800b4ac <__retarget_lock_init_recursive>:
 800b4ac:	4770      	bx	lr

0800b4ae <__retarget_lock_acquire_recursive>:
 800b4ae:	4770      	bx	lr

0800b4b0 <__retarget_lock_release_recursive>:
 800b4b0:	4770      	bx	lr

0800b4b2 <memchr>:
 800b4b2:	b2c9      	uxtb	r1, r1
 800b4b4:	1882      	adds	r2, r0, r2
 800b4b6:	4290      	cmp	r0, r2
 800b4b8:	d101      	bne.n	800b4be <memchr+0xc>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	4770      	bx	lr
 800b4be:	7803      	ldrb	r3, [r0, #0]
 800b4c0:	428b      	cmp	r3, r1
 800b4c2:	d0fb      	beq.n	800b4bc <memchr+0xa>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	e7f6      	b.n	800b4b6 <memchr+0x4>

0800b4c8 <memcpy>:
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d100      	bne.n	800b4d2 <memcpy+0xa>
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	5ccc      	ldrb	r4, [r1, r3]
 800b4d4:	54c4      	strb	r4, [r0, r3]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	e7f8      	b.n	800b4cc <memcpy+0x4>

0800b4da <quorem>:
 800b4da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4dc:	6903      	ldr	r3, [r0, #16]
 800b4de:	690c      	ldr	r4, [r1, #16]
 800b4e0:	b089      	sub	sp, #36	@ 0x24
 800b4e2:	9003      	str	r0, [sp, #12]
 800b4e4:	9106      	str	r1, [sp, #24]
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	db63      	blt.n	800b5b4 <quorem+0xda>
 800b4ec:	000b      	movs	r3, r1
 800b4ee:	3c01      	subs	r4, #1
 800b4f0:	3314      	adds	r3, #20
 800b4f2:	00a5      	lsls	r5, r4, #2
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	195b      	adds	r3, r3, r5
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	3314      	adds	r3, #20
 800b4fe:	9301      	str	r3, [sp, #4]
 800b500:	195d      	adds	r5, r3, r5
 800b502:	9b05      	ldr	r3, [sp, #20]
 800b504:	682f      	ldr	r7, [r5, #0]
 800b506:	681e      	ldr	r6, [r3, #0]
 800b508:	0038      	movs	r0, r7
 800b50a:	3601      	adds	r6, #1
 800b50c:	0031      	movs	r1, r6
 800b50e:	f7f4 fe15 	bl	800013c <__udivsi3>
 800b512:	9002      	str	r0, [sp, #8]
 800b514:	42b7      	cmp	r7, r6
 800b516:	d327      	bcc.n	800b568 <quorem+0x8e>
 800b518:	9b04      	ldr	r3, [sp, #16]
 800b51a:	2700      	movs	r7, #0
 800b51c:	469c      	mov	ip, r3
 800b51e:	9e01      	ldr	r6, [sp, #4]
 800b520:	9707      	str	r7, [sp, #28]
 800b522:	4662      	mov	r2, ip
 800b524:	ca08      	ldmia	r2!, {r3}
 800b526:	6830      	ldr	r0, [r6, #0]
 800b528:	4694      	mov	ip, r2
 800b52a:	9a02      	ldr	r2, [sp, #8]
 800b52c:	b299      	uxth	r1, r3
 800b52e:	4351      	muls	r1, r2
 800b530:	0c1b      	lsrs	r3, r3, #16
 800b532:	4353      	muls	r3, r2
 800b534:	19c9      	adds	r1, r1, r7
 800b536:	0c0a      	lsrs	r2, r1, #16
 800b538:	189b      	adds	r3, r3, r2
 800b53a:	b289      	uxth	r1, r1
 800b53c:	b282      	uxth	r2, r0
 800b53e:	1a52      	subs	r2, r2, r1
 800b540:	9907      	ldr	r1, [sp, #28]
 800b542:	0c1f      	lsrs	r7, r3, #16
 800b544:	1852      	adds	r2, r2, r1
 800b546:	0c00      	lsrs	r0, r0, #16
 800b548:	b29b      	uxth	r3, r3
 800b54a:	1411      	asrs	r1, r2, #16
 800b54c:	1ac3      	subs	r3, r0, r3
 800b54e:	185b      	adds	r3, r3, r1
 800b550:	1419      	asrs	r1, r3, #16
 800b552:	b292      	uxth	r2, r2
 800b554:	041b      	lsls	r3, r3, #16
 800b556:	431a      	orrs	r2, r3
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	9107      	str	r1, [sp, #28]
 800b55c:	c604      	stmia	r6!, {r2}
 800b55e:	4563      	cmp	r3, ip
 800b560:	d2df      	bcs.n	800b522 <quorem+0x48>
 800b562:	682b      	ldr	r3, [r5, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d02b      	beq.n	800b5c0 <quorem+0xe6>
 800b568:	9906      	ldr	r1, [sp, #24]
 800b56a:	9803      	ldr	r0, [sp, #12]
 800b56c:	f001 f9b6 	bl	800c8dc <__mcmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	db1e      	blt.n	800b5b2 <quorem+0xd8>
 800b574:	2600      	movs	r6, #0
 800b576:	9d01      	ldr	r5, [sp, #4]
 800b578:	9904      	ldr	r1, [sp, #16]
 800b57a:	c901      	ldmia	r1!, {r0}
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b287      	uxth	r7, r0
 800b580:	b29a      	uxth	r2, r3
 800b582:	1bd2      	subs	r2, r2, r7
 800b584:	1992      	adds	r2, r2, r6
 800b586:	0c00      	lsrs	r0, r0, #16
 800b588:	0c1b      	lsrs	r3, r3, #16
 800b58a:	1a1b      	subs	r3, r3, r0
 800b58c:	1410      	asrs	r0, r2, #16
 800b58e:	181b      	adds	r3, r3, r0
 800b590:	141e      	asrs	r6, r3, #16
 800b592:	b292      	uxth	r2, r2
 800b594:	041b      	lsls	r3, r3, #16
 800b596:	431a      	orrs	r2, r3
 800b598:	9b05      	ldr	r3, [sp, #20]
 800b59a:	c504      	stmia	r5!, {r2}
 800b59c:	428b      	cmp	r3, r1
 800b59e:	d2ec      	bcs.n	800b57a <quorem+0xa0>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	00a3      	lsls	r3, r4, #2
 800b5a4:	18d3      	adds	r3, r2, r3
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d014      	beq.n	800b5d6 <quorem+0xfc>
 800b5ac:	9b02      	ldr	r3, [sp, #8]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	9302      	str	r3, [sp, #8]
 800b5b2:	9802      	ldr	r0, [sp, #8]
 800b5b4:	b009      	add	sp, #36	@ 0x24
 800b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d104      	bne.n	800b5c8 <quorem+0xee>
 800b5be:	3c01      	subs	r4, #1
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	3d04      	subs	r5, #4
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	d3f7      	bcc.n	800b5b8 <quorem+0xde>
 800b5c8:	9b03      	ldr	r3, [sp, #12]
 800b5ca:	611c      	str	r4, [r3, #16]
 800b5cc:	e7cc      	b.n	800b568 <quorem+0x8e>
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	d104      	bne.n	800b5de <quorem+0x104>
 800b5d4:	3c01      	subs	r4, #1
 800b5d6:	9a01      	ldr	r2, [sp, #4]
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d3f7      	bcc.n	800b5ce <quorem+0xf4>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	611c      	str	r4, [r3, #16]
 800b5e2:	e7e3      	b.n	800b5ac <quorem+0xd2>

0800b5e4 <_dtoa_r>:
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	0014      	movs	r4, r2
 800b5e8:	001d      	movs	r5, r3
 800b5ea:	69c6      	ldr	r6, [r0, #28]
 800b5ec:	b09d      	sub	sp, #116	@ 0x74
 800b5ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800b5f0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b5f2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b5f4:	9003      	str	r0, [sp, #12]
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	d10f      	bne.n	800b61a <_dtoa_r+0x36>
 800b5fa:	2010      	movs	r0, #16
 800b5fc:	f000 fe2c 	bl	800c258 <malloc>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	1e02      	subs	r2, r0, #0
 800b604:	61d8      	str	r0, [r3, #28]
 800b606:	d104      	bne.n	800b612 <_dtoa_r+0x2e>
 800b608:	21ef      	movs	r1, #239	@ 0xef
 800b60a:	4bc7      	ldr	r3, [pc, #796]	@ (800b928 <_dtoa_r+0x344>)
 800b60c:	48c7      	ldr	r0, [pc, #796]	@ (800b92c <_dtoa_r+0x348>)
 800b60e:	f001 fcaf 	bl	800cf70 <__assert_func>
 800b612:	6046      	str	r6, [r0, #4]
 800b614:	6086      	str	r6, [r0, #8]
 800b616:	6006      	str	r6, [r0, #0]
 800b618:	60c6      	str	r6, [r0, #12]
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	6819      	ldr	r1, [r3, #0]
 800b620:	2900      	cmp	r1, #0
 800b622:	d00b      	beq.n	800b63c <_dtoa_r+0x58>
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	2301      	movs	r3, #1
 800b628:	4093      	lsls	r3, r2
 800b62a:	604a      	str	r2, [r1, #4]
 800b62c:	608b      	str	r3, [r1, #8]
 800b62e:	9803      	ldr	r0, [sp, #12]
 800b630:	f000 ff12 	bl	800c458 <_Bfree>
 800b634:	2200      	movs	r2, #0
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	da1e      	bge.n	800b67e <_dtoa_r+0x9a>
 800b640:	2301      	movs	r3, #1
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	006b      	lsls	r3, r5, #1
 800b646:	085b      	lsrs	r3, r3, #1
 800b648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b64a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b64c:	4bb8      	ldr	r3, [pc, #736]	@ (800b930 <_dtoa_r+0x34c>)
 800b64e:	4ab8      	ldr	r2, [pc, #736]	@ (800b930 <_dtoa_r+0x34c>)
 800b650:	403b      	ands	r3, r7
 800b652:	4293      	cmp	r3, r2
 800b654:	d116      	bne.n	800b684 <_dtoa_r+0xa0>
 800b656:	4bb7      	ldr	r3, [pc, #732]	@ (800b934 <_dtoa_r+0x350>)
 800b658:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	033b      	lsls	r3, r7, #12
 800b65e:	0b1b      	lsrs	r3, r3, #12
 800b660:	4323      	orrs	r3, r4
 800b662:	d101      	bne.n	800b668 <_dtoa_r+0x84>
 800b664:	f000 fd80 	bl	800c168 <_dtoa_r+0xb84>
 800b668:	4bb3      	ldr	r3, [pc, #716]	@ (800b938 <_dtoa_r+0x354>)
 800b66a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	2a00      	cmp	r2, #0
 800b670:	d002      	beq.n	800b678 <_dtoa_r+0x94>
 800b672:	4bb2      	ldr	r3, [pc, #712]	@ (800b93c <_dtoa_r+0x358>)
 800b674:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	9808      	ldr	r0, [sp, #32]
 800b67a:	b01d      	add	sp, #116	@ 0x74
 800b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b67e:	2300      	movs	r3, #0
 800b680:	603b      	str	r3, [r7, #0]
 800b682:	e7e2      	b.n	800b64a <_dtoa_r+0x66>
 800b684:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b688:	9212      	str	r2, [sp, #72]	@ 0x48
 800b68a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b68c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b68e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b690:	2200      	movs	r2, #0
 800b692:	2300      	movs	r3, #0
 800b694:	f7f4 fed8 	bl	8000448 <__aeabi_dcmpeq>
 800b698:	1e06      	subs	r6, r0, #0
 800b69a:	d00b      	beq.n	800b6b4 <_dtoa_r+0xd0>
 800b69c:	2301      	movs	r3, #1
 800b69e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b6a0:	6013      	str	r3, [r2, #0]
 800b6a2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <_dtoa_r+0xca>
 800b6a8:	4ba5      	ldr	r3, [pc, #660]	@ (800b940 <_dtoa_r+0x35c>)
 800b6aa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	4ba5      	ldr	r3, [pc, #660]	@ (800b944 <_dtoa_r+0x360>)
 800b6b0:	9308      	str	r3, [sp, #32]
 800b6b2:	e7e1      	b.n	800b678 <_dtoa_r+0x94>
 800b6b4:	ab1a      	add	r3, sp, #104	@ 0x68
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	9803      	ldr	r0, [sp, #12]
 800b6be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b6c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6c2:	f001 f9c1 	bl	800ca48 <__d2b>
 800b6c6:	007a      	lsls	r2, r7, #1
 800b6c8:	9005      	str	r0, [sp, #20]
 800b6ca:	0d52      	lsrs	r2, r2, #21
 800b6cc:	d100      	bne.n	800b6d0 <_dtoa_r+0xec>
 800b6ce:	e07b      	b.n	800b7c8 <_dtoa_r+0x1e4>
 800b6d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6d2:	9618      	str	r6, [sp, #96]	@ 0x60
 800b6d4:	0319      	lsls	r1, r3, #12
 800b6d6:	4b9c      	ldr	r3, [pc, #624]	@ (800b948 <_dtoa_r+0x364>)
 800b6d8:	0b09      	lsrs	r1, r1, #12
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	499b      	ldr	r1, [pc, #620]	@ (800b94c <_dtoa_r+0x368>)
 800b6de:	1857      	adds	r7, r2, r1
 800b6e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b6e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b6e4:	0019      	movs	r1, r3
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4b99      	ldr	r3, [pc, #612]	@ (800b950 <_dtoa_r+0x36c>)
 800b6ea:	f7f7 fb49 	bl	8002d80 <__aeabi_dsub>
 800b6ee:	4a99      	ldr	r2, [pc, #612]	@ (800b954 <_dtoa_r+0x370>)
 800b6f0:	4b99      	ldr	r3, [pc, #612]	@ (800b958 <_dtoa_r+0x374>)
 800b6f2:	f7f7 f85f 	bl	80027b4 <__aeabi_dmul>
 800b6f6:	4a99      	ldr	r2, [pc, #612]	@ (800b95c <_dtoa_r+0x378>)
 800b6f8:	4b99      	ldr	r3, [pc, #612]	@ (800b960 <_dtoa_r+0x37c>)
 800b6fa:	f7f6 f85b 	bl	80017b4 <__aeabi_dadd>
 800b6fe:	0004      	movs	r4, r0
 800b700:	0038      	movs	r0, r7
 800b702:	000d      	movs	r5, r1
 800b704:	f7f7 ffa4 	bl	8003650 <__aeabi_i2d>
 800b708:	4a96      	ldr	r2, [pc, #600]	@ (800b964 <_dtoa_r+0x380>)
 800b70a:	4b97      	ldr	r3, [pc, #604]	@ (800b968 <_dtoa_r+0x384>)
 800b70c:	f7f7 f852 	bl	80027b4 <__aeabi_dmul>
 800b710:	0002      	movs	r2, r0
 800b712:	000b      	movs	r3, r1
 800b714:	0020      	movs	r0, r4
 800b716:	0029      	movs	r1, r5
 800b718:	f7f6 f84c 	bl	80017b4 <__aeabi_dadd>
 800b71c:	0004      	movs	r4, r0
 800b71e:	000d      	movs	r5, r1
 800b720:	f7f7 ff5a 	bl	80035d8 <__aeabi_d2iz>
 800b724:	2200      	movs	r2, #0
 800b726:	9004      	str	r0, [sp, #16]
 800b728:	2300      	movs	r3, #0
 800b72a:	0020      	movs	r0, r4
 800b72c:	0029      	movs	r1, r5
 800b72e:	f7f4 fe91 	bl	8000454 <__aeabi_dcmplt>
 800b732:	2800      	cmp	r0, #0
 800b734:	d00b      	beq.n	800b74e <_dtoa_r+0x16a>
 800b736:	9804      	ldr	r0, [sp, #16]
 800b738:	f7f7 ff8a 	bl	8003650 <__aeabi_i2d>
 800b73c:	002b      	movs	r3, r5
 800b73e:	0022      	movs	r2, r4
 800b740:	f7f4 fe82 	bl	8000448 <__aeabi_dcmpeq>
 800b744:	4243      	negs	r3, r0
 800b746:	4158      	adcs	r0, r3
 800b748:	9b04      	ldr	r3, [sp, #16]
 800b74a:	1a1b      	subs	r3, r3, r0
 800b74c:	9304      	str	r3, [sp, #16]
 800b74e:	2301      	movs	r3, #1
 800b750:	9315      	str	r3, [sp, #84]	@ 0x54
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	2b16      	cmp	r3, #22
 800b756:	d810      	bhi.n	800b77a <_dtoa_r+0x196>
 800b758:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b75a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b75c:	9a04      	ldr	r2, [sp, #16]
 800b75e:	4b83      	ldr	r3, [pc, #524]	@ (800b96c <_dtoa_r+0x388>)
 800b760:	00d2      	lsls	r2, r2, #3
 800b762:	189b      	adds	r3, r3, r2
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	f7f4 fe74 	bl	8000454 <__aeabi_dcmplt>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d047      	beq.n	800b800 <_dtoa_r+0x21c>
 800b770:	9b04      	ldr	r3, [sp, #16]
 800b772:	3b01      	subs	r3, #1
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	2300      	movs	r3, #0
 800b778:	9315      	str	r3, [sp, #84]	@ 0x54
 800b77a:	2200      	movs	r2, #0
 800b77c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b77e:	9206      	str	r2, [sp, #24]
 800b780:	1bdb      	subs	r3, r3, r7
 800b782:	1e5a      	subs	r2, r3, #1
 800b784:	d53e      	bpl.n	800b804 <_dtoa_r+0x220>
 800b786:	2201      	movs	r2, #1
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	9306      	str	r3, [sp, #24]
 800b78c:	2300      	movs	r3, #0
 800b78e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b790:	9b04      	ldr	r3, [sp, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	db38      	blt.n	800b808 <_dtoa_r+0x224>
 800b796:	9a04      	ldr	r2, [sp, #16]
 800b798:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b79a:	4694      	mov	ip, r2
 800b79c:	4463      	add	r3, ip
 800b79e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9214      	str	r2, [sp, #80]	@ 0x50
 800b7a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b7a8:	2401      	movs	r4, #1
 800b7aa:	2b09      	cmp	r3, #9
 800b7ac:	d862      	bhi.n	800b874 <_dtoa_r+0x290>
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	dd02      	ble.n	800b7b8 <_dtoa_r+0x1d4>
 800b7b2:	2400      	movs	r4, #0
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	9322      	str	r3, [sp, #136]	@ 0x88
 800b7b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b7ba:	1e98      	subs	r0, r3, #2
 800b7bc:	2803      	cmp	r0, #3
 800b7be:	d863      	bhi.n	800b888 <_dtoa_r+0x2a4>
 800b7c0:	f7f4 fca8 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b7c4:	2b385654 	.word	0x2b385654
 800b7c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b7ca:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b7cc:	18f6      	adds	r6, r6, r3
 800b7ce:	4b68      	ldr	r3, [pc, #416]	@ (800b970 <_dtoa_r+0x38c>)
 800b7d0:	18f2      	adds	r2, r6, r3
 800b7d2:	2a20      	cmp	r2, #32
 800b7d4:	dd0f      	ble.n	800b7f6 <_dtoa_r+0x212>
 800b7d6:	2340      	movs	r3, #64	@ 0x40
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	409f      	lsls	r7, r3
 800b7dc:	4b65      	ldr	r3, [pc, #404]	@ (800b974 <_dtoa_r+0x390>)
 800b7de:	0038      	movs	r0, r7
 800b7e0:	18f3      	adds	r3, r6, r3
 800b7e2:	40dc      	lsrs	r4, r3
 800b7e4:	4320      	orrs	r0, r4
 800b7e6:	f7f7 ff61 	bl	80036ac <__aeabi_ui2d>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4b62      	ldr	r3, [pc, #392]	@ (800b978 <_dtoa_r+0x394>)
 800b7ee:	1e77      	subs	r7, r6, #1
 800b7f0:	18cb      	adds	r3, r1, r3
 800b7f2:	9218      	str	r2, [sp, #96]	@ 0x60
 800b7f4:	e776      	b.n	800b6e4 <_dtoa_r+0x100>
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	0020      	movs	r0, r4
 800b7fa:	1a9b      	subs	r3, r3, r2
 800b7fc:	4098      	lsls	r0, r3
 800b7fe:	e7f2      	b.n	800b7e6 <_dtoa_r+0x202>
 800b800:	9015      	str	r0, [sp, #84]	@ 0x54
 800b802:	e7ba      	b.n	800b77a <_dtoa_r+0x196>
 800b804:	920d      	str	r2, [sp, #52]	@ 0x34
 800b806:	e7c3      	b.n	800b790 <_dtoa_r+0x1ac>
 800b808:	9b06      	ldr	r3, [sp, #24]
 800b80a:	9a04      	ldr	r2, [sp, #16]
 800b80c:	1a9b      	subs	r3, r3, r2
 800b80e:	9306      	str	r3, [sp, #24]
 800b810:	4253      	negs	r3, r2
 800b812:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b814:	2300      	movs	r3, #0
 800b816:	9314      	str	r3, [sp, #80]	@ 0x50
 800b818:	e7c5      	b.n	800b7a6 <_dtoa_r+0x1c2>
 800b81a:	2301      	movs	r3, #1
 800b81c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b81e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b820:	4694      	mov	ip, r2
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	4463      	add	r3, ip
 800b826:	930e      	str	r3, [sp, #56]	@ 0x38
 800b828:	3301      	adds	r3, #1
 800b82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dc08      	bgt.n	800b842 <_dtoa_r+0x25e>
 800b830:	2301      	movs	r3, #1
 800b832:	e006      	b.n	800b842 <_dtoa_r+0x25e>
 800b834:	2301      	movs	r3, #1
 800b836:	9310      	str	r3, [sp, #64]	@ 0x40
 800b838:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dd28      	ble.n	800b890 <_dtoa_r+0x2ac>
 800b83e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b840:	9309      	str	r3, [sp, #36]	@ 0x24
 800b842:	9a03      	ldr	r2, [sp, #12]
 800b844:	2100      	movs	r1, #0
 800b846:	69d0      	ldr	r0, [r2, #28]
 800b848:	2204      	movs	r2, #4
 800b84a:	0015      	movs	r5, r2
 800b84c:	3514      	adds	r5, #20
 800b84e:	429d      	cmp	r5, r3
 800b850:	d923      	bls.n	800b89a <_dtoa_r+0x2b6>
 800b852:	6041      	str	r1, [r0, #4]
 800b854:	9803      	ldr	r0, [sp, #12]
 800b856:	f000 fdbb 	bl	800c3d0 <_Balloc>
 800b85a:	9008      	str	r0, [sp, #32]
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d11f      	bne.n	800b8a0 <_dtoa_r+0x2bc>
 800b860:	21b0      	movs	r1, #176	@ 0xb0
 800b862:	4b46      	ldr	r3, [pc, #280]	@ (800b97c <_dtoa_r+0x398>)
 800b864:	4831      	ldr	r0, [pc, #196]	@ (800b92c <_dtoa_r+0x348>)
 800b866:	9a08      	ldr	r2, [sp, #32]
 800b868:	31ff      	adds	r1, #255	@ 0xff
 800b86a:	e6d0      	b.n	800b60e <_dtoa_r+0x2a>
 800b86c:	2300      	movs	r3, #0
 800b86e:	e7e2      	b.n	800b836 <_dtoa_r+0x252>
 800b870:	2300      	movs	r3, #0
 800b872:	e7d3      	b.n	800b81c <_dtoa_r+0x238>
 800b874:	2300      	movs	r3, #0
 800b876:	9410      	str	r4, [sp, #64]	@ 0x40
 800b878:	9322      	str	r3, [sp, #136]	@ 0x88
 800b87a:	3b01      	subs	r3, #1
 800b87c:	2200      	movs	r2, #0
 800b87e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b880:	9309      	str	r3, [sp, #36]	@ 0x24
 800b882:	3313      	adds	r3, #19
 800b884:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b886:	e7dc      	b.n	800b842 <_dtoa_r+0x25e>
 800b888:	2301      	movs	r3, #1
 800b88a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b88c:	3b02      	subs	r3, #2
 800b88e:	e7f5      	b.n	800b87c <_dtoa_r+0x298>
 800b890:	2301      	movs	r3, #1
 800b892:	001a      	movs	r2, r3
 800b894:	930e      	str	r3, [sp, #56]	@ 0x38
 800b896:	9309      	str	r3, [sp, #36]	@ 0x24
 800b898:	e7f4      	b.n	800b884 <_dtoa_r+0x2a0>
 800b89a:	3101      	adds	r1, #1
 800b89c:	0052      	lsls	r2, r2, #1
 800b89e:	e7d4      	b.n	800b84a <_dtoa_r+0x266>
 800b8a0:	9b03      	ldr	r3, [sp, #12]
 800b8a2:	9a08      	ldr	r2, [sp, #32]
 800b8a4:	69db      	ldr	r3, [r3, #28]
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8aa:	2b0e      	cmp	r3, #14
 800b8ac:	d900      	bls.n	800b8b0 <_dtoa_r+0x2cc>
 800b8ae:	e0d6      	b.n	800ba5e <_dtoa_r+0x47a>
 800b8b0:	2c00      	cmp	r4, #0
 800b8b2:	d100      	bne.n	800b8b6 <_dtoa_r+0x2d2>
 800b8b4:	e0d3      	b.n	800ba5e <_dtoa_r+0x47a>
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd63      	ble.n	800b984 <_dtoa_r+0x3a0>
 800b8bc:	210f      	movs	r1, #15
 800b8be:	9a04      	ldr	r2, [sp, #16]
 800b8c0:	4b2a      	ldr	r3, [pc, #168]	@ (800b96c <_dtoa_r+0x388>)
 800b8c2:	400a      	ands	r2, r1
 800b8c4:	00d2      	lsls	r2, r2, #3
 800b8c6:	189b      	adds	r3, r3, r2
 800b8c8:	681e      	ldr	r6, [r3, #0]
 800b8ca:	685f      	ldr	r7, [r3, #4]
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	2402      	movs	r4, #2
 800b8d0:	111d      	asrs	r5, r3, #4
 800b8d2:	05db      	lsls	r3, r3, #23
 800b8d4:	d50a      	bpl.n	800b8ec <_dtoa_r+0x308>
 800b8d6:	4b2a      	ldr	r3, [pc, #168]	@ (800b980 <_dtoa_r+0x39c>)
 800b8d8:	400d      	ands	r5, r1
 800b8da:	6a1a      	ldr	r2, [r3, #32]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8de:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b8e0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b8e2:	f7f6 fb2d 	bl	8001f40 <__aeabi_ddiv>
 800b8e6:	900a      	str	r0, [sp, #40]	@ 0x28
 800b8e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8ea:	3401      	adds	r4, #1
 800b8ec:	4b24      	ldr	r3, [pc, #144]	@ (800b980 <_dtoa_r+0x39c>)
 800b8ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8f0:	2d00      	cmp	r5, #0
 800b8f2:	d108      	bne.n	800b906 <_dtoa_r+0x322>
 800b8f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8f8:	0032      	movs	r2, r6
 800b8fa:	003b      	movs	r3, r7
 800b8fc:	f7f6 fb20 	bl	8001f40 <__aeabi_ddiv>
 800b900:	900a      	str	r0, [sp, #40]	@ 0x28
 800b902:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b904:	e059      	b.n	800b9ba <_dtoa_r+0x3d6>
 800b906:	2301      	movs	r3, #1
 800b908:	421d      	tst	r5, r3
 800b90a:	d009      	beq.n	800b920 <_dtoa_r+0x33c>
 800b90c:	18e4      	adds	r4, r4, r3
 800b90e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b910:	0030      	movs	r0, r6
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	0039      	movs	r1, r7
 800b918:	f7f6 ff4c 	bl	80027b4 <__aeabi_dmul>
 800b91c:	0006      	movs	r6, r0
 800b91e:	000f      	movs	r7, r1
 800b920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b922:	106d      	asrs	r5, r5, #1
 800b924:	3308      	adds	r3, #8
 800b926:	e7e2      	b.n	800b8ee <_dtoa_r+0x30a>
 800b928:	0800e5b1 	.word	0x0800e5b1
 800b92c:	0800e5c8 	.word	0x0800e5c8
 800b930:	7ff00000 	.word	0x7ff00000
 800b934:	0000270f 	.word	0x0000270f
 800b938:	0800e5ad 	.word	0x0800e5ad
 800b93c:	0800e5b0 	.word	0x0800e5b0
 800b940:	0800e581 	.word	0x0800e581
 800b944:	0800e580 	.word	0x0800e580
 800b948:	3ff00000 	.word	0x3ff00000
 800b94c:	fffffc01 	.word	0xfffffc01
 800b950:	3ff80000 	.word	0x3ff80000
 800b954:	636f4361 	.word	0x636f4361
 800b958:	3fd287a7 	.word	0x3fd287a7
 800b95c:	8b60c8b3 	.word	0x8b60c8b3
 800b960:	3fc68a28 	.word	0x3fc68a28
 800b964:	509f79fb 	.word	0x509f79fb
 800b968:	3fd34413 	.word	0x3fd34413
 800b96c:	0800e718 	.word	0x0800e718
 800b970:	00000432 	.word	0x00000432
 800b974:	00000412 	.word	0x00000412
 800b978:	fe100000 	.word	0xfe100000
 800b97c:	0800e620 	.word	0x0800e620
 800b980:	0800e6f0 	.word	0x0800e6f0
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	2402      	movs	r4, #2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d016      	beq.n	800b9ba <_dtoa_r+0x3d6>
 800b98c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b98e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b990:	220f      	movs	r2, #15
 800b992:	425d      	negs	r5, r3
 800b994:	402a      	ands	r2, r5
 800b996:	4bd5      	ldr	r3, [pc, #852]	@ (800bcec <_dtoa_r+0x708>)
 800b998:	00d2      	lsls	r2, r2, #3
 800b99a:	189b      	adds	r3, r3, r2
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	f7f6 ff08 	bl	80027b4 <__aeabi_dmul>
 800b9a4:	2701      	movs	r7, #1
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9ac:	4ed0      	ldr	r6, [pc, #832]	@ (800bcf0 <_dtoa_r+0x70c>)
 800b9ae:	112d      	asrs	r5, r5, #4
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	d000      	beq.n	800b9b6 <_dtoa_r+0x3d2>
 800b9b4:	e095      	b.n	800bae2 <_dtoa_r+0x4fe>
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1a2      	bne.n	800b900 <_dtoa_r+0x31c>
 800b9ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b9bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b9be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d100      	bne.n	800b9c6 <_dtoa_r+0x3e2>
 800b9c4:	e098      	b.n	800baf8 <_dtoa_r+0x514>
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	0030      	movs	r0, r6
 800b9ca:	0039      	movs	r1, r7
 800b9cc:	4bc9      	ldr	r3, [pc, #804]	@ (800bcf4 <_dtoa_r+0x710>)
 800b9ce:	f7f4 fd41 	bl	8000454 <__aeabi_dcmplt>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d100      	bne.n	800b9d8 <_dtoa_r+0x3f4>
 800b9d6:	e08f      	b.n	800baf8 <_dtoa_r+0x514>
 800b9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d100      	bne.n	800b9e0 <_dtoa_r+0x3fc>
 800b9de:	e08b      	b.n	800baf8 <_dtoa_r+0x514>
 800b9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	dd37      	ble.n	800ba56 <_dtoa_r+0x472>
 800b9e6:	9b04      	ldr	r3, [sp, #16]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9ee:	0030      	movs	r0, r6
 800b9f0:	4bc1      	ldr	r3, [pc, #772]	@ (800bcf8 <_dtoa_r+0x714>)
 800b9f2:	0039      	movs	r1, r7
 800b9f4:	f7f6 fede 	bl	80027b4 <__aeabi_dmul>
 800b9f8:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9fe:	3401      	adds	r4, #1
 800ba00:	0020      	movs	r0, r4
 800ba02:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba04:	f7f7 fe24 	bl	8003650 <__aeabi_i2d>
 800ba08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba0c:	f7f6 fed2 	bl	80027b4 <__aeabi_dmul>
 800ba10:	4bba      	ldr	r3, [pc, #744]	@ (800bcfc <_dtoa_r+0x718>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	f7f5 fece 	bl	80017b4 <__aeabi_dadd>
 800ba18:	4bb9      	ldr	r3, [pc, #740]	@ (800bd00 <_dtoa_r+0x71c>)
 800ba1a:	0006      	movs	r6, r0
 800ba1c:	18cf      	adds	r7, r1, r3
 800ba1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d16d      	bne.n	800bb00 <_dtoa_r+0x51c>
 800ba24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4bb6      	ldr	r3, [pc, #728]	@ (800bd04 <_dtoa_r+0x720>)
 800ba2c:	f7f7 f9a8 	bl	8002d80 <__aeabi_dsub>
 800ba30:	0032      	movs	r2, r6
 800ba32:	003b      	movs	r3, r7
 800ba34:	0004      	movs	r4, r0
 800ba36:	000d      	movs	r5, r1
 800ba38:	f7f4 fd20 	bl	800047c <__aeabi_dcmpgt>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d000      	beq.n	800ba42 <_dtoa_r+0x45e>
 800ba40:	e2b6      	b.n	800bfb0 <_dtoa_r+0x9cc>
 800ba42:	2180      	movs	r1, #128	@ 0x80
 800ba44:	0609      	lsls	r1, r1, #24
 800ba46:	187b      	adds	r3, r7, r1
 800ba48:	0032      	movs	r2, r6
 800ba4a:	0020      	movs	r0, r4
 800ba4c:	0029      	movs	r1, r5
 800ba4e:	f7f4 fd01 	bl	8000454 <__aeabi_dcmplt>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d128      	bne.n	800baa8 <_dtoa_r+0x4c4>
 800ba56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ba5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba5c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba5e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	da00      	bge.n	800ba66 <_dtoa_r+0x482>
 800ba64:	e174      	b.n	800bd50 <_dtoa_r+0x76c>
 800ba66:	9a04      	ldr	r2, [sp, #16]
 800ba68:	2a0e      	cmp	r2, #14
 800ba6a:	dd00      	ble.n	800ba6e <_dtoa_r+0x48a>
 800ba6c:	e170      	b.n	800bd50 <_dtoa_r+0x76c>
 800ba6e:	4b9f      	ldr	r3, [pc, #636]	@ (800bcec <_dtoa_r+0x708>)
 800ba70:	00d2      	lsls	r2, r2, #3
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	685c      	ldr	r4, [r3, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	9306      	str	r3, [sp, #24]
 800ba7a:	9407      	str	r4, [sp, #28]
 800ba7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	db00      	blt.n	800ba84 <_dtoa_r+0x4a0>
 800ba82:	e0e7      	b.n	800bc54 <_dtoa_r+0x670>
 800ba84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dd00      	ble.n	800ba8c <_dtoa_r+0x4a8>
 800ba8a:	e0e3      	b.n	800bc54 <_dtoa_r+0x670>
 800ba8c:	d10c      	bne.n	800baa8 <_dtoa_r+0x4c4>
 800ba8e:	9806      	ldr	r0, [sp, #24]
 800ba90:	9907      	ldr	r1, [sp, #28]
 800ba92:	2200      	movs	r2, #0
 800ba94:	4b9b      	ldr	r3, [pc, #620]	@ (800bd04 <_dtoa_r+0x720>)
 800ba96:	f7f6 fe8d 	bl	80027b4 <__aeabi_dmul>
 800ba9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba9e:	f7f4 fcf7 	bl	8000490 <__aeabi_dcmpge>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d100      	bne.n	800baa8 <_dtoa_r+0x4c4>
 800baa6:	e286      	b.n	800bfb6 <_dtoa_r+0x9d2>
 800baa8:	2600      	movs	r6, #0
 800baaa:	0037      	movs	r7, r6
 800baac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baae:	9c08      	ldr	r4, [sp, #32]
 800bab0:	43db      	mvns	r3, r3
 800bab2:	930c      	str	r3, [sp, #48]	@ 0x30
 800bab4:	9704      	str	r7, [sp, #16]
 800bab6:	2700      	movs	r7, #0
 800bab8:	0031      	movs	r1, r6
 800baba:	9803      	ldr	r0, [sp, #12]
 800babc:	f000 fccc 	bl	800c458 <_Bfree>
 800bac0:	9b04      	ldr	r3, [sp, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d100      	bne.n	800bac8 <_dtoa_r+0x4e4>
 800bac6:	e0bb      	b.n	800bc40 <_dtoa_r+0x65c>
 800bac8:	2f00      	cmp	r7, #0
 800baca:	d005      	beq.n	800bad8 <_dtoa_r+0x4f4>
 800bacc:	429f      	cmp	r7, r3
 800bace:	d003      	beq.n	800bad8 <_dtoa_r+0x4f4>
 800bad0:	0039      	movs	r1, r7
 800bad2:	9803      	ldr	r0, [sp, #12]
 800bad4:	f000 fcc0 	bl	800c458 <_Bfree>
 800bad8:	9904      	ldr	r1, [sp, #16]
 800bada:	9803      	ldr	r0, [sp, #12]
 800badc:	f000 fcbc 	bl	800c458 <_Bfree>
 800bae0:	e0ae      	b.n	800bc40 <_dtoa_r+0x65c>
 800bae2:	423d      	tst	r5, r7
 800bae4:	d005      	beq.n	800baf2 <_dtoa_r+0x50e>
 800bae6:	6832      	ldr	r2, [r6, #0]
 800bae8:	6873      	ldr	r3, [r6, #4]
 800baea:	f7f6 fe63 	bl	80027b4 <__aeabi_dmul>
 800baee:	003b      	movs	r3, r7
 800baf0:	3401      	adds	r4, #1
 800baf2:	106d      	asrs	r5, r5, #1
 800baf4:	3608      	adds	r6, #8
 800baf6:	e75b      	b.n	800b9b0 <_dtoa_r+0x3cc>
 800baf8:	9b04      	ldr	r3, [sp, #16]
 800bafa:	930c      	str	r3, [sp, #48]	@ 0x30
 800bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafe:	e77f      	b.n	800ba00 <_dtoa_r+0x41c>
 800bb00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bb02:	4b7a      	ldr	r3, [pc, #488]	@ (800bcec <_dtoa_r+0x708>)
 800bb04:	3a01      	subs	r2, #1
 800bb06:	00d2      	lsls	r2, r2, #3
 800bb08:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bb0a:	189b      	adds	r3, r3, r2
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	2900      	cmp	r1, #0
 800bb12:	d04c      	beq.n	800bbae <_dtoa_r+0x5ca>
 800bb14:	2000      	movs	r0, #0
 800bb16:	497c      	ldr	r1, [pc, #496]	@ (800bd08 <_dtoa_r+0x724>)
 800bb18:	f7f6 fa12 	bl	8001f40 <__aeabi_ddiv>
 800bb1c:	0032      	movs	r2, r6
 800bb1e:	003b      	movs	r3, r7
 800bb20:	f7f7 f92e 	bl	8002d80 <__aeabi_dsub>
 800bb24:	9a08      	ldr	r2, [sp, #32]
 800bb26:	0006      	movs	r6, r0
 800bb28:	4694      	mov	ip, r2
 800bb2a:	000f      	movs	r7, r1
 800bb2c:	9b08      	ldr	r3, [sp, #32]
 800bb2e:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb32:	4463      	add	r3, ip
 800bb34:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb36:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb3a:	f7f7 fd4d 	bl	80035d8 <__aeabi_d2iz>
 800bb3e:	0005      	movs	r5, r0
 800bb40:	f7f7 fd86 	bl	8003650 <__aeabi_i2d>
 800bb44:	0002      	movs	r2, r0
 800bb46:	000b      	movs	r3, r1
 800bb48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb4c:	f7f7 f918 	bl	8002d80 <__aeabi_dsub>
 800bb50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb52:	3530      	adds	r5, #48	@ 0x30
 800bb54:	1c5c      	adds	r4, r3, #1
 800bb56:	701d      	strb	r5, [r3, #0]
 800bb58:	0032      	movs	r2, r6
 800bb5a:	003b      	movs	r3, r7
 800bb5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb60:	f7f4 fc78 	bl	8000454 <__aeabi_dcmplt>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d16b      	bne.n	800bc40 <_dtoa_r+0x65c>
 800bb68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	4961      	ldr	r1, [pc, #388]	@ (800bcf4 <_dtoa_r+0x710>)
 800bb70:	f7f7 f906 	bl	8002d80 <__aeabi_dsub>
 800bb74:	0032      	movs	r2, r6
 800bb76:	003b      	movs	r3, r7
 800bb78:	f7f4 fc6c 	bl	8000454 <__aeabi_dcmplt>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d000      	beq.n	800bb82 <_dtoa_r+0x59e>
 800bb80:	e0c6      	b.n	800bd10 <_dtoa_r+0x72c>
 800bb82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	d100      	bne.n	800bb8a <_dtoa_r+0x5a6>
 800bb88:	e765      	b.n	800ba56 <_dtoa_r+0x472>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	0030      	movs	r0, r6
 800bb8e:	0039      	movs	r1, r7
 800bb90:	4b59      	ldr	r3, [pc, #356]	@ (800bcf8 <_dtoa_r+0x714>)
 800bb92:	f7f6 fe0f 	bl	80027b4 <__aeabi_dmul>
 800bb96:	2200      	movs	r2, #0
 800bb98:	0006      	movs	r6, r0
 800bb9a:	000f      	movs	r7, r1
 800bb9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bba0:	4b55      	ldr	r3, [pc, #340]	@ (800bcf8 <_dtoa_r+0x714>)
 800bba2:	f7f6 fe07 	bl	80027b4 <__aeabi_dmul>
 800bba6:	9416      	str	r4, [sp, #88]	@ 0x58
 800bba8:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbaa:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbac:	e7c3      	b.n	800bb36 <_dtoa_r+0x552>
 800bbae:	0030      	movs	r0, r6
 800bbb0:	0039      	movs	r1, r7
 800bbb2:	f7f6 fdff 	bl	80027b4 <__aeabi_dmul>
 800bbb6:	9d08      	ldr	r5, [sp, #32]
 800bbb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bbba:	002b      	movs	r3, r5
 800bbbc:	4694      	mov	ip, r2
 800bbbe:	9016      	str	r0, [sp, #88]	@ 0x58
 800bbc0:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bbc2:	4463      	add	r3, ip
 800bbc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbc6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbca:	f7f7 fd05 	bl	80035d8 <__aeabi_d2iz>
 800bbce:	0004      	movs	r4, r0
 800bbd0:	f7f7 fd3e 	bl	8003650 <__aeabi_i2d>
 800bbd4:	000b      	movs	r3, r1
 800bbd6:	0002      	movs	r2, r0
 800bbd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbdc:	f7f7 f8d0 	bl	8002d80 <__aeabi_dsub>
 800bbe0:	3430      	adds	r4, #48	@ 0x30
 800bbe2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbe4:	702c      	strb	r4, [r5, #0]
 800bbe6:	3501      	adds	r5, #1
 800bbe8:	0006      	movs	r6, r0
 800bbea:	000f      	movs	r7, r1
 800bbec:	42ab      	cmp	r3, r5
 800bbee:	d12a      	bne.n	800bc46 <_dtoa_r+0x662>
 800bbf0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bbf2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bbf4:	9b08      	ldr	r3, [sp, #32]
 800bbf6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800bbf8:	469c      	mov	ip, r3
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4b42      	ldr	r3, [pc, #264]	@ (800bd08 <_dtoa_r+0x724>)
 800bbfe:	4464      	add	r4, ip
 800bc00:	f7f5 fdd8 	bl	80017b4 <__aeabi_dadd>
 800bc04:	0002      	movs	r2, r0
 800bc06:	000b      	movs	r3, r1
 800bc08:	0030      	movs	r0, r6
 800bc0a:	0039      	movs	r1, r7
 800bc0c:	f7f4 fc36 	bl	800047c <__aeabi_dcmpgt>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d000      	beq.n	800bc16 <_dtoa_r+0x632>
 800bc14:	e07c      	b.n	800bd10 <_dtoa_r+0x72c>
 800bc16:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	493a      	ldr	r1, [pc, #232]	@ (800bd08 <_dtoa_r+0x724>)
 800bc1e:	f7f7 f8af 	bl	8002d80 <__aeabi_dsub>
 800bc22:	0002      	movs	r2, r0
 800bc24:	000b      	movs	r3, r1
 800bc26:	0030      	movs	r0, r6
 800bc28:	0039      	movs	r1, r7
 800bc2a:	f7f4 fc13 	bl	8000454 <__aeabi_dcmplt>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d100      	bne.n	800bc34 <_dtoa_r+0x650>
 800bc32:	e710      	b.n	800ba56 <_dtoa_r+0x472>
 800bc34:	0023      	movs	r3, r4
 800bc36:	3c01      	subs	r4, #1
 800bc38:	7822      	ldrb	r2, [r4, #0]
 800bc3a:	2a30      	cmp	r2, #48	@ 0x30
 800bc3c:	d0fa      	beq.n	800bc34 <_dtoa_r+0x650>
 800bc3e:	001c      	movs	r4, r3
 800bc40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	e042      	b.n	800bccc <_dtoa_r+0x6e8>
 800bc46:	2200      	movs	r2, #0
 800bc48:	4b2b      	ldr	r3, [pc, #172]	@ (800bcf8 <_dtoa_r+0x714>)
 800bc4a:	f7f6 fdb3 	bl	80027b4 <__aeabi_dmul>
 800bc4e:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc50:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc52:	e7b8      	b.n	800bbc6 <_dtoa_r+0x5e2>
 800bc54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc56:	9d08      	ldr	r5, [sp, #32]
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	195b      	adds	r3, r3, r5
 800bc5c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bc5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bc60:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc62:	9a06      	ldr	r2, [sp, #24]
 800bc64:	9b07      	ldr	r3, [sp, #28]
 800bc66:	0030      	movs	r0, r6
 800bc68:	0039      	movs	r1, r7
 800bc6a:	f7f6 f969 	bl	8001f40 <__aeabi_ddiv>
 800bc6e:	f7f7 fcb3 	bl	80035d8 <__aeabi_d2iz>
 800bc72:	9009      	str	r0, [sp, #36]	@ 0x24
 800bc74:	f7f7 fcec 	bl	8003650 <__aeabi_i2d>
 800bc78:	9a06      	ldr	r2, [sp, #24]
 800bc7a:	9b07      	ldr	r3, [sp, #28]
 800bc7c:	f7f6 fd9a 	bl	80027b4 <__aeabi_dmul>
 800bc80:	0002      	movs	r2, r0
 800bc82:	000b      	movs	r3, r1
 800bc84:	0030      	movs	r0, r6
 800bc86:	0039      	movs	r1, r7
 800bc88:	f7f7 f87a 	bl	8002d80 <__aeabi_dsub>
 800bc8c:	002b      	movs	r3, r5
 800bc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc90:	3501      	adds	r5, #1
 800bc92:	3230      	adds	r2, #48	@ 0x30
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc98:	002c      	movs	r4, r5
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d14b      	bne.n	800bd36 <_dtoa_r+0x752>
 800bc9e:	0002      	movs	r2, r0
 800bca0:	000b      	movs	r3, r1
 800bca2:	f7f5 fd87 	bl	80017b4 <__aeabi_dadd>
 800bca6:	9a06      	ldr	r2, [sp, #24]
 800bca8:	9b07      	ldr	r3, [sp, #28]
 800bcaa:	0006      	movs	r6, r0
 800bcac:	000f      	movs	r7, r1
 800bcae:	f7f4 fbe5 	bl	800047c <__aeabi_dcmpgt>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d12a      	bne.n	800bd0c <_dtoa_r+0x728>
 800bcb6:	9a06      	ldr	r2, [sp, #24]
 800bcb8:	9b07      	ldr	r3, [sp, #28]
 800bcba:	0030      	movs	r0, r6
 800bcbc:	0039      	movs	r1, r7
 800bcbe:	f7f4 fbc3 	bl	8000448 <__aeabi_dcmpeq>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d002      	beq.n	800bccc <_dtoa_r+0x6e8>
 800bcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc8:	07dd      	lsls	r5, r3, #31
 800bcca:	d41f      	bmi.n	800bd0c <_dtoa_r+0x728>
 800bccc:	9905      	ldr	r1, [sp, #20]
 800bcce:	9803      	ldr	r0, [sp, #12]
 800bcd0:	f000 fbc2 	bl	800c458 <_Bfree>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	7023      	strb	r3, [r4, #0]
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bcdc:	3301      	adds	r3, #1
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d100      	bne.n	800bce8 <_dtoa_r+0x704>
 800bce6:	e4c7      	b.n	800b678 <_dtoa_r+0x94>
 800bce8:	601c      	str	r4, [r3, #0]
 800bcea:	e4c5      	b.n	800b678 <_dtoa_r+0x94>
 800bcec:	0800e718 	.word	0x0800e718
 800bcf0:	0800e6f0 	.word	0x0800e6f0
 800bcf4:	3ff00000 	.word	0x3ff00000
 800bcf8:	40240000 	.word	0x40240000
 800bcfc:	401c0000 	.word	0x401c0000
 800bd00:	fcc00000 	.word	0xfcc00000
 800bd04:	40140000 	.word	0x40140000
 800bd08:	3fe00000 	.word	0x3fe00000
 800bd0c:	9b04      	ldr	r3, [sp, #16]
 800bd0e:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd10:	0023      	movs	r3, r4
 800bd12:	001c      	movs	r4, r3
 800bd14:	3b01      	subs	r3, #1
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	2a39      	cmp	r2, #57	@ 0x39
 800bd1a:	d108      	bne.n	800bd2e <_dtoa_r+0x74a>
 800bd1c:	9a08      	ldr	r2, [sp, #32]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d1f7      	bne.n	800bd12 <_dtoa_r+0x72e>
 800bd22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd24:	9908      	ldr	r1, [sp, #32]
 800bd26:	3201      	adds	r2, #1
 800bd28:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd2a:	2230      	movs	r2, #48	@ 0x30
 800bd2c:	700a      	strb	r2, [r1, #0]
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	3201      	adds	r2, #1
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	e784      	b.n	800bc40 <_dtoa_r+0x65c>
 800bd36:	2200      	movs	r2, #0
 800bd38:	4bc6      	ldr	r3, [pc, #792]	@ (800c054 <_dtoa_r+0xa70>)
 800bd3a:	f7f6 fd3b 	bl	80027b4 <__aeabi_dmul>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	2300      	movs	r3, #0
 800bd42:	0006      	movs	r6, r0
 800bd44:	000f      	movs	r7, r1
 800bd46:	f7f4 fb7f 	bl	8000448 <__aeabi_dcmpeq>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d089      	beq.n	800bc62 <_dtoa_r+0x67e>
 800bd4e:	e7bd      	b.n	800bccc <_dtoa_r+0x6e8>
 800bd50:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800bd52:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bd54:	9c06      	ldr	r4, [sp, #24]
 800bd56:	2f00      	cmp	r7, #0
 800bd58:	d014      	beq.n	800bd84 <_dtoa_r+0x7a0>
 800bd5a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd5c:	2a01      	cmp	r2, #1
 800bd5e:	dd00      	ble.n	800bd62 <_dtoa_r+0x77e>
 800bd60:	e0e4      	b.n	800bf2c <_dtoa_r+0x948>
 800bd62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	d100      	bne.n	800bd6a <_dtoa_r+0x786>
 800bd68:	e0da      	b.n	800bf20 <_dtoa_r+0x93c>
 800bd6a:	4abb      	ldr	r2, [pc, #748]	@ (800c058 <_dtoa_r+0xa74>)
 800bd6c:	189b      	adds	r3, r3, r2
 800bd6e:	9a06      	ldr	r2, [sp, #24]
 800bd70:	2101      	movs	r1, #1
 800bd72:	18d2      	adds	r2, r2, r3
 800bd74:	9206      	str	r2, [sp, #24]
 800bd76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd78:	9803      	ldr	r0, [sp, #12]
 800bd7a:	18d3      	adds	r3, r2, r3
 800bd7c:	930d      	str	r3, [sp, #52]	@ 0x34
 800bd7e:	f000 fc23 	bl	800c5c8 <__i2b>
 800bd82:	0007      	movs	r7, r0
 800bd84:	2c00      	cmp	r4, #0
 800bd86:	d00e      	beq.n	800bda6 <_dtoa_r+0x7c2>
 800bd88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	dd0b      	ble.n	800bda6 <_dtoa_r+0x7c2>
 800bd8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd90:	0023      	movs	r3, r4
 800bd92:	4294      	cmp	r4, r2
 800bd94:	dd00      	ble.n	800bd98 <_dtoa_r+0x7b4>
 800bd96:	0013      	movs	r3, r2
 800bd98:	9a06      	ldr	r2, [sp, #24]
 800bd9a:	1ae4      	subs	r4, r4, r3
 800bd9c:	1ad2      	subs	r2, r2, r3
 800bd9e:	9206      	str	r2, [sp, #24]
 800bda0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bda6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d021      	beq.n	800bdf0 <_dtoa_r+0x80c>
 800bdac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d100      	bne.n	800bdb4 <_dtoa_r+0x7d0>
 800bdb2:	e0d3      	b.n	800bf5c <_dtoa_r+0x978>
 800bdb4:	9e05      	ldr	r6, [sp, #20]
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	d014      	beq.n	800bde4 <_dtoa_r+0x800>
 800bdba:	0039      	movs	r1, r7
 800bdbc:	002a      	movs	r2, r5
 800bdbe:	9803      	ldr	r0, [sp, #12]
 800bdc0:	f000 fcc4 	bl	800c74c <__pow5mult>
 800bdc4:	9a05      	ldr	r2, [sp, #20]
 800bdc6:	0001      	movs	r1, r0
 800bdc8:	0007      	movs	r7, r0
 800bdca:	9803      	ldr	r0, [sp, #12]
 800bdcc:	f000 fc14 	bl	800c5f8 <__multiply>
 800bdd0:	0006      	movs	r6, r0
 800bdd2:	9905      	ldr	r1, [sp, #20]
 800bdd4:	9803      	ldr	r0, [sp, #12]
 800bdd6:	f000 fb3f 	bl	800c458 <_Bfree>
 800bdda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bddc:	9605      	str	r6, [sp, #20]
 800bdde:	1b5b      	subs	r3, r3, r5
 800bde0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bde2:	d005      	beq.n	800bdf0 <_dtoa_r+0x80c>
 800bde4:	0031      	movs	r1, r6
 800bde6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bde8:	9803      	ldr	r0, [sp, #12]
 800bdea:	f000 fcaf 	bl	800c74c <__pow5mult>
 800bdee:	9005      	str	r0, [sp, #20]
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	9803      	ldr	r0, [sp, #12]
 800bdf4:	f000 fbe8 	bl	800c5c8 <__i2b>
 800bdf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdfa:	0006      	movs	r6, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d100      	bne.n	800be02 <_dtoa_r+0x81e>
 800be00:	e1bc      	b.n	800c17c <_dtoa_r+0xb98>
 800be02:	001a      	movs	r2, r3
 800be04:	0001      	movs	r1, r0
 800be06:	9803      	ldr	r0, [sp, #12]
 800be08:	f000 fca0 	bl	800c74c <__pow5mult>
 800be0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800be0e:	0006      	movs	r6, r0
 800be10:	2500      	movs	r5, #0
 800be12:	2b01      	cmp	r3, #1
 800be14:	dc16      	bgt.n	800be44 <_dtoa_r+0x860>
 800be16:	2500      	movs	r5, #0
 800be18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be1a:	42ab      	cmp	r3, r5
 800be1c:	d10e      	bne.n	800be3c <_dtoa_r+0x858>
 800be1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be20:	031b      	lsls	r3, r3, #12
 800be22:	42ab      	cmp	r3, r5
 800be24:	d10a      	bne.n	800be3c <_dtoa_r+0x858>
 800be26:	4b8d      	ldr	r3, [pc, #564]	@ (800c05c <_dtoa_r+0xa78>)
 800be28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be2a:	4213      	tst	r3, r2
 800be2c:	d006      	beq.n	800be3c <_dtoa_r+0x858>
 800be2e:	9b06      	ldr	r3, [sp, #24]
 800be30:	3501      	adds	r5, #1
 800be32:	3301      	adds	r3, #1
 800be34:	9306      	str	r3, [sp, #24]
 800be36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be38:	3301      	adds	r3, #1
 800be3a:	930d      	str	r3, [sp, #52]	@ 0x34
 800be3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be3e:	2001      	movs	r0, #1
 800be40:	2b00      	cmp	r3, #0
 800be42:	d008      	beq.n	800be56 <_dtoa_r+0x872>
 800be44:	6933      	ldr	r3, [r6, #16]
 800be46:	3303      	adds	r3, #3
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	18f3      	adds	r3, r6, r3
 800be4c:	6858      	ldr	r0, [r3, #4]
 800be4e:	f000 fb6b 	bl	800c528 <__hi0bits>
 800be52:	2320      	movs	r3, #32
 800be54:	1a18      	subs	r0, r3, r0
 800be56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be58:	1818      	adds	r0, r3, r0
 800be5a:	0002      	movs	r2, r0
 800be5c:	231f      	movs	r3, #31
 800be5e:	401a      	ands	r2, r3
 800be60:	4218      	tst	r0, r3
 800be62:	d100      	bne.n	800be66 <_dtoa_r+0x882>
 800be64:	e081      	b.n	800bf6a <_dtoa_r+0x986>
 800be66:	3301      	adds	r3, #1
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	dd79      	ble.n	800bf62 <_dtoa_r+0x97e>
 800be6e:	231c      	movs	r3, #28
 800be70:	1a9b      	subs	r3, r3, r2
 800be72:	9a06      	ldr	r2, [sp, #24]
 800be74:	18e4      	adds	r4, r4, r3
 800be76:	18d2      	adds	r2, r2, r3
 800be78:	9206      	str	r2, [sp, #24]
 800be7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be7c:	18d3      	adds	r3, r2, r3
 800be7e:	930d      	str	r3, [sp, #52]	@ 0x34
 800be80:	9b06      	ldr	r3, [sp, #24]
 800be82:	2b00      	cmp	r3, #0
 800be84:	dd05      	ble.n	800be92 <_dtoa_r+0x8ae>
 800be86:	001a      	movs	r2, r3
 800be88:	9905      	ldr	r1, [sp, #20]
 800be8a:	9803      	ldr	r0, [sp, #12]
 800be8c:	f000 fcba 	bl	800c804 <__lshift>
 800be90:	9005      	str	r0, [sp, #20]
 800be92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd05      	ble.n	800bea4 <_dtoa_r+0x8c0>
 800be98:	0031      	movs	r1, r6
 800be9a:	001a      	movs	r2, r3
 800be9c:	9803      	ldr	r0, [sp, #12]
 800be9e:	f000 fcb1 	bl	800c804 <__lshift>
 800bea2:	0006      	movs	r6, r0
 800bea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d061      	beq.n	800bf6e <_dtoa_r+0x98a>
 800beaa:	0031      	movs	r1, r6
 800beac:	9805      	ldr	r0, [sp, #20]
 800beae:	f000 fd15 	bl	800c8dc <__mcmp>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	da5b      	bge.n	800bf6e <_dtoa_r+0x98a>
 800beb6:	9b04      	ldr	r3, [sp, #16]
 800beb8:	220a      	movs	r2, #10
 800beba:	3b01      	subs	r3, #1
 800bebc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bebe:	9905      	ldr	r1, [sp, #20]
 800bec0:	2300      	movs	r3, #0
 800bec2:	9803      	ldr	r0, [sp, #12]
 800bec4:	f000 faec 	bl	800c4a0 <__multadd>
 800bec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800beca:	9005      	str	r0, [sp, #20]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d100      	bne.n	800bed2 <_dtoa_r+0x8ee>
 800bed0:	e15b      	b.n	800c18a <_dtoa_r+0xba6>
 800bed2:	2300      	movs	r3, #0
 800bed4:	0039      	movs	r1, r7
 800bed6:	220a      	movs	r2, #10
 800bed8:	9803      	ldr	r0, [sp, #12]
 800beda:	f000 fae1 	bl	800c4a0 <__multadd>
 800bede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee0:	0007      	movs	r7, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dc4d      	bgt.n	800bf82 <_dtoa_r+0x99e>
 800bee6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bee8:	2b02      	cmp	r3, #2
 800beea:	dd46      	ble.n	800bf7a <_dtoa_r+0x996>
 800beec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d000      	beq.n	800bef4 <_dtoa_r+0x910>
 800bef2:	e5db      	b.n	800baac <_dtoa_r+0x4c8>
 800bef4:	0031      	movs	r1, r6
 800bef6:	2205      	movs	r2, #5
 800bef8:	9803      	ldr	r0, [sp, #12]
 800befa:	f000 fad1 	bl	800c4a0 <__multadd>
 800befe:	0006      	movs	r6, r0
 800bf00:	0001      	movs	r1, r0
 800bf02:	9805      	ldr	r0, [sp, #20]
 800bf04:	f000 fcea 	bl	800c8dc <__mcmp>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	dc00      	bgt.n	800bf0e <_dtoa_r+0x92a>
 800bf0c:	e5ce      	b.n	800baac <_dtoa_r+0x4c8>
 800bf0e:	9b08      	ldr	r3, [sp, #32]
 800bf10:	9a08      	ldr	r2, [sp, #32]
 800bf12:	1c5c      	adds	r4, r3, #1
 800bf14:	2331      	movs	r3, #49	@ 0x31
 800bf16:	7013      	strb	r3, [r2, #0]
 800bf18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf1e:	e5c9      	b.n	800bab4 <_dtoa_r+0x4d0>
 800bf20:	2336      	movs	r3, #54	@ 0x36
 800bf22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf24:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bf26:	1a9b      	subs	r3, r3, r2
 800bf28:	9c06      	ldr	r4, [sp, #24]
 800bf2a:	e720      	b.n	800bd6e <_dtoa_r+0x78a>
 800bf2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf2e:	1e5d      	subs	r5, r3, #1
 800bf30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf32:	42ab      	cmp	r3, r5
 800bf34:	db08      	blt.n	800bf48 <_dtoa_r+0x964>
 800bf36:	1b5d      	subs	r5, r3, r5
 800bf38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	daf4      	bge.n	800bf28 <_dtoa_r+0x944>
 800bf3e:	9b06      	ldr	r3, [sp, #24]
 800bf40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf42:	1a9c      	subs	r4, r3, r2
 800bf44:	2300      	movs	r3, #0
 800bf46:	e712      	b.n	800bd6e <_dtoa_r+0x78a>
 800bf48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf4c:	1aeb      	subs	r3, r5, r3
 800bf4e:	18d3      	adds	r3, r2, r3
 800bf50:	9314      	str	r3, [sp, #80]	@ 0x50
 800bf52:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bf54:	9c06      	ldr	r4, [sp, #24]
 800bf56:	2500      	movs	r5, #0
 800bf58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5a:	e708      	b.n	800bd6e <_dtoa_r+0x78a>
 800bf5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf5e:	9905      	ldr	r1, [sp, #20]
 800bf60:	e742      	b.n	800bde8 <_dtoa_r+0x804>
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d08c      	beq.n	800be80 <_dtoa_r+0x89c>
 800bf66:	331c      	adds	r3, #28
 800bf68:	e783      	b.n	800be72 <_dtoa_r+0x88e>
 800bf6a:	0013      	movs	r3, r2
 800bf6c:	e7fb      	b.n	800bf66 <_dtoa_r+0x982>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf74:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	ddb5      	ble.n	800bee6 <_dtoa_r+0x902>
 800bf7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d100      	bne.n	800bf82 <_dtoa_r+0x99e>
 800bf80:	e107      	b.n	800c192 <_dtoa_r+0xbae>
 800bf82:	2c00      	cmp	r4, #0
 800bf84:	dd05      	ble.n	800bf92 <_dtoa_r+0x9ae>
 800bf86:	0039      	movs	r1, r7
 800bf88:	0022      	movs	r2, r4
 800bf8a:	9803      	ldr	r0, [sp, #12]
 800bf8c:	f000 fc3a 	bl	800c804 <__lshift>
 800bf90:	0007      	movs	r7, r0
 800bf92:	9704      	str	r7, [sp, #16]
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	d020      	beq.n	800bfda <_dtoa_r+0x9f6>
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	9803      	ldr	r0, [sp, #12]
 800bf9c:	f000 fa18 	bl	800c3d0 <_Balloc>
 800bfa0:	1e04      	subs	r4, r0, #0
 800bfa2:	d10c      	bne.n	800bfbe <_dtoa_r+0x9da>
 800bfa4:	0022      	movs	r2, r4
 800bfa6:	4b2e      	ldr	r3, [pc, #184]	@ (800c060 <_dtoa_r+0xa7c>)
 800bfa8:	482e      	ldr	r0, [pc, #184]	@ (800c064 <_dtoa_r+0xa80>)
 800bfaa:	492f      	ldr	r1, [pc, #188]	@ (800c068 <_dtoa_r+0xa84>)
 800bfac:	f7ff fb2f 	bl	800b60e <_dtoa_r+0x2a>
 800bfb0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bfb2:	0037      	movs	r7, r6
 800bfb4:	e7ab      	b.n	800bf0e <_dtoa_r+0x92a>
 800bfb6:	9b04      	ldr	r3, [sp, #16]
 800bfb8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bfba:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfbc:	e7f9      	b.n	800bfb2 <_dtoa_r+0x9ce>
 800bfbe:	0039      	movs	r1, r7
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	310c      	adds	r1, #12
 800bfc4:	3202      	adds	r2, #2
 800bfc6:	0092      	lsls	r2, r2, #2
 800bfc8:	300c      	adds	r0, #12
 800bfca:	f7ff fa7d 	bl	800b4c8 <memcpy>
 800bfce:	2201      	movs	r2, #1
 800bfd0:	0021      	movs	r1, r4
 800bfd2:	9803      	ldr	r0, [sp, #12]
 800bfd4:	f000 fc16 	bl	800c804 <__lshift>
 800bfd8:	9004      	str	r0, [sp, #16]
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfde:	9306      	str	r3, [sp, #24]
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	189b      	adds	r3, r3, r2
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfea:	4013      	ands	r3, r2
 800bfec:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfee:	0031      	movs	r1, r6
 800bff0:	9805      	ldr	r0, [sp, #20]
 800bff2:	f7ff fa72 	bl	800b4da <quorem>
 800bff6:	0039      	movs	r1, r7
 800bff8:	0005      	movs	r5, r0
 800bffa:	900a      	str	r0, [sp, #40]	@ 0x28
 800bffc:	9805      	ldr	r0, [sp, #20]
 800bffe:	f000 fc6d 	bl	800c8dc <__mcmp>
 800c002:	9a04      	ldr	r2, [sp, #16]
 800c004:	900d      	str	r0, [sp, #52]	@ 0x34
 800c006:	0031      	movs	r1, r6
 800c008:	9803      	ldr	r0, [sp, #12]
 800c00a:	f000 fc83 	bl	800c914 <__mdiff>
 800c00e:	2201      	movs	r2, #1
 800c010:	68c3      	ldr	r3, [r0, #12]
 800c012:	0004      	movs	r4, r0
 800c014:	3530      	adds	r5, #48	@ 0x30
 800c016:	9209      	str	r2, [sp, #36]	@ 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d104      	bne.n	800c026 <_dtoa_r+0xa42>
 800c01c:	0001      	movs	r1, r0
 800c01e:	9805      	ldr	r0, [sp, #20]
 800c020:	f000 fc5c 	bl	800c8dc <__mcmp>
 800c024:	9009      	str	r0, [sp, #36]	@ 0x24
 800c026:	0021      	movs	r1, r4
 800c028:	9803      	ldr	r0, [sp, #12]
 800c02a:	f000 fa15 	bl	800c458 <_Bfree>
 800c02e:	9b06      	ldr	r3, [sp, #24]
 800c030:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c032:	1c5c      	adds	r4, r3, #1
 800c034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c036:	4313      	orrs	r3, r2
 800c038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c03a:	4313      	orrs	r3, r2
 800c03c:	d116      	bne.n	800c06c <_dtoa_r+0xa88>
 800c03e:	2d39      	cmp	r5, #57	@ 0x39
 800c040:	d02f      	beq.n	800c0a2 <_dtoa_r+0xabe>
 800c042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c044:	2b00      	cmp	r3, #0
 800c046:	dd01      	ble.n	800c04c <_dtoa_r+0xa68>
 800c048:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c04a:	3531      	adds	r5, #49	@ 0x31
 800c04c:	9b06      	ldr	r3, [sp, #24]
 800c04e:	701d      	strb	r5, [r3, #0]
 800c050:	e532      	b.n	800bab8 <_dtoa_r+0x4d4>
 800c052:	46c0      	nop			@ (mov r8, r8)
 800c054:	40240000 	.word	0x40240000
 800c058:	00000433 	.word	0x00000433
 800c05c:	7ff00000 	.word	0x7ff00000
 800c060:	0800e620 	.word	0x0800e620
 800c064:	0800e5c8 	.word	0x0800e5c8
 800c068:	000002ef 	.word	0x000002ef
 800c06c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c06e:	2b00      	cmp	r3, #0
 800c070:	db04      	blt.n	800c07c <_dtoa_r+0xa98>
 800c072:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c074:	4313      	orrs	r3, r2
 800c076:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c078:	4313      	orrs	r3, r2
 800c07a:	d11e      	bne.n	800c0ba <_dtoa_r+0xad6>
 800c07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dde4      	ble.n	800c04c <_dtoa_r+0xa68>
 800c082:	9905      	ldr	r1, [sp, #20]
 800c084:	2201      	movs	r2, #1
 800c086:	9803      	ldr	r0, [sp, #12]
 800c088:	f000 fbbc 	bl	800c804 <__lshift>
 800c08c:	0031      	movs	r1, r6
 800c08e:	9005      	str	r0, [sp, #20]
 800c090:	f000 fc24 	bl	800c8dc <__mcmp>
 800c094:	2800      	cmp	r0, #0
 800c096:	dc02      	bgt.n	800c09e <_dtoa_r+0xaba>
 800c098:	d1d8      	bne.n	800c04c <_dtoa_r+0xa68>
 800c09a:	07eb      	lsls	r3, r5, #31
 800c09c:	d5d6      	bpl.n	800c04c <_dtoa_r+0xa68>
 800c09e:	2d39      	cmp	r5, #57	@ 0x39
 800c0a0:	d1d2      	bne.n	800c048 <_dtoa_r+0xa64>
 800c0a2:	2339      	movs	r3, #57	@ 0x39
 800c0a4:	9a06      	ldr	r2, [sp, #24]
 800c0a6:	7013      	strb	r3, [r2, #0]
 800c0a8:	0023      	movs	r3, r4
 800c0aa:	001c      	movs	r4, r3
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	2a39      	cmp	r2, #57	@ 0x39
 800c0b2:	d050      	beq.n	800c156 <_dtoa_r+0xb72>
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
 800c0b8:	e4fe      	b.n	800bab8 <_dtoa_r+0x4d4>
 800c0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd03      	ble.n	800c0c8 <_dtoa_r+0xae4>
 800c0c0:	2d39      	cmp	r5, #57	@ 0x39
 800c0c2:	d0ee      	beq.n	800c0a2 <_dtoa_r+0xabe>
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	e7c1      	b.n	800c04c <_dtoa_r+0xa68>
 800c0c8:	9b06      	ldr	r3, [sp, #24]
 800c0ca:	9a06      	ldr	r2, [sp, #24]
 800c0cc:	701d      	strb	r5, [r3, #0]
 800c0ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d02b      	beq.n	800c12c <_dtoa_r+0xb48>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	220a      	movs	r2, #10
 800c0d8:	9905      	ldr	r1, [sp, #20]
 800c0da:	9803      	ldr	r0, [sp, #12]
 800c0dc:	f000 f9e0 	bl	800c4a0 <__multadd>
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	9005      	str	r0, [sp, #20]
 800c0e4:	429f      	cmp	r7, r3
 800c0e6:	d109      	bne.n	800c0fc <_dtoa_r+0xb18>
 800c0e8:	0039      	movs	r1, r7
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	220a      	movs	r2, #10
 800c0ee:	9803      	ldr	r0, [sp, #12]
 800c0f0:	f000 f9d6 	bl	800c4a0 <__multadd>
 800c0f4:	0007      	movs	r7, r0
 800c0f6:	9004      	str	r0, [sp, #16]
 800c0f8:	9406      	str	r4, [sp, #24]
 800c0fa:	e778      	b.n	800bfee <_dtoa_r+0xa0a>
 800c0fc:	0039      	movs	r1, r7
 800c0fe:	2300      	movs	r3, #0
 800c100:	220a      	movs	r2, #10
 800c102:	9803      	ldr	r0, [sp, #12]
 800c104:	f000 f9cc 	bl	800c4a0 <__multadd>
 800c108:	2300      	movs	r3, #0
 800c10a:	0007      	movs	r7, r0
 800c10c:	220a      	movs	r2, #10
 800c10e:	9904      	ldr	r1, [sp, #16]
 800c110:	9803      	ldr	r0, [sp, #12]
 800c112:	f000 f9c5 	bl	800c4a0 <__multadd>
 800c116:	9004      	str	r0, [sp, #16]
 800c118:	e7ee      	b.n	800c0f8 <_dtoa_r+0xb14>
 800c11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c11c:	2401      	movs	r4, #1
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dd00      	ble.n	800c124 <_dtoa_r+0xb40>
 800c122:	001c      	movs	r4, r3
 800c124:	9704      	str	r7, [sp, #16]
 800c126:	2700      	movs	r7, #0
 800c128:	9b08      	ldr	r3, [sp, #32]
 800c12a:	191c      	adds	r4, r3, r4
 800c12c:	9905      	ldr	r1, [sp, #20]
 800c12e:	2201      	movs	r2, #1
 800c130:	9803      	ldr	r0, [sp, #12]
 800c132:	f000 fb67 	bl	800c804 <__lshift>
 800c136:	0031      	movs	r1, r6
 800c138:	9005      	str	r0, [sp, #20]
 800c13a:	f000 fbcf 	bl	800c8dc <__mcmp>
 800c13e:	2800      	cmp	r0, #0
 800c140:	dcb2      	bgt.n	800c0a8 <_dtoa_r+0xac4>
 800c142:	d101      	bne.n	800c148 <_dtoa_r+0xb64>
 800c144:	07ed      	lsls	r5, r5, #31
 800c146:	d4af      	bmi.n	800c0a8 <_dtoa_r+0xac4>
 800c148:	0023      	movs	r3, r4
 800c14a:	001c      	movs	r4, r3
 800c14c:	3b01      	subs	r3, #1
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	2a30      	cmp	r2, #48	@ 0x30
 800c152:	d0fa      	beq.n	800c14a <_dtoa_r+0xb66>
 800c154:	e4b0      	b.n	800bab8 <_dtoa_r+0x4d4>
 800c156:	9a08      	ldr	r2, [sp, #32]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d1a6      	bne.n	800c0aa <_dtoa_r+0xac6>
 800c15c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c15e:	3301      	adds	r3, #1
 800c160:	930c      	str	r3, [sp, #48]	@ 0x30
 800c162:	2331      	movs	r3, #49	@ 0x31
 800c164:	7013      	strb	r3, [r2, #0]
 800c166:	e4a7      	b.n	800bab8 <_dtoa_r+0x4d4>
 800c168:	4b14      	ldr	r3, [pc, #80]	@ (800c1bc <_dtoa_r+0xbd8>)
 800c16a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c16c:	9308      	str	r3, [sp, #32]
 800c16e:	4b14      	ldr	r3, [pc, #80]	@ (800c1c0 <_dtoa_r+0xbdc>)
 800c170:	2a00      	cmp	r2, #0
 800c172:	d001      	beq.n	800c178 <_dtoa_r+0xb94>
 800c174:	f7ff fa7e 	bl	800b674 <_dtoa_r+0x90>
 800c178:	f7ff fa7e 	bl	800b678 <_dtoa_r+0x94>
 800c17c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c17e:	2b01      	cmp	r3, #1
 800c180:	dc00      	bgt.n	800c184 <_dtoa_r+0xba0>
 800c182:	e648      	b.n	800be16 <_dtoa_r+0x832>
 800c184:	2001      	movs	r0, #1
 800c186:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c188:	e665      	b.n	800be56 <_dtoa_r+0x872>
 800c18a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	dc00      	bgt.n	800c192 <_dtoa_r+0xbae>
 800c190:	e6a9      	b.n	800bee6 <_dtoa_r+0x902>
 800c192:	2400      	movs	r4, #0
 800c194:	0031      	movs	r1, r6
 800c196:	9805      	ldr	r0, [sp, #20]
 800c198:	f7ff f99f 	bl	800b4da <quorem>
 800c19c:	9b08      	ldr	r3, [sp, #32]
 800c19e:	3030      	adds	r0, #48	@ 0x30
 800c1a0:	5518      	strb	r0, [r3, r4]
 800c1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a4:	3401      	adds	r4, #1
 800c1a6:	0005      	movs	r5, r0
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	ddb6      	ble.n	800c11a <_dtoa_r+0xb36>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	220a      	movs	r2, #10
 800c1b0:	9905      	ldr	r1, [sp, #20]
 800c1b2:	9803      	ldr	r0, [sp, #12]
 800c1b4:	f000 f974 	bl	800c4a0 <__multadd>
 800c1b8:	9005      	str	r0, [sp, #20]
 800c1ba:	e7eb      	b.n	800c194 <_dtoa_r+0xbb0>
 800c1bc:	0800e5a4 	.word	0x0800e5a4
 800c1c0:	0800e5ac 	.word	0x0800e5ac

0800c1c4 <_free_r>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	0005      	movs	r5, r0
 800c1c8:	1e0c      	subs	r4, r1, #0
 800c1ca:	d010      	beq.n	800c1ee <_free_r+0x2a>
 800c1cc:	3c04      	subs	r4, #4
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	da00      	bge.n	800c1d6 <_free_r+0x12>
 800c1d4:	18e4      	adds	r4, r4, r3
 800c1d6:	0028      	movs	r0, r5
 800c1d8:	f000 f8ea 	bl	800c3b0 <__malloc_lock>
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c254 <_free_r+0x90>)
 800c1de:	6813      	ldr	r3, [r2, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d105      	bne.n	800c1f0 <_free_r+0x2c>
 800c1e4:	6063      	str	r3, [r4, #4]
 800c1e6:	6014      	str	r4, [r2, #0]
 800c1e8:	0028      	movs	r0, r5
 800c1ea:	f000 f8e9 	bl	800c3c0 <__malloc_unlock>
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	d908      	bls.n	800c206 <_free_r+0x42>
 800c1f4:	6820      	ldr	r0, [r4, #0]
 800c1f6:	1821      	adds	r1, r4, r0
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	d1f3      	bne.n	800c1e4 <_free_r+0x20>
 800c1fc:	6819      	ldr	r1, [r3, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	1809      	adds	r1, r1, r0
 800c202:	6021      	str	r1, [r4, #0]
 800c204:	e7ee      	b.n	800c1e4 <_free_r+0x20>
 800c206:	001a      	movs	r2, r3
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <_free_r+0x4e>
 800c20e:	42a3      	cmp	r3, r4
 800c210:	d9f9      	bls.n	800c206 <_free_r+0x42>
 800c212:	6811      	ldr	r1, [r2, #0]
 800c214:	1850      	adds	r0, r2, r1
 800c216:	42a0      	cmp	r0, r4
 800c218:	d10b      	bne.n	800c232 <_free_r+0x6e>
 800c21a:	6820      	ldr	r0, [r4, #0]
 800c21c:	1809      	adds	r1, r1, r0
 800c21e:	1850      	adds	r0, r2, r1
 800c220:	6011      	str	r1, [r2, #0]
 800c222:	4283      	cmp	r3, r0
 800c224:	d1e0      	bne.n	800c1e8 <_free_r+0x24>
 800c226:	6818      	ldr	r0, [r3, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	1841      	adds	r1, r0, r1
 800c22c:	6011      	str	r1, [r2, #0]
 800c22e:	6053      	str	r3, [r2, #4]
 800c230:	e7da      	b.n	800c1e8 <_free_r+0x24>
 800c232:	42a0      	cmp	r0, r4
 800c234:	d902      	bls.n	800c23c <_free_r+0x78>
 800c236:	230c      	movs	r3, #12
 800c238:	602b      	str	r3, [r5, #0]
 800c23a:	e7d5      	b.n	800c1e8 <_free_r+0x24>
 800c23c:	6820      	ldr	r0, [r4, #0]
 800c23e:	1821      	adds	r1, r4, r0
 800c240:	428b      	cmp	r3, r1
 800c242:	d103      	bne.n	800c24c <_free_r+0x88>
 800c244:	6819      	ldr	r1, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	1809      	adds	r1, r1, r0
 800c24a:	6021      	str	r1, [r4, #0]
 800c24c:	6063      	str	r3, [r4, #4]
 800c24e:	6054      	str	r4, [r2, #4]
 800c250:	e7ca      	b.n	800c1e8 <_free_r+0x24>
 800c252:	46c0      	nop			@ (mov r8, r8)
 800c254:	2000059c 	.word	0x2000059c

0800c258 <malloc>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	4b03      	ldr	r3, [pc, #12]	@ (800c268 <malloc+0x10>)
 800c25c:	0001      	movs	r1, r0
 800c25e:	6818      	ldr	r0, [r3, #0]
 800c260:	f000 f826 	bl	800c2b0 <_malloc_r>
 800c264:	bd10      	pop	{r4, pc}
 800c266:	46c0      	nop			@ (mov r8, r8)
 800c268:	20000018 	.word	0x20000018

0800c26c <sbrk_aligned>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4e0f      	ldr	r6, [pc, #60]	@ (800c2ac <sbrk_aligned+0x40>)
 800c270:	000d      	movs	r5, r1
 800c272:	6831      	ldr	r1, [r6, #0]
 800c274:	0004      	movs	r4, r0
 800c276:	2900      	cmp	r1, #0
 800c278:	d102      	bne.n	800c280 <sbrk_aligned+0x14>
 800c27a:	f000 fe67 	bl	800cf4c <_sbrk_r>
 800c27e:	6030      	str	r0, [r6, #0]
 800c280:	0029      	movs	r1, r5
 800c282:	0020      	movs	r0, r4
 800c284:	f000 fe62 	bl	800cf4c <_sbrk_r>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d103      	bne.n	800c294 <sbrk_aligned+0x28>
 800c28c:	2501      	movs	r5, #1
 800c28e:	426d      	negs	r5, r5
 800c290:	0028      	movs	r0, r5
 800c292:	bd70      	pop	{r4, r5, r6, pc}
 800c294:	2303      	movs	r3, #3
 800c296:	1cc5      	adds	r5, r0, #3
 800c298:	439d      	bics	r5, r3
 800c29a:	42a8      	cmp	r0, r5
 800c29c:	d0f8      	beq.n	800c290 <sbrk_aligned+0x24>
 800c29e:	1a29      	subs	r1, r5, r0
 800c2a0:	0020      	movs	r0, r4
 800c2a2:	f000 fe53 	bl	800cf4c <_sbrk_r>
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	d1f2      	bne.n	800c290 <sbrk_aligned+0x24>
 800c2aa:	e7ef      	b.n	800c28c <sbrk_aligned+0x20>
 800c2ac:	20000598 	.word	0x20000598

0800c2b0 <_malloc_r>:
 800c2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b2:	2203      	movs	r2, #3
 800c2b4:	1ccb      	adds	r3, r1, #3
 800c2b6:	4393      	bics	r3, r2
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	0005      	movs	r5, r0
 800c2bc:	001f      	movs	r7, r3
 800c2be:	2b0c      	cmp	r3, #12
 800c2c0:	d234      	bcs.n	800c32c <_malloc_r+0x7c>
 800c2c2:	270c      	movs	r7, #12
 800c2c4:	42b9      	cmp	r1, r7
 800c2c6:	d833      	bhi.n	800c330 <_malloc_r+0x80>
 800c2c8:	0028      	movs	r0, r5
 800c2ca:	f000 f871 	bl	800c3b0 <__malloc_lock>
 800c2ce:	4e37      	ldr	r6, [pc, #220]	@ (800c3ac <_malloc_r+0xfc>)
 800c2d0:	6833      	ldr	r3, [r6, #0]
 800c2d2:	001c      	movs	r4, r3
 800c2d4:	2c00      	cmp	r4, #0
 800c2d6:	d12f      	bne.n	800c338 <_malloc_r+0x88>
 800c2d8:	0039      	movs	r1, r7
 800c2da:	0028      	movs	r0, r5
 800c2dc:	f7ff ffc6 	bl	800c26c <sbrk_aligned>
 800c2e0:	0004      	movs	r4, r0
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d15f      	bne.n	800c3a6 <_malloc_r+0xf6>
 800c2e6:	6834      	ldr	r4, [r6, #0]
 800c2e8:	9400      	str	r4, [sp, #0]
 800c2ea:	9b00      	ldr	r3, [sp, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d14a      	bne.n	800c386 <_malloc_r+0xd6>
 800c2f0:	2c00      	cmp	r4, #0
 800c2f2:	d052      	beq.n	800c39a <_malloc_r+0xea>
 800c2f4:	6823      	ldr	r3, [r4, #0]
 800c2f6:	0028      	movs	r0, r5
 800c2f8:	18e3      	adds	r3, r4, r3
 800c2fa:	9900      	ldr	r1, [sp, #0]
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	f000 fe25 	bl	800cf4c <_sbrk_r>
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	4283      	cmp	r3, r0
 800c306:	d148      	bne.n	800c39a <_malloc_r+0xea>
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	0028      	movs	r0, r5
 800c30c:	1aff      	subs	r7, r7, r3
 800c30e:	0039      	movs	r1, r7
 800c310:	f7ff ffac 	bl	800c26c <sbrk_aligned>
 800c314:	3001      	adds	r0, #1
 800c316:	d040      	beq.n	800c39a <_malloc_r+0xea>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	19db      	adds	r3, r3, r7
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	6833      	ldr	r3, [r6, #0]
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	2a00      	cmp	r2, #0
 800c324:	d133      	bne.n	800c38e <_malloc_r+0xde>
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	6033      	str	r3, [r6, #0]
 800c32a:	e019      	b.n	800c360 <_malloc_r+0xb0>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dac9      	bge.n	800c2c4 <_malloc_r+0x14>
 800c330:	230c      	movs	r3, #12
 800c332:	602b      	str	r3, [r5, #0]
 800c334:	2000      	movs	r0, #0
 800c336:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c338:	6821      	ldr	r1, [r4, #0]
 800c33a:	1bc9      	subs	r1, r1, r7
 800c33c:	d420      	bmi.n	800c380 <_malloc_r+0xd0>
 800c33e:	290b      	cmp	r1, #11
 800c340:	d90a      	bls.n	800c358 <_malloc_r+0xa8>
 800c342:	19e2      	adds	r2, r4, r7
 800c344:	6027      	str	r7, [r4, #0]
 800c346:	42a3      	cmp	r3, r4
 800c348:	d104      	bne.n	800c354 <_malloc_r+0xa4>
 800c34a:	6032      	str	r2, [r6, #0]
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	6011      	str	r1, [r2, #0]
 800c350:	6053      	str	r3, [r2, #4]
 800c352:	e005      	b.n	800c360 <_malloc_r+0xb0>
 800c354:	605a      	str	r2, [r3, #4]
 800c356:	e7f9      	b.n	800c34c <_malloc_r+0x9c>
 800c358:	6862      	ldr	r2, [r4, #4]
 800c35a:	42a3      	cmp	r3, r4
 800c35c:	d10e      	bne.n	800c37c <_malloc_r+0xcc>
 800c35e:	6032      	str	r2, [r6, #0]
 800c360:	0028      	movs	r0, r5
 800c362:	f000 f82d 	bl	800c3c0 <__malloc_unlock>
 800c366:	0020      	movs	r0, r4
 800c368:	2207      	movs	r2, #7
 800c36a:	300b      	adds	r0, #11
 800c36c:	1d23      	adds	r3, r4, #4
 800c36e:	4390      	bics	r0, r2
 800c370:	1ac2      	subs	r2, r0, r3
 800c372:	4298      	cmp	r0, r3
 800c374:	d0df      	beq.n	800c336 <_malloc_r+0x86>
 800c376:	1a1b      	subs	r3, r3, r0
 800c378:	50a3      	str	r3, [r4, r2]
 800c37a:	e7dc      	b.n	800c336 <_malloc_r+0x86>
 800c37c:	605a      	str	r2, [r3, #4]
 800c37e:	e7ef      	b.n	800c360 <_malloc_r+0xb0>
 800c380:	0023      	movs	r3, r4
 800c382:	6864      	ldr	r4, [r4, #4]
 800c384:	e7a6      	b.n	800c2d4 <_malloc_r+0x24>
 800c386:	9c00      	ldr	r4, [sp, #0]
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	e7ad      	b.n	800c2ea <_malloc_r+0x3a>
 800c38e:	001a      	movs	r2, r3
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	42a3      	cmp	r3, r4
 800c394:	d1fb      	bne.n	800c38e <_malloc_r+0xde>
 800c396:	2300      	movs	r3, #0
 800c398:	e7da      	b.n	800c350 <_malloc_r+0xa0>
 800c39a:	230c      	movs	r3, #12
 800c39c:	0028      	movs	r0, r5
 800c39e:	602b      	str	r3, [r5, #0]
 800c3a0:	f000 f80e 	bl	800c3c0 <__malloc_unlock>
 800c3a4:	e7c6      	b.n	800c334 <_malloc_r+0x84>
 800c3a6:	6007      	str	r7, [r0, #0]
 800c3a8:	e7da      	b.n	800c360 <_malloc_r+0xb0>
 800c3aa:	46c0      	nop			@ (mov r8, r8)
 800c3ac:	2000059c 	.word	0x2000059c

0800c3b0 <__malloc_lock>:
 800c3b0:	b510      	push	{r4, lr}
 800c3b2:	4802      	ldr	r0, [pc, #8]	@ (800c3bc <__malloc_lock+0xc>)
 800c3b4:	f7ff f87b 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	46c0      	nop			@ (mov r8, r8)
 800c3bc:	20000594 	.word	0x20000594

0800c3c0 <__malloc_unlock>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4802      	ldr	r0, [pc, #8]	@ (800c3cc <__malloc_unlock+0xc>)
 800c3c4:	f7ff f874 	bl	800b4b0 <__retarget_lock_release_recursive>
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	46c0      	nop			@ (mov r8, r8)
 800c3cc:	20000594 	.word	0x20000594

0800c3d0 <_Balloc>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	69c5      	ldr	r5, [r0, #28]
 800c3d4:	0006      	movs	r6, r0
 800c3d6:	000c      	movs	r4, r1
 800c3d8:	2d00      	cmp	r5, #0
 800c3da:	d10e      	bne.n	800c3fa <_Balloc+0x2a>
 800c3dc:	2010      	movs	r0, #16
 800c3de:	f7ff ff3b 	bl	800c258 <malloc>
 800c3e2:	1e02      	subs	r2, r0, #0
 800c3e4:	61f0      	str	r0, [r6, #28]
 800c3e6:	d104      	bne.n	800c3f2 <_Balloc+0x22>
 800c3e8:	216b      	movs	r1, #107	@ 0x6b
 800c3ea:	4b19      	ldr	r3, [pc, #100]	@ (800c450 <_Balloc+0x80>)
 800c3ec:	4819      	ldr	r0, [pc, #100]	@ (800c454 <_Balloc+0x84>)
 800c3ee:	f000 fdbf 	bl	800cf70 <__assert_func>
 800c3f2:	6045      	str	r5, [r0, #4]
 800c3f4:	6085      	str	r5, [r0, #8]
 800c3f6:	6005      	str	r5, [r0, #0]
 800c3f8:	60c5      	str	r5, [r0, #12]
 800c3fa:	69f5      	ldr	r5, [r6, #28]
 800c3fc:	68eb      	ldr	r3, [r5, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d013      	beq.n	800c42a <_Balloc+0x5a>
 800c402:	69f3      	ldr	r3, [r6, #28]
 800c404:	00a2      	lsls	r2, r4, #2
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	189b      	adds	r3, r3, r2
 800c40a:	6818      	ldr	r0, [r3, #0]
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d118      	bne.n	800c442 <_Balloc+0x72>
 800c410:	2101      	movs	r1, #1
 800c412:	000d      	movs	r5, r1
 800c414:	40a5      	lsls	r5, r4
 800c416:	1d6a      	adds	r2, r5, #5
 800c418:	0030      	movs	r0, r6
 800c41a:	0092      	lsls	r2, r2, #2
 800c41c:	f000 fdc6 	bl	800cfac <_calloc_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	d00c      	beq.n	800c43e <_Balloc+0x6e>
 800c424:	6044      	str	r4, [r0, #4]
 800c426:	6085      	str	r5, [r0, #8]
 800c428:	e00d      	b.n	800c446 <_Balloc+0x76>
 800c42a:	2221      	movs	r2, #33	@ 0x21
 800c42c:	2104      	movs	r1, #4
 800c42e:	0030      	movs	r0, r6
 800c430:	f000 fdbc 	bl	800cfac <_calloc_r>
 800c434:	69f3      	ldr	r3, [r6, #28]
 800c436:	60e8      	str	r0, [r5, #12]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e1      	bne.n	800c402 <_Balloc+0x32>
 800c43e:	2000      	movs	r0, #0
 800c440:	bd70      	pop	{r4, r5, r6, pc}
 800c442:	6802      	ldr	r2, [r0, #0]
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	2300      	movs	r3, #0
 800c448:	6103      	str	r3, [r0, #16]
 800c44a:	60c3      	str	r3, [r0, #12]
 800c44c:	e7f8      	b.n	800c440 <_Balloc+0x70>
 800c44e:	46c0      	nop			@ (mov r8, r8)
 800c450:	0800e5b1 	.word	0x0800e5b1
 800c454:	0800e631 	.word	0x0800e631

0800c458 <_Bfree>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	69c6      	ldr	r6, [r0, #28]
 800c45c:	0005      	movs	r5, r0
 800c45e:	000c      	movs	r4, r1
 800c460:	2e00      	cmp	r6, #0
 800c462:	d10e      	bne.n	800c482 <_Bfree+0x2a>
 800c464:	2010      	movs	r0, #16
 800c466:	f7ff fef7 	bl	800c258 <malloc>
 800c46a:	1e02      	subs	r2, r0, #0
 800c46c:	61e8      	str	r0, [r5, #28]
 800c46e:	d104      	bne.n	800c47a <_Bfree+0x22>
 800c470:	218f      	movs	r1, #143	@ 0x8f
 800c472:	4b09      	ldr	r3, [pc, #36]	@ (800c498 <_Bfree+0x40>)
 800c474:	4809      	ldr	r0, [pc, #36]	@ (800c49c <_Bfree+0x44>)
 800c476:	f000 fd7b 	bl	800cf70 <__assert_func>
 800c47a:	6046      	str	r6, [r0, #4]
 800c47c:	6086      	str	r6, [r0, #8]
 800c47e:	6006      	str	r6, [r0, #0]
 800c480:	60c6      	str	r6, [r0, #12]
 800c482:	2c00      	cmp	r4, #0
 800c484:	d007      	beq.n	800c496 <_Bfree+0x3e>
 800c486:	69eb      	ldr	r3, [r5, #28]
 800c488:	6862      	ldr	r2, [r4, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	0092      	lsls	r2, r2, #2
 800c48e:	189b      	adds	r3, r3, r2
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	6022      	str	r2, [r4, #0]
 800c494:	601c      	str	r4, [r3, #0]
 800c496:	bd70      	pop	{r4, r5, r6, pc}
 800c498:	0800e5b1 	.word	0x0800e5b1
 800c49c:	0800e631 	.word	0x0800e631

0800c4a0 <__multadd>:
 800c4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4a2:	000f      	movs	r7, r1
 800c4a4:	9001      	str	r0, [sp, #4]
 800c4a6:	000c      	movs	r4, r1
 800c4a8:	001e      	movs	r6, r3
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	690d      	ldr	r5, [r1, #16]
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	3001      	adds	r0, #1
 800c4b4:	b299      	uxth	r1, r3
 800c4b6:	4351      	muls	r1, r2
 800c4b8:	0c1b      	lsrs	r3, r3, #16
 800c4ba:	4353      	muls	r3, r2
 800c4bc:	1989      	adds	r1, r1, r6
 800c4be:	0c0e      	lsrs	r6, r1, #16
 800c4c0:	199b      	adds	r3, r3, r6
 800c4c2:	0c1e      	lsrs	r6, r3, #16
 800c4c4:	b289      	uxth	r1, r1
 800c4c6:	041b      	lsls	r3, r3, #16
 800c4c8:	185b      	adds	r3, r3, r1
 800c4ca:	c708      	stmia	r7!, {r3}
 800c4cc:	4285      	cmp	r5, r0
 800c4ce:	dcef      	bgt.n	800c4b0 <__multadd+0x10>
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	d022      	beq.n	800c51a <__multadd+0x7a>
 800c4d4:	68a3      	ldr	r3, [r4, #8]
 800c4d6:	42ab      	cmp	r3, r5
 800c4d8:	dc19      	bgt.n	800c50e <__multadd+0x6e>
 800c4da:	6861      	ldr	r1, [r4, #4]
 800c4dc:	9801      	ldr	r0, [sp, #4]
 800c4de:	3101      	adds	r1, #1
 800c4e0:	f7ff ff76 	bl	800c3d0 <_Balloc>
 800c4e4:	1e07      	subs	r7, r0, #0
 800c4e6:	d105      	bne.n	800c4f4 <__multadd+0x54>
 800c4e8:	003a      	movs	r2, r7
 800c4ea:	21ba      	movs	r1, #186	@ 0xba
 800c4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <__multadd+0x80>)
 800c4ee:	480d      	ldr	r0, [pc, #52]	@ (800c524 <__multadd+0x84>)
 800c4f0:	f000 fd3e 	bl	800cf70 <__assert_func>
 800c4f4:	0021      	movs	r1, r4
 800c4f6:	6922      	ldr	r2, [r4, #16]
 800c4f8:	310c      	adds	r1, #12
 800c4fa:	3202      	adds	r2, #2
 800c4fc:	0092      	lsls	r2, r2, #2
 800c4fe:	300c      	adds	r0, #12
 800c500:	f7fe ffe2 	bl	800b4c8 <memcpy>
 800c504:	0021      	movs	r1, r4
 800c506:	9801      	ldr	r0, [sp, #4]
 800c508:	f7ff ffa6 	bl	800c458 <_Bfree>
 800c50c:	003c      	movs	r4, r7
 800c50e:	1d2b      	adds	r3, r5, #4
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	18e3      	adds	r3, r4, r3
 800c514:	3501      	adds	r5, #1
 800c516:	605e      	str	r6, [r3, #4]
 800c518:	6125      	str	r5, [r4, #16]
 800c51a:	0020      	movs	r0, r4
 800c51c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c51e:	46c0      	nop			@ (mov r8, r8)
 800c520:	0800e620 	.word	0x0800e620
 800c524:	0800e631 	.word	0x0800e631

0800c528 <__hi0bits>:
 800c528:	2280      	movs	r2, #128	@ 0x80
 800c52a:	0003      	movs	r3, r0
 800c52c:	0252      	lsls	r2, r2, #9
 800c52e:	2000      	movs	r0, #0
 800c530:	4293      	cmp	r3, r2
 800c532:	d201      	bcs.n	800c538 <__hi0bits+0x10>
 800c534:	041b      	lsls	r3, r3, #16
 800c536:	3010      	adds	r0, #16
 800c538:	2280      	movs	r2, #128	@ 0x80
 800c53a:	0452      	lsls	r2, r2, #17
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d201      	bcs.n	800c544 <__hi0bits+0x1c>
 800c540:	3008      	adds	r0, #8
 800c542:	021b      	lsls	r3, r3, #8
 800c544:	2280      	movs	r2, #128	@ 0x80
 800c546:	0552      	lsls	r2, r2, #21
 800c548:	4293      	cmp	r3, r2
 800c54a:	d201      	bcs.n	800c550 <__hi0bits+0x28>
 800c54c:	3004      	adds	r0, #4
 800c54e:	011b      	lsls	r3, r3, #4
 800c550:	2280      	movs	r2, #128	@ 0x80
 800c552:	05d2      	lsls	r2, r2, #23
 800c554:	4293      	cmp	r3, r2
 800c556:	d201      	bcs.n	800c55c <__hi0bits+0x34>
 800c558:	3002      	adds	r0, #2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	db03      	blt.n	800c568 <__hi0bits+0x40>
 800c560:	3001      	adds	r0, #1
 800c562:	4213      	tst	r3, r2
 800c564:	d100      	bne.n	800c568 <__hi0bits+0x40>
 800c566:	2020      	movs	r0, #32
 800c568:	4770      	bx	lr

0800c56a <__lo0bits>:
 800c56a:	6803      	ldr	r3, [r0, #0]
 800c56c:	0001      	movs	r1, r0
 800c56e:	2207      	movs	r2, #7
 800c570:	0018      	movs	r0, r3
 800c572:	4010      	ands	r0, r2
 800c574:	4213      	tst	r3, r2
 800c576:	d00d      	beq.n	800c594 <__lo0bits+0x2a>
 800c578:	3a06      	subs	r2, #6
 800c57a:	2000      	movs	r0, #0
 800c57c:	4213      	tst	r3, r2
 800c57e:	d105      	bne.n	800c58c <__lo0bits+0x22>
 800c580:	3002      	adds	r0, #2
 800c582:	4203      	tst	r3, r0
 800c584:	d003      	beq.n	800c58e <__lo0bits+0x24>
 800c586:	40d3      	lsrs	r3, r2
 800c588:	0010      	movs	r0, r2
 800c58a:	600b      	str	r3, [r1, #0]
 800c58c:	4770      	bx	lr
 800c58e:	089b      	lsrs	r3, r3, #2
 800c590:	600b      	str	r3, [r1, #0]
 800c592:	e7fb      	b.n	800c58c <__lo0bits+0x22>
 800c594:	b29a      	uxth	r2, r3
 800c596:	2a00      	cmp	r2, #0
 800c598:	d101      	bne.n	800c59e <__lo0bits+0x34>
 800c59a:	2010      	movs	r0, #16
 800c59c:	0c1b      	lsrs	r3, r3, #16
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	2a00      	cmp	r2, #0
 800c5a2:	d101      	bne.n	800c5a8 <__lo0bits+0x3e>
 800c5a4:	3008      	adds	r0, #8
 800c5a6:	0a1b      	lsrs	r3, r3, #8
 800c5a8:	071a      	lsls	r2, r3, #28
 800c5aa:	d101      	bne.n	800c5b0 <__lo0bits+0x46>
 800c5ac:	3004      	adds	r0, #4
 800c5ae:	091b      	lsrs	r3, r3, #4
 800c5b0:	079a      	lsls	r2, r3, #30
 800c5b2:	d101      	bne.n	800c5b8 <__lo0bits+0x4e>
 800c5b4:	3002      	adds	r0, #2
 800c5b6:	089b      	lsrs	r3, r3, #2
 800c5b8:	07da      	lsls	r2, r3, #31
 800c5ba:	d4e9      	bmi.n	800c590 <__lo0bits+0x26>
 800c5bc:	3001      	adds	r0, #1
 800c5be:	085b      	lsrs	r3, r3, #1
 800c5c0:	d1e6      	bne.n	800c590 <__lo0bits+0x26>
 800c5c2:	2020      	movs	r0, #32
 800c5c4:	e7e2      	b.n	800c58c <__lo0bits+0x22>
	...

0800c5c8 <__i2b>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	000c      	movs	r4, r1
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	f7ff feff 	bl	800c3d0 <_Balloc>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d107      	bne.n	800c5e6 <__i2b+0x1e>
 800c5d6:	2146      	movs	r1, #70	@ 0x46
 800c5d8:	4c05      	ldr	r4, [pc, #20]	@ (800c5f0 <__i2b+0x28>)
 800c5da:	0002      	movs	r2, r0
 800c5dc:	4b05      	ldr	r3, [pc, #20]	@ (800c5f4 <__i2b+0x2c>)
 800c5de:	0020      	movs	r0, r4
 800c5e0:	31ff      	adds	r1, #255	@ 0xff
 800c5e2:	f000 fcc5 	bl	800cf70 <__assert_func>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	6144      	str	r4, [r0, #20]
 800c5ea:	6103      	str	r3, [r0, #16]
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	46c0      	nop			@ (mov r8, r8)
 800c5f0:	0800e631 	.word	0x0800e631
 800c5f4:	0800e620 	.word	0x0800e620

0800c5f8 <__multiply>:
 800c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fa:	0014      	movs	r4, r2
 800c5fc:	690a      	ldr	r2, [r1, #16]
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	000d      	movs	r5, r1
 800c602:	b089      	sub	sp, #36	@ 0x24
 800c604:	429a      	cmp	r2, r3
 800c606:	db02      	blt.n	800c60e <__multiply+0x16>
 800c608:	0023      	movs	r3, r4
 800c60a:	000c      	movs	r4, r1
 800c60c:	001d      	movs	r5, r3
 800c60e:	6927      	ldr	r7, [r4, #16]
 800c610:	692e      	ldr	r6, [r5, #16]
 800c612:	6861      	ldr	r1, [r4, #4]
 800c614:	19bb      	adds	r3, r7, r6
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	19ba      	adds	r2, r7, r6
 800c61c:	4293      	cmp	r3, r2
 800c61e:	da00      	bge.n	800c622 <__multiply+0x2a>
 800c620:	3101      	adds	r1, #1
 800c622:	f7ff fed5 	bl	800c3d0 <_Balloc>
 800c626:	4684      	mov	ip, r0
 800c628:	2800      	cmp	r0, #0
 800c62a:	d106      	bne.n	800c63a <__multiply+0x42>
 800c62c:	21b1      	movs	r1, #177	@ 0xb1
 800c62e:	4662      	mov	r2, ip
 800c630:	4b44      	ldr	r3, [pc, #272]	@ (800c744 <__multiply+0x14c>)
 800c632:	4845      	ldr	r0, [pc, #276]	@ (800c748 <__multiply+0x150>)
 800c634:	0049      	lsls	r1, r1, #1
 800c636:	f000 fc9b 	bl	800cf70 <__assert_func>
 800c63a:	0002      	movs	r2, r0
 800c63c:	19bb      	adds	r3, r7, r6
 800c63e:	3214      	adds	r2, #20
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	18d3      	adds	r3, r2, r3
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	2100      	movs	r1, #0
 800c648:	0013      	movs	r3, r2
 800c64a:	9801      	ldr	r0, [sp, #4]
 800c64c:	4283      	cmp	r3, r0
 800c64e:	d328      	bcc.n	800c6a2 <__multiply+0xaa>
 800c650:	0023      	movs	r3, r4
 800c652:	00bf      	lsls	r7, r7, #2
 800c654:	3314      	adds	r3, #20
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	3514      	adds	r5, #20
 800c65a:	19db      	adds	r3, r3, r7
 800c65c:	00b6      	lsls	r6, r6, #2
 800c65e:	9302      	str	r3, [sp, #8]
 800c660:	19ab      	adds	r3, r5, r6
 800c662:	9307      	str	r3, [sp, #28]
 800c664:	2304      	movs	r3, #4
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	0023      	movs	r3, r4
 800c66a:	9902      	ldr	r1, [sp, #8]
 800c66c:	3315      	adds	r3, #21
 800c66e:	4299      	cmp	r1, r3
 800c670:	d305      	bcc.n	800c67e <__multiply+0x86>
 800c672:	1b0c      	subs	r4, r1, r4
 800c674:	3c15      	subs	r4, #21
 800c676:	08a4      	lsrs	r4, r4, #2
 800c678:	3401      	adds	r4, #1
 800c67a:	00a3      	lsls	r3, r4, #2
 800c67c:	9305      	str	r3, [sp, #20]
 800c67e:	9b07      	ldr	r3, [sp, #28]
 800c680:	429d      	cmp	r5, r3
 800c682:	d310      	bcc.n	800c6a6 <__multiply+0xae>
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd05      	ble.n	800c696 <__multiply+0x9e>
 800c68a:	9b01      	ldr	r3, [sp, #4]
 800c68c:	3b04      	subs	r3, #4
 800c68e:	9301      	str	r3, [sp, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d052      	beq.n	800c73c <__multiply+0x144>
 800c696:	4663      	mov	r3, ip
 800c698:	4660      	mov	r0, ip
 800c69a:	9a00      	ldr	r2, [sp, #0]
 800c69c:	611a      	str	r2, [r3, #16]
 800c69e:	b009      	add	sp, #36	@ 0x24
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a2:	c302      	stmia	r3!, {r1}
 800c6a4:	e7d1      	b.n	800c64a <__multiply+0x52>
 800c6a6:	682c      	ldr	r4, [r5, #0]
 800c6a8:	b2a4      	uxth	r4, r4
 800c6aa:	2c00      	cmp	r4, #0
 800c6ac:	d01f      	beq.n	800c6ee <__multiply+0xf6>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	0017      	movs	r7, r2
 800c6b2:	9e04      	ldr	r6, [sp, #16]
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	ce08      	ldmia	r6!, {r3}
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	9306      	str	r3, [sp, #24]
 800c6bc:	466b      	mov	r3, sp
 800c6be:	8b1b      	ldrh	r3, [r3, #24]
 800c6c0:	b288      	uxth	r0, r1
 800c6c2:	4363      	muls	r3, r4
 800c6c4:	181b      	adds	r3, r3, r0
 800c6c6:	9803      	ldr	r0, [sp, #12]
 800c6c8:	0c09      	lsrs	r1, r1, #16
 800c6ca:	181b      	adds	r3, r3, r0
 800c6cc:	9806      	ldr	r0, [sp, #24]
 800c6ce:	0c00      	lsrs	r0, r0, #16
 800c6d0:	4360      	muls	r0, r4
 800c6d2:	1840      	adds	r0, r0, r1
 800c6d4:	0c19      	lsrs	r1, r3, #16
 800c6d6:	1841      	adds	r1, r0, r1
 800c6d8:	0c08      	lsrs	r0, r1, #16
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	0409      	lsls	r1, r1, #16
 800c6de:	4319      	orrs	r1, r3
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	9003      	str	r0, [sp, #12]
 800c6e4:	c702      	stmia	r7!, {r1}
 800c6e6:	42b3      	cmp	r3, r6
 800c6e8:	d8e5      	bhi.n	800c6b6 <__multiply+0xbe>
 800c6ea:	9b05      	ldr	r3, [sp, #20]
 800c6ec:	50d0      	str	r0, [r2, r3]
 800c6ee:	682c      	ldr	r4, [r5, #0]
 800c6f0:	0c24      	lsrs	r4, r4, #16
 800c6f2:	d020      	beq.n	800c736 <__multiply+0x13e>
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	0010      	movs	r0, r2
 800c6f8:	6813      	ldr	r3, [r2, #0]
 800c6fa:	9e04      	ldr	r6, [sp, #16]
 800c6fc:	9103      	str	r1, [sp, #12]
 800c6fe:	6831      	ldr	r1, [r6, #0]
 800c700:	6807      	ldr	r7, [r0, #0]
 800c702:	b289      	uxth	r1, r1
 800c704:	4361      	muls	r1, r4
 800c706:	0c3f      	lsrs	r7, r7, #16
 800c708:	19c9      	adds	r1, r1, r7
 800c70a:	9f03      	ldr	r7, [sp, #12]
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	19c9      	adds	r1, r1, r7
 800c710:	040f      	lsls	r7, r1, #16
 800c712:	431f      	orrs	r7, r3
 800c714:	6007      	str	r7, [r0, #0]
 800c716:	ce80      	ldmia	r6!, {r7}
 800c718:	6843      	ldr	r3, [r0, #4]
 800c71a:	0c3f      	lsrs	r7, r7, #16
 800c71c:	4367      	muls	r7, r4
 800c71e:	b29b      	uxth	r3, r3
 800c720:	0c09      	lsrs	r1, r1, #16
 800c722:	18fb      	adds	r3, r7, r3
 800c724:	185b      	adds	r3, r3, r1
 800c726:	0c19      	lsrs	r1, r3, #16
 800c728:	9103      	str	r1, [sp, #12]
 800c72a:	9902      	ldr	r1, [sp, #8]
 800c72c:	3004      	adds	r0, #4
 800c72e:	42b1      	cmp	r1, r6
 800c730:	d8e5      	bhi.n	800c6fe <__multiply+0x106>
 800c732:	9905      	ldr	r1, [sp, #20]
 800c734:	5053      	str	r3, [r2, r1]
 800c736:	3504      	adds	r5, #4
 800c738:	3204      	adds	r2, #4
 800c73a:	e7a0      	b.n	800c67e <__multiply+0x86>
 800c73c:	9b00      	ldr	r3, [sp, #0]
 800c73e:	3b01      	subs	r3, #1
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	e79f      	b.n	800c684 <__multiply+0x8c>
 800c744:	0800e620 	.word	0x0800e620
 800c748:	0800e631 	.word	0x0800e631

0800c74c <__pow5mult>:
 800c74c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c74e:	2303      	movs	r3, #3
 800c750:	0015      	movs	r5, r2
 800c752:	0007      	movs	r7, r0
 800c754:	000e      	movs	r6, r1
 800c756:	401a      	ands	r2, r3
 800c758:	421d      	tst	r5, r3
 800c75a:	d008      	beq.n	800c76e <__pow5mult+0x22>
 800c75c:	4925      	ldr	r1, [pc, #148]	@ (800c7f4 <__pow5mult+0xa8>)
 800c75e:	3a01      	subs	r2, #1
 800c760:	0092      	lsls	r2, r2, #2
 800c762:	5852      	ldr	r2, [r2, r1]
 800c764:	2300      	movs	r3, #0
 800c766:	0031      	movs	r1, r6
 800c768:	f7ff fe9a 	bl	800c4a0 <__multadd>
 800c76c:	0006      	movs	r6, r0
 800c76e:	10ad      	asrs	r5, r5, #2
 800c770:	d03d      	beq.n	800c7ee <__pow5mult+0xa2>
 800c772:	69fc      	ldr	r4, [r7, #28]
 800c774:	2c00      	cmp	r4, #0
 800c776:	d10f      	bne.n	800c798 <__pow5mult+0x4c>
 800c778:	2010      	movs	r0, #16
 800c77a:	f7ff fd6d 	bl	800c258 <malloc>
 800c77e:	1e02      	subs	r2, r0, #0
 800c780:	61f8      	str	r0, [r7, #28]
 800c782:	d105      	bne.n	800c790 <__pow5mult+0x44>
 800c784:	21b4      	movs	r1, #180	@ 0xb4
 800c786:	4b1c      	ldr	r3, [pc, #112]	@ (800c7f8 <__pow5mult+0xac>)
 800c788:	481c      	ldr	r0, [pc, #112]	@ (800c7fc <__pow5mult+0xb0>)
 800c78a:	31ff      	adds	r1, #255	@ 0xff
 800c78c:	f000 fbf0 	bl	800cf70 <__assert_func>
 800c790:	6044      	str	r4, [r0, #4]
 800c792:	6084      	str	r4, [r0, #8]
 800c794:	6004      	str	r4, [r0, #0]
 800c796:	60c4      	str	r4, [r0, #12]
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	689c      	ldr	r4, [r3, #8]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	2c00      	cmp	r4, #0
 800c7a0:	d108      	bne.n	800c7b4 <__pow5mult+0x68>
 800c7a2:	0038      	movs	r0, r7
 800c7a4:	4916      	ldr	r1, [pc, #88]	@ (800c800 <__pow5mult+0xb4>)
 800c7a6:	f7ff ff0f 	bl	800c5c8 <__i2b>
 800c7aa:	9b01      	ldr	r3, [sp, #4]
 800c7ac:	0004      	movs	r4, r0
 800c7ae:	6098      	str	r0, [r3, #8]
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	6003      	str	r3, [r0, #0]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	421d      	tst	r5, r3
 800c7b8:	d00a      	beq.n	800c7d0 <__pow5mult+0x84>
 800c7ba:	0031      	movs	r1, r6
 800c7bc:	0022      	movs	r2, r4
 800c7be:	0038      	movs	r0, r7
 800c7c0:	f7ff ff1a 	bl	800c5f8 <__multiply>
 800c7c4:	0031      	movs	r1, r6
 800c7c6:	9001      	str	r0, [sp, #4]
 800c7c8:	0038      	movs	r0, r7
 800c7ca:	f7ff fe45 	bl	800c458 <_Bfree>
 800c7ce:	9e01      	ldr	r6, [sp, #4]
 800c7d0:	106d      	asrs	r5, r5, #1
 800c7d2:	d00c      	beq.n	800c7ee <__pow5mult+0xa2>
 800c7d4:	6820      	ldr	r0, [r4, #0]
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d107      	bne.n	800c7ea <__pow5mult+0x9e>
 800c7da:	0022      	movs	r2, r4
 800c7dc:	0021      	movs	r1, r4
 800c7de:	0038      	movs	r0, r7
 800c7e0:	f7ff ff0a 	bl	800c5f8 <__multiply>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	6020      	str	r0, [r4, #0]
 800c7e8:	6003      	str	r3, [r0, #0]
 800c7ea:	0004      	movs	r4, r0
 800c7ec:	e7e2      	b.n	800c7b4 <__pow5mult+0x68>
 800c7ee:	0030      	movs	r0, r6
 800c7f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7f2:	46c0      	nop			@ (mov r8, r8)
 800c7f4:	0800e6e4 	.word	0x0800e6e4
 800c7f8:	0800e5b1 	.word	0x0800e5b1
 800c7fc:	0800e631 	.word	0x0800e631
 800c800:	00000271 	.word	0x00000271

0800c804 <__lshift>:
 800c804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c806:	000c      	movs	r4, r1
 800c808:	0016      	movs	r6, r2
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	1157      	asrs	r7, r2, #5
 800c80e:	b085      	sub	sp, #20
 800c810:	18fb      	adds	r3, r7, r3
 800c812:	9301      	str	r3, [sp, #4]
 800c814:	3301      	adds	r3, #1
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	6849      	ldr	r1, [r1, #4]
 800c81a:	68a3      	ldr	r3, [r4, #8]
 800c81c:	9002      	str	r0, [sp, #8]
 800c81e:	9a00      	ldr	r2, [sp, #0]
 800c820:	4293      	cmp	r3, r2
 800c822:	db10      	blt.n	800c846 <__lshift+0x42>
 800c824:	9802      	ldr	r0, [sp, #8]
 800c826:	f7ff fdd3 	bl	800c3d0 <_Balloc>
 800c82a:	2300      	movs	r3, #0
 800c82c:	0001      	movs	r1, r0
 800c82e:	0005      	movs	r5, r0
 800c830:	001a      	movs	r2, r3
 800c832:	3114      	adds	r1, #20
 800c834:	4298      	cmp	r0, r3
 800c836:	d10c      	bne.n	800c852 <__lshift+0x4e>
 800c838:	21ef      	movs	r1, #239	@ 0xef
 800c83a:	002a      	movs	r2, r5
 800c83c:	4b25      	ldr	r3, [pc, #148]	@ (800c8d4 <__lshift+0xd0>)
 800c83e:	4826      	ldr	r0, [pc, #152]	@ (800c8d8 <__lshift+0xd4>)
 800c840:	0049      	lsls	r1, r1, #1
 800c842:	f000 fb95 	bl	800cf70 <__assert_func>
 800c846:	3101      	adds	r1, #1
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	e7e8      	b.n	800c81e <__lshift+0x1a>
 800c84c:	0098      	lsls	r0, r3, #2
 800c84e:	500a      	str	r2, [r1, r0]
 800c850:	3301      	adds	r3, #1
 800c852:	42bb      	cmp	r3, r7
 800c854:	dbfa      	blt.n	800c84c <__lshift+0x48>
 800c856:	43fb      	mvns	r3, r7
 800c858:	17db      	asrs	r3, r3, #31
 800c85a:	401f      	ands	r7, r3
 800c85c:	00bf      	lsls	r7, r7, #2
 800c85e:	0023      	movs	r3, r4
 800c860:	201f      	movs	r0, #31
 800c862:	19c9      	adds	r1, r1, r7
 800c864:	0037      	movs	r7, r6
 800c866:	6922      	ldr	r2, [r4, #16]
 800c868:	3314      	adds	r3, #20
 800c86a:	0092      	lsls	r2, r2, #2
 800c86c:	189a      	adds	r2, r3, r2
 800c86e:	4007      	ands	r7, r0
 800c870:	4206      	tst	r6, r0
 800c872:	d029      	beq.n	800c8c8 <__lshift+0xc4>
 800c874:	3001      	adds	r0, #1
 800c876:	1bc0      	subs	r0, r0, r7
 800c878:	9003      	str	r0, [sp, #12]
 800c87a:	468c      	mov	ip, r1
 800c87c:	2000      	movs	r0, #0
 800c87e:	681e      	ldr	r6, [r3, #0]
 800c880:	40be      	lsls	r6, r7
 800c882:	4306      	orrs	r6, r0
 800c884:	4660      	mov	r0, ip
 800c886:	c040      	stmia	r0!, {r6}
 800c888:	4684      	mov	ip, r0
 800c88a:	9e03      	ldr	r6, [sp, #12]
 800c88c:	cb01      	ldmia	r3!, {r0}
 800c88e:	40f0      	lsrs	r0, r6
 800c890:	429a      	cmp	r2, r3
 800c892:	d8f4      	bhi.n	800c87e <__lshift+0x7a>
 800c894:	0026      	movs	r6, r4
 800c896:	3615      	adds	r6, #21
 800c898:	2304      	movs	r3, #4
 800c89a:	42b2      	cmp	r2, r6
 800c89c:	d304      	bcc.n	800c8a8 <__lshift+0xa4>
 800c89e:	1b13      	subs	r3, r2, r4
 800c8a0:	3b15      	subs	r3, #21
 800c8a2:	089b      	lsrs	r3, r3, #2
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	50c8      	str	r0, [r1, r3]
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d002      	beq.n	800c8b4 <__lshift+0xb0>
 800c8ae:	9b01      	ldr	r3, [sp, #4]
 800c8b0:	3302      	adds	r3, #2
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	9b00      	ldr	r3, [sp, #0]
 800c8b6:	9802      	ldr	r0, [sp, #8]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	0021      	movs	r1, r4
 800c8bc:	612b      	str	r3, [r5, #16]
 800c8be:	f7ff fdcb 	bl	800c458 <_Bfree>
 800c8c2:	0028      	movs	r0, r5
 800c8c4:	b005      	add	sp, #20
 800c8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c8:	cb01      	ldmia	r3!, {r0}
 800c8ca:	c101      	stmia	r1!, {r0}
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d8fb      	bhi.n	800c8c8 <__lshift+0xc4>
 800c8d0:	e7f0      	b.n	800c8b4 <__lshift+0xb0>
 800c8d2:	46c0      	nop			@ (mov r8, r8)
 800c8d4:	0800e620 	.word	0x0800e620
 800c8d8:	0800e631 	.word	0x0800e631

0800c8dc <__mcmp>:
 800c8dc:	b530      	push	{r4, r5, lr}
 800c8de:	690b      	ldr	r3, [r1, #16]
 800c8e0:	6904      	ldr	r4, [r0, #16]
 800c8e2:	0002      	movs	r2, r0
 800c8e4:	1ae0      	subs	r0, r4, r3
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	d10f      	bne.n	800c90a <__mcmp+0x2e>
 800c8ea:	3214      	adds	r2, #20
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	3114      	adds	r1, #20
 800c8f0:	0014      	movs	r4, r2
 800c8f2:	18c9      	adds	r1, r1, r3
 800c8f4:	18d2      	adds	r2, r2, r3
 800c8f6:	3a04      	subs	r2, #4
 800c8f8:	3904      	subs	r1, #4
 800c8fa:	6815      	ldr	r5, [r2, #0]
 800c8fc:	680b      	ldr	r3, [r1, #0]
 800c8fe:	429d      	cmp	r5, r3
 800c900:	d004      	beq.n	800c90c <__mcmp+0x30>
 800c902:	2001      	movs	r0, #1
 800c904:	429d      	cmp	r5, r3
 800c906:	d200      	bcs.n	800c90a <__mcmp+0x2e>
 800c908:	3802      	subs	r0, #2
 800c90a:	bd30      	pop	{r4, r5, pc}
 800c90c:	4294      	cmp	r4, r2
 800c90e:	d3f2      	bcc.n	800c8f6 <__mcmp+0x1a>
 800c910:	e7fb      	b.n	800c90a <__mcmp+0x2e>
	...

0800c914 <__mdiff>:
 800c914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c916:	000c      	movs	r4, r1
 800c918:	b087      	sub	sp, #28
 800c91a:	9000      	str	r0, [sp, #0]
 800c91c:	0011      	movs	r1, r2
 800c91e:	0020      	movs	r0, r4
 800c920:	0017      	movs	r7, r2
 800c922:	f7ff ffdb 	bl	800c8dc <__mcmp>
 800c926:	1e05      	subs	r5, r0, #0
 800c928:	d110      	bne.n	800c94c <__mdiff+0x38>
 800c92a:	0001      	movs	r1, r0
 800c92c:	9800      	ldr	r0, [sp, #0]
 800c92e:	f7ff fd4f 	bl	800c3d0 <_Balloc>
 800c932:	1e02      	subs	r2, r0, #0
 800c934:	d104      	bne.n	800c940 <__mdiff+0x2c>
 800c936:	4b40      	ldr	r3, [pc, #256]	@ (800ca38 <__mdiff+0x124>)
 800c938:	4840      	ldr	r0, [pc, #256]	@ (800ca3c <__mdiff+0x128>)
 800c93a:	4941      	ldr	r1, [pc, #260]	@ (800ca40 <__mdiff+0x12c>)
 800c93c:	f000 fb18 	bl	800cf70 <__assert_func>
 800c940:	2301      	movs	r3, #1
 800c942:	6145      	str	r5, [r0, #20]
 800c944:	6103      	str	r3, [r0, #16]
 800c946:	0010      	movs	r0, r2
 800c948:	b007      	add	sp, #28
 800c94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c94c:	2600      	movs	r6, #0
 800c94e:	42b0      	cmp	r0, r6
 800c950:	da03      	bge.n	800c95a <__mdiff+0x46>
 800c952:	0023      	movs	r3, r4
 800c954:	003c      	movs	r4, r7
 800c956:	001f      	movs	r7, r3
 800c958:	3601      	adds	r6, #1
 800c95a:	6861      	ldr	r1, [r4, #4]
 800c95c:	9800      	ldr	r0, [sp, #0]
 800c95e:	f7ff fd37 	bl	800c3d0 <_Balloc>
 800c962:	1e02      	subs	r2, r0, #0
 800c964:	d103      	bne.n	800c96e <__mdiff+0x5a>
 800c966:	4b34      	ldr	r3, [pc, #208]	@ (800ca38 <__mdiff+0x124>)
 800c968:	4834      	ldr	r0, [pc, #208]	@ (800ca3c <__mdiff+0x128>)
 800c96a:	4936      	ldr	r1, [pc, #216]	@ (800ca44 <__mdiff+0x130>)
 800c96c:	e7e6      	b.n	800c93c <__mdiff+0x28>
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	3414      	adds	r4, #20
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	18e3      	adds	r3, r4, r3
 800c978:	0021      	movs	r1, r4
 800c97a:	9401      	str	r4, [sp, #4]
 800c97c:	003c      	movs	r4, r7
 800c97e:	9302      	str	r3, [sp, #8]
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	3414      	adds	r4, #20
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	18e3      	adds	r3, r4, r3
 800c988:	9303      	str	r3, [sp, #12]
 800c98a:	0003      	movs	r3, r0
 800c98c:	60c6      	str	r6, [r0, #12]
 800c98e:	468c      	mov	ip, r1
 800c990:	2000      	movs	r0, #0
 800c992:	3314      	adds	r3, #20
 800c994:	9304      	str	r3, [sp, #16]
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	4663      	mov	r3, ip
 800c99a:	cb20      	ldmia	r3!, {r5}
 800c99c:	b2a9      	uxth	r1, r5
 800c99e:	000e      	movs	r6, r1
 800c9a0:	469c      	mov	ip, r3
 800c9a2:	cc08      	ldmia	r4!, {r3}
 800c9a4:	0c2d      	lsrs	r5, r5, #16
 800c9a6:	b299      	uxth	r1, r3
 800c9a8:	1a71      	subs	r1, r6, r1
 800c9aa:	1809      	adds	r1, r1, r0
 800c9ac:	0c1b      	lsrs	r3, r3, #16
 800c9ae:	1408      	asrs	r0, r1, #16
 800c9b0:	1aeb      	subs	r3, r5, r3
 800c9b2:	181b      	adds	r3, r3, r0
 800c9b4:	1418      	asrs	r0, r3, #16
 800c9b6:	b289      	uxth	r1, r1
 800c9b8:	041b      	lsls	r3, r3, #16
 800c9ba:	4319      	orrs	r1, r3
 800c9bc:	9b05      	ldr	r3, [sp, #20]
 800c9be:	c302      	stmia	r3!, {r1}
 800c9c0:	9305      	str	r3, [sp, #20]
 800c9c2:	9b03      	ldr	r3, [sp, #12]
 800c9c4:	42a3      	cmp	r3, r4
 800c9c6:	d8e7      	bhi.n	800c998 <__mdiff+0x84>
 800c9c8:	0039      	movs	r1, r7
 800c9ca:	9c03      	ldr	r4, [sp, #12]
 800c9cc:	3115      	adds	r1, #21
 800c9ce:	2304      	movs	r3, #4
 800c9d0:	428c      	cmp	r4, r1
 800c9d2:	d304      	bcc.n	800c9de <__mdiff+0xca>
 800c9d4:	1be3      	subs	r3, r4, r7
 800c9d6:	3b15      	subs	r3, #21
 800c9d8:	089b      	lsrs	r3, r3, #2
 800c9da:	3301      	adds	r3, #1
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	9901      	ldr	r1, [sp, #4]
 800c9e0:	18cd      	adds	r5, r1, r3
 800c9e2:	9904      	ldr	r1, [sp, #16]
 800c9e4:	002e      	movs	r6, r5
 800c9e6:	18cb      	adds	r3, r1, r3
 800c9e8:	001f      	movs	r7, r3
 800c9ea:	9902      	ldr	r1, [sp, #8]
 800c9ec:	428e      	cmp	r6, r1
 800c9ee:	d311      	bcc.n	800ca14 <__mdiff+0x100>
 800c9f0:	9c02      	ldr	r4, [sp, #8]
 800c9f2:	1ee9      	subs	r1, r5, #3
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	428c      	cmp	r4, r1
 800c9f8:	d304      	bcc.n	800ca04 <__mdiff+0xf0>
 800c9fa:	0021      	movs	r1, r4
 800c9fc:	3103      	adds	r1, #3
 800c9fe:	1b49      	subs	r1, r1, r5
 800ca00:	0889      	lsrs	r1, r1, #2
 800ca02:	0088      	lsls	r0, r1, #2
 800ca04:	181b      	adds	r3, r3, r0
 800ca06:	3b04      	subs	r3, #4
 800ca08:	6819      	ldr	r1, [r3, #0]
 800ca0a:	2900      	cmp	r1, #0
 800ca0c:	d010      	beq.n	800ca30 <__mdiff+0x11c>
 800ca0e:	9b00      	ldr	r3, [sp, #0]
 800ca10:	6113      	str	r3, [r2, #16]
 800ca12:	e798      	b.n	800c946 <__mdiff+0x32>
 800ca14:	4684      	mov	ip, r0
 800ca16:	ce02      	ldmia	r6!, {r1}
 800ca18:	b288      	uxth	r0, r1
 800ca1a:	4460      	add	r0, ip
 800ca1c:	1400      	asrs	r0, r0, #16
 800ca1e:	0c0c      	lsrs	r4, r1, #16
 800ca20:	1904      	adds	r4, r0, r4
 800ca22:	4461      	add	r1, ip
 800ca24:	1420      	asrs	r0, r4, #16
 800ca26:	b289      	uxth	r1, r1
 800ca28:	0424      	lsls	r4, r4, #16
 800ca2a:	4321      	orrs	r1, r4
 800ca2c:	c702      	stmia	r7!, {r1}
 800ca2e:	e7dc      	b.n	800c9ea <__mdiff+0xd6>
 800ca30:	9900      	ldr	r1, [sp, #0]
 800ca32:	3901      	subs	r1, #1
 800ca34:	9100      	str	r1, [sp, #0]
 800ca36:	e7e6      	b.n	800ca06 <__mdiff+0xf2>
 800ca38:	0800e620 	.word	0x0800e620
 800ca3c:	0800e631 	.word	0x0800e631
 800ca40:	00000237 	.word	0x00000237
 800ca44:	00000245 	.word	0x00000245

0800ca48 <__d2b>:
 800ca48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	0016      	movs	r6, r2
 800ca4e:	001f      	movs	r7, r3
 800ca50:	f7ff fcbe 	bl	800c3d0 <_Balloc>
 800ca54:	1e04      	subs	r4, r0, #0
 800ca56:	d105      	bne.n	800ca64 <__d2b+0x1c>
 800ca58:	0022      	movs	r2, r4
 800ca5a:	4b25      	ldr	r3, [pc, #148]	@ (800caf0 <__d2b+0xa8>)
 800ca5c:	4825      	ldr	r0, [pc, #148]	@ (800caf4 <__d2b+0xac>)
 800ca5e:	4926      	ldr	r1, [pc, #152]	@ (800caf8 <__d2b+0xb0>)
 800ca60:	f000 fa86 	bl	800cf70 <__assert_func>
 800ca64:	033b      	lsls	r3, r7, #12
 800ca66:	007d      	lsls	r5, r7, #1
 800ca68:	0b1b      	lsrs	r3, r3, #12
 800ca6a:	0d6d      	lsrs	r5, r5, #21
 800ca6c:	d002      	beq.n	800ca74 <__d2b+0x2c>
 800ca6e:	2280      	movs	r2, #128	@ 0x80
 800ca70:	0352      	lsls	r2, r2, #13
 800ca72:	4313      	orrs	r3, r2
 800ca74:	9301      	str	r3, [sp, #4]
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	d025      	beq.n	800cac6 <__d2b+0x7e>
 800ca7a:	4668      	mov	r0, sp
 800ca7c:	9600      	str	r6, [sp, #0]
 800ca7e:	f7ff fd74 	bl	800c56a <__lo0bits>
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	9900      	ldr	r1, [sp, #0]
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d01b      	beq.n	800cac2 <__d2b+0x7a>
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	001e      	movs	r6, r3
 800ca8e:	1a12      	subs	r2, r2, r0
 800ca90:	4096      	lsls	r6, r2
 800ca92:	0032      	movs	r2, r6
 800ca94:	40c3      	lsrs	r3, r0
 800ca96:	430a      	orrs	r2, r1
 800ca98:	6162      	str	r2, [r4, #20]
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	9e01      	ldr	r6, [sp, #4]
 800ca9e:	61a6      	str	r6, [r4, #24]
 800caa0:	1e73      	subs	r3, r6, #1
 800caa2:	419e      	sbcs	r6, r3
 800caa4:	3601      	adds	r6, #1
 800caa6:	6126      	str	r6, [r4, #16]
 800caa8:	2d00      	cmp	r5, #0
 800caaa:	d014      	beq.n	800cad6 <__d2b+0x8e>
 800caac:	2635      	movs	r6, #53	@ 0x35
 800caae:	4b13      	ldr	r3, [pc, #76]	@ (800cafc <__d2b+0xb4>)
 800cab0:	18ed      	adds	r5, r5, r3
 800cab2:	9b08      	ldr	r3, [sp, #32]
 800cab4:	182d      	adds	r5, r5, r0
 800cab6:	601d      	str	r5, [r3, #0]
 800cab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caba:	1a36      	subs	r6, r6, r0
 800cabc:	601e      	str	r6, [r3, #0]
 800cabe:	0020      	movs	r0, r4
 800cac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cac2:	6161      	str	r1, [r4, #20]
 800cac4:	e7ea      	b.n	800ca9c <__d2b+0x54>
 800cac6:	a801      	add	r0, sp, #4
 800cac8:	f7ff fd4f 	bl	800c56a <__lo0bits>
 800cacc:	9b01      	ldr	r3, [sp, #4]
 800cace:	2601      	movs	r6, #1
 800cad0:	6163      	str	r3, [r4, #20]
 800cad2:	3020      	adds	r0, #32
 800cad4:	e7e7      	b.n	800caa6 <__d2b+0x5e>
 800cad6:	4b0a      	ldr	r3, [pc, #40]	@ (800cb00 <__d2b+0xb8>)
 800cad8:	18c0      	adds	r0, r0, r3
 800cada:	9b08      	ldr	r3, [sp, #32]
 800cadc:	6018      	str	r0, [r3, #0]
 800cade:	4b09      	ldr	r3, [pc, #36]	@ (800cb04 <__d2b+0xbc>)
 800cae0:	18f3      	adds	r3, r6, r3
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	18e3      	adds	r3, r4, r3
 800cae6:	6958      	ldr	r0, [r3, #20]
 800cae8:	f7ff fd1e 	bl	800c528 <__hi0bits>
 800caec:	0176      	lsls	r6, r6, #5
 800caee:	e7e3      	b.n	800cab8 <__d2b+0x70>
 800caf0:	0800e620 	.word	0x0800e620
 800caf4:	0800e631 	.word	0x0800e631
 800caf8:	0000030f 	.word	0x0000030f
 800cafc:	fffffbcd 	.word	0xfffffbcd
 800cb00:	fffffbce 	.word	0xfffffbce
 800cb04:	3fffffff 	.word	0x3fffffff

0800cb08 <__ssputs_r>:
 800cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0a:	688e      	ldr	r6, [r1, #8]
 800cb0c:	b085      	sub	sp, #20
 800cb0e:	001f      	movs	r7, r3
 800cb10:	000c      	movs	r4, r1
 800cb12:	680b      	ldr	r3, [r1, #0]
 800cb14:	9002      	str	r0, [sp, #8]
 800cb16:	9203      	str	r2, [sp, #12]
 800cb18:	42be      	cmp	r6, r7
 800cb1a:	d830      	bhi.n	800cb7e <__ssputs_r+0x76>
 800cb1c:	210c      	movs	r1, #12
 800cb1e:	5e62      	ldrsh	r2, [r4, r1]
 800cb20:	2190      	movs	r1, #144	@ 0x90
 800cb22:	00c9      	lsls	r1, r1, #3
 800cb24:	420a      	tst	r2, r1
 800cb26:	d028      	beq.n	800cb7a <__ssputs_r+0x72>
 800cb28:	2003      	movs	r0, #3
 800cb2a:	6921      	ldr	r1, [r4, #16]
 800cb2c:	1a5b      	subs	r3, r3, r1
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	6963      	ldr	r3, [r4, #20]
 800cb32:	4343      	muls	r3, r0
 800cb34:	9801      	ldr	r0, [sp, #4]
 800cb36:	0fdd      	lsrs	r5, r3, #31
 800cb38:	18ed      	adds	r5, r5, r3
 800cb3a:	1c7b      	adds	r3, r7, #1
 800cb3c:	181b      	adds	r3, r3, r0
 800cb3e:	106d      	asrs	r5, r5, #1
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	d900      	bls.n	800cb46 <__ssputs_r+0x3e>
 800cb44:	001d      	movs	r5, r3
 800cb46:	0552      	lsls	r2, r2, #21
 800cb48:	d528      	bpl.n	800cb9c <__ssputs_r+0x94>
 800cb4a:	0029      	movs	r1, r5
 800cb4c:	9802      	ldr	r0, [sp, #8]
 800cb4e:	f7ff fbaf 	bl	800c2b0 <_malloc_r>
 800cb52:	1e06      	subs	r6, r0, #0
 800cb54:	d02c      	beq.n	800cbb0 <__ssputs_r+0xa8>
 800cb56:	9a01      	ldr	r2, [sp, #4]
 800cb58:	6921      	ldr	r1, [r4, #16]
 800cb5a:	f7fe fcb5 	bl	800b4c8 <memcpy>
 800cb5e:	89a2      	ldrh	r2, [r4, #12]
 800cb60:	4b18      	ldr	r3, [pc, #96]	@ (800cbc4 <__ssputs_r+0xbc>)
 800cb62:	401a      	ands	r2, r3
 800cb64:	2380      	movs	r3, #128	@ 0x80
 800cb66:	4313      	orrs	r3, r2
 800cb68:	81a3      	strh	r3, [r4, #12]
 800cb6a:	9b01      	ldr	r3, [sp, #4]
 800cb6c:	6126      	str	r6, [r4, #16]
 800cb6e:	18f6      	adds	r6, r6, r3
 800cb70:	6026      	str	r6, [r4, #0]
 800cb72:	003e      	movs	r6, r7
 800cb74:	6165      	str	r5, [r4, #20]
 800cb76:	1aed      	subs	r5, r5, r3
 800cb78:	60a5      	str	r5, [r4, #8]
 800cb7a:	42be      	cmp	r6, r7
 800cb7c:	d900      	bls.n	800cb80 <__ssputs_r+0x78>
 800cb7e:	003e      	movs	r6, r7
 800cb80:	0032      	movs	r2, r6
 800cb82:	9903      	ldr	r1, [sp, #12]
 800cb84:	6820      	ldr	r0, [r4, #0]
 800cb86:	f000 f9ce 	bl	800cf26 <memmove>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	68a3      	ldr	r3, [r4, #8]
 800cb8e:	1b9b      	subs	r3, r3, r6
 800cb90:	60a3      	str	r3, [r4, #8]
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	199b      	adds	r3, r3, r6
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	b005      	add	sp, #20
 800cb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb9c:	002a      	movs	r2, r5
 800cb9e:	9802      	ldr	r0, [sp, #8]
 800cba0:	f000 fa43 	bl	800d02a <_realloc_r>
 800cba4:	1e06      	subs	r6, r0, #0
 800cba6:	d1e0      	bne.n	800cb6a <__ssputs_r+0x62>
 800cba8:	6921      	ldr	r1, [r4, #16]
 800cbaa:	9802      	ldr	r0, [sp, #8]
 800cbac:	f7ff fb0a 	bl	800c1c4 <_free_r>
 800cbb0:	230c      	movs	r3, #12
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	9a02      	ldr	r2, [sp, #8]
 800cbb6:	4240      	negs	r0, r0
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	89a2      	ldrh	r2, [r4, #12]
 800cbbc:	3334      	adds	r3, #52	@ 0x34
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	e7e9      	b.n	800cb98 <__ssputs_r+0x90>
 800cbc4:	fffffb7f 	.word	0xfffffb7f

0800cbc8 <_svfiprintf_r>:
 800cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbca:	b0a1      	sub	sp, #132	@ 0x84
 800cbcc:	9003      	str	r0, [sp, #12]
 800cbce:	001d      	movs	r5, r3
 800cbd0:	898b      	ldrh	r3, [r1, #12]
 800cbd2:	000f      	movs	r7, r1
 800cbd4:	0016      	movs	r6, r2
 800cbd6:	061b      	lsls	r3, r3, #24
 800cbd8:	d511      	bpl.n	800cbfe <_svfiprintf_r+0x36>
 800cbda:	690b      	ldr	r3, [r1, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10e      	bne.n	800cbfe <_svfiprintf_r+0x36>
 800cbe0:	2140      	movs	r1, #64	@ 0x40
 800cbe2:	f7ff fb65 	bl	800c2b0 <_malloc_r>
 800cbe6:	6038      	str	r0, [r7, #0]
 800cbe8:	6138      	str	r0, [r7, #16]
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d105      	bne.n	800cbfa <_svfiprintf_r+0x32>
 800cbee:	230c      	movs	r3, #12
 800cbf0:	9a03      	ldr	r2, [sp, #12]
 800cbf2:	6013      	str	r3, [r2, #0]
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	4240      	negs	r0, r0
 800cbf8:	e0cf      	b.n	800cd9a <_svfiprintf_r+0x1d2>
 800cbfa:	2340      	movs	r3, #64	@ 0x40
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	ac08      	add	r4, sp, #32
 800cc02:	6163      	str	r3, [r4, #20]
 800cc04:	3320      	adds	r3, #32
 800cc06:	7663      	strb	r3, [r4, #25]
 800cc08:	3310      	adds	r3, #16
 800cc0a:	76a3      	strb	r3, [r4, #26]
 800cc0c:	9507      	str	r5, [sp, #28]
 800cc0e:	0035      	movs	r5, r6
 800cc10:	782b      	ldrb	r3, [r5, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d001      	beq.n	800cc1a <_svfiprintf_r+0x52>
 800cc16:	2b25      	cmp	r3, #37	@ 0x25
 800cc18:	d148      	bne.n	800ccac <_svfiprintf_r+0xe4>
 800cc1a:	1bab      	subs	r3, r5, r6
 800cc1c:	9305      	str	r3, [sp, #20]
 800cc1e:	42b5      	cmp	r5, r6
 800cc20:	d00b      	beq.n	800cc3a <_svfiprintf_r+0x72>
 800cc22:	0032      	movs	r2, r6
 800cc24:	0039      	movs	r1, r7
 800cc26:	9803      	ldr	r0, [sp, #12]
 800cc28:	f7ff ff6e 	bl	800cb08 <__ssputs_r>
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	d100      	bne.n	800cc32 <_svfiprintf_r+0x6a>
 800cc30:	e0ae      	b.n	800cd90 <_svfiprintf_r+0x1c8>
 800cc32:	6963      	ldr	r3, [r4, #20]
 800cc34:	9a05      	ldr	r2, [sp, #20]
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	6163      	str	r3, [r4, #20]
 800cc3a:	782b      	ldrb	r3, [r5, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d100      	bne.n	800cc42 <_svfiprintf_r+0x7a>
 800cc40:	e0a6      	b.n	800cd90 <_svfiprintf_r+0x1c8>
 800cc42:	2201      	movs	r2, #1
 800cc44:	2300      	movs	r3, #0
 800cc46:	4252      	negs	r2, r2
 800cc48:	6062      	str	r2, [r4, #4]
 800cc4a:	a904      	add	r1, sp, #16
 800cc4c:	3254      	adds	r2, #84	@ 0x54
 800cc4e:	1852      	adds	r2, r2, r1
 800cc50:	1c6e      	adds	r6, r5, #1
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	60e3      	str	r3, [r4, #12]
 800cc56:	60a3      	str	r3, [r4, #8]
 800cc58:	7013      	strb	r3, [r2, #0]
 800cc5a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cc5c:	4b54      	ldr	r3, [pc, #336]	@ (800cdb0 <_svfiprintf_r+0x1e8>)
 800cc5e:	2205      	movs	r2, #5
 800cc60:	0018      	movs	r0, r3
 800cc62:	7831      	ldrb	r1, [r6, #0]
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	f7fe fc24 	bl	800b4b2 <memchr>
 800cc6a:	1c75      	adds	r5, r6, #1
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d11f      	bne.n	800ccb0 <_svfiprintf_r+0xe8>
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	06d3      	lsls	r3, r2, #27
 800cc74:	d504      	bpl.n	800cc80 <_svfiprintf_r+0xb8>
 800cc76:	2353      	movs	r3, #83	@ 0x53
 800cc78:	a904      	add	r1, sp, #16
 800cc7a:	185b      	adds	r3, r3, r1
 800cc7c:	2120      	movs	r1, #32
 800cc7e:	7019      	strb	r1, [r3, #0]
 800cc80:	0713      	lsls	r3, r2, #28
 800cc82:	d504      	bpl.n	800cc8e <_svfiprintf_r+0xc6>
 800cc84:	2353      	movs	r3, #83	@ 0x53
 800cc86:	a904      	add	r1, sp, #16
 800cc88:	185b      	adds	r3, r3, r1
 800cc8a:	212b      	movs	r1, #43	@ 0x2b
 800cc8c:	7019      	strb	r1, [r3, #0]
 800cc8e:	7833      	ldrb	r3, [r6, #0]
 800cc90:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc92:	d016      	beq.n	800ccc2 <_svfiprintf_r+0xfa>
 800cc94:	0035      	movs	r5, r6
 800cc96:	2100      	movs	r1, #0
 800cc98:	200a      	movs	r0, #10
 800cc9a:	68e3      	ldr	r3, [r4, #12]
 800cc9c:	782a      	ldrb	r2, [r5, #0]
 800cc9e:	1c6e      	adds	r6, r5, #1
 800cca0:	3a30      	subs	r2, #48	@ 0x30
 800cca2:	2a09      	cmp	r2, #9
 800cca4:	d950      	bls.n	800cd48 <_svfiprintf_r+0x180>
 800cca6:	2900      	cmp	r1, #0
 800cca8:	d111      	bne.n	800ccce <_svfiprintf_r+0x106>
 800ccaa:	e017      	b.n	800ccdc <_svfiprintf_r+0x114>
 800ccac:	3501      	adds	r5, #1
 800ccae:	e7af      	b.n	800cc10 <_svfiprintf_r+0x48>
 800ccb0:	9b05      	ldr	r3, [sp, #20]
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	1ac0      	subs	r0, r0, r3
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4083      	lsls	r3, r0
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	002e      	movs	r6, r5
 800ccbe:	6023      	str	r3, [r4, #0]
 800ccc0:	e7cc      	b.n	800cc5c <_svfiprintf_r+0x94>
 800ccc2:	9b07      	ldr	r3, [sp, #28]
 800ccc4:	1d19      	adds	r1, r3, #4
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	9107      	str	r1, [sp, #28]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	db01      	blt.n	800ccd2 <_svfiprintf_r+0x10a>
 800ccce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccd0:	e004      	b.n	800ccdc <_svfiprintf_r+0x114>
 800ccd2:	425b      	negs	r3, r3
 800ccd4:	60e3      	str	r3, [r4, #12]
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	782b      	ldrb	r3, [r5, #0]
 800ccde:	2b2e      	cmp	r3, #46	@ 0x2e
 800cce0:	d10c      	bne.n	800ccfc <_svfiprintf_r+0x134>
 800cce2:	786b      	ldrb	r3, [r5, #1]
 800cce4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cce6:	d134      	bne.n	800cd52 <_svfiprintf_r+0x18a>
 800cce8:	9b07      	ldr	r3, [sp, #28]
 800ccea:	3502      	adds	r5, #2
 800ccec:	1d1a      	adds	r2, r3, #4
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	9207      	str	r2, [sp, #28]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	da01      	bge.n	800ccfa <_svfiprintf_r+0x132>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	425b      	negs	r3, r3
 800ccfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccfc:	4e2d      	ldr	r6, [pc, #180]	@ (800cdb4 <_svfiprintf_r+0x1ec>)
 800ccfe:	2203      	movs	r2, #3
 800cd00:	0030      	movs	r0, r6
 800cd02:	7829      	ldrb	r1, [r5, #0]
 800cd04:	f7fe fbd5 	bl	800b4b2 <memchr>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d006      	beq.n	800cd1a <_svfiprintf_r+0x152>
 800cd0c:	2340      	movs	r3, #64	@ 0x40
 800cd0e:	1b80      	subs	r0, r0, r6
 800cd10:	4083      	lsls	r3, r0
 800cd12:	6822      	ldr	r2, [r4, #0]
 800cd14:	3501      	adds	r5, #1
 800cd16:	4313      	orrs	r3, r2
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	7829      	ldrb	r1, [r5, #0]
 800cd1c:	2206      	movs	r2, #6
 800cd1e:	4826      	ldr	r0, [pc, #152]	@ (800cdb8 <_svfiprintf_r+0x1f0>)
 800cd20:	1c6e      	adds	r6, r5, #1
 800cd22:	7621      	strb	r1, [r4, #24]
 800cd24:	f7fe fbc5 	bl	800b4b2 <memchr>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d038      	beq.n	800cd9e <_svfiprintf_r+0x1d6>
 800cd2c:	4b23      	ldr	r3, [pc, #140]	@ (800cdbc <_svfiprintf_r+0x1f4>)
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d122      	bne.n	800cd78 <_svfiprintf_r+0x1b0>
 800cd32:	2207      	movs	r2, #7
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	3307      	adds	r3, #7
 800cd38:	4393      	bics	r3, r2
 800cd3a:	3308      	adds	r3, #8
 800cd3c:	9307      	str	r3, [sp, #28]
 800cd3e:	6963      	ldr	r3, [r4, #20]
 800cd40:	9a04      	ldr	r2, [sp, #16]
 800cd42:	189b      	adds	r3, r3, r2
 800cd44:	6163      	str	r3, [r4, #20]
 800cd46:	e762      	b.n	800cc0e <_svfiprintf_r+0x46>
 800cd48:	4343      	muls	r3, r0
 800cd4a:	0035      	movs	r5, r6
 800cd4c:	2101      	movs	r1, #1
 800cd4e:	189b      	adds	r3, r3, r2
 800cd50:	e7a4      	b.n	800cc9c <_svfiprintf_r+0xd4>
 800cd52:	2300      	movs	r3, #0
 800cd54:	200a      	movs	r0, #10
 800cd56:	0019      	movs	r1, r3
 800cd58:	3501      	adds	r5, #1
 800cd5a:	6063      	str	r3, [r4, #4]
 800cd5c:	782a      	ldrb	r2, [r5, #0]
 800cd5e:	1c6e      	adds	r6, r5, #1
 800cd60:	3a30      	subs	r2, #48	@ 0x30
 800cd62:	2a09      	cmp	r2, #9
 800cd64:	d903      	bls.n	800cd6e <_svfiprintf_r+0x1a6>
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0c8      	beq.n	800ccfc <_svfiprintf_r+0x134>
 800cd6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd6c:	e7c6      	b.n	800ccfc <_svfiprintf_r+0x134>
 800cd6e:	4341      	muls	r1, r0
 800cd70:	0035      	movs	r5, r6
 800cd72:	2301      	movs	r3, #1
 800cd74:	1889      	adds	r1, r1, r2
 800cd76:	e7f1      	b.n	800cd5c <_svfiprintf_r+0x194>
 800cd78:	aa07      	add	r2, sp, #28
 800cd7a:	9200      	str	r2, [sp, #0]
 800cd7c:	0021      	movs	r1, r4
 800cd7e:	003a      	movs	r2, r7
 800cd80:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc0 <_svfiprintf_r+0x1f8>)
 800cd82:	9803      	ldr	r0, [sp, #12]
 800cd84:	f7fd fe0e 	bl	800a9a4 <_printf_float>
 800cd88:	9004      	str	r0, [sp, #16]
 800cd8a:	9b04      	ldr	r3, [sp, #16]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	d1d6      	bne.n	800cd3e <_svfiprintf_r+0x176>
 800cd90:	89bb      	ldrh	r3, [r7, #12]
 800cd92:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800cd94:	065b      	lsls	r3, r3, #25
 800cd96:	d500      	bpl.n	800cd9a <_svfiprintf_r+0x1d2>
 800cd98:	e72c      	b.n	800cbf4 <_svfiprintf_r+0x2c>
 800cd9a:	b021      	add	sp, #132	@ 0x84
 800cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9e:	aa07      	add	r2, sp, #28
 800cda0:	9200      	str	r2, [sp, #0]
 800cda2:	0021      	movs	r1, r4
 800cda4:	003a      	movs	r2, r7
 800cda6:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <_svfiprintf_r+0x1f8>)
 800cda8:	9803      	ldr	r0, [sp, #12]
 800cdaa:	f7fe f8a9 	bl	800af00 <_printf_i>
 800cdae:	e7eb      	b.n	800cd88 <_svfiprintf_r+0x1c0>
 800cdb0:	0800e68a 	.word	0x0800e68a
 800cdb4:	0800e690 	.word	0x0800e690
 800cdb8:	0800e694 	.word	0x0800e694
 800cdbc:	0800a9a5 	.word	0x0800a9a5
 800cdc0:	0800cb09 	.word	0x0800cb09

0800cdc4 <__sflush_r>:
 800cdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdc6:	220c      	movs	r2, #12
 800cdc8:	5e8b      	ldrsh	r3, [r1, r2]
 800cdca:	0005      	movs	r5, r0
 800cdcc:	000c      	movs	r4, r1
 800cdce:	071a      	lsls	r2, r3, #28
 800cdd0:	d456      	bmi.n	800ce80 <__sflush_r+0xbc>
 800cdd2:	684a      	ldr	r2, [r1, #4]
 800cdd4:	2a00      	cmp	r2, #0
 800cdd6:	dc02      	bgt.n	800cdde <__sflush_r+0x1a>
 800cdd8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800cdda:	2a00      	cmp	r2, #0
 800cddc:	dd4e      	ble.n	800ce7c <__sflush_r+0xb8>
 800cdde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cde0:	2f00      	cmp	r7, #0
 800cde2:	d04b      	beq.n	800ce7c <__sflush_r+0xb8>
 800cde4:	2200      	movs	r2, #0
 800cde6:	2080      	movs	r0, #128	@ 0x80
 800cde8:	682e      	ldr	r6, [r5, #0]
 800cdea:	602a      	str	r2, [r5, #0]
 800cdec:	001a      	movs	r2, r3
 800cdee:	0140      	lsls	r0, r0, #5
 800cdf0:	6a21      	ldr	r1, [r4, #32]
 800cdf2:	4002      	ands	r2, r0
 800cdf4:	4203      	tst	r3, r0
 800cdf6:	d033      	beq.n	800ce60 <__sflush_r+0x9c>
 800cdf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	075b      	lsls	r3, r3, #29
 800cdfe:	d506      	bpl.n	800ce0e <__sflush_r+0x4a>
 800ce00:	6863      	ldr	r3, [r4, #4]
 800ce02:	1ad2      	subs	r2, r2, r3
 800ce04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <__sflush_r+0x4a>
 800ce0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce0c:	1ad2      	subs	r2, r2, r3
 800ce0e:	2300      	movs	r3, #0
 800ce10:	0028      	movs	r0, r5
 800ce12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ce14:	6a21      	ldr	r1, [r4, #32]
 800ce16:	47b8      	blx	r7
 800ce18:	89a2      	ldrh	r2, [r4, #12]
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	d106      	bne.n	800ce2c <__sflush_r+0x68>
 800ce1e:	6829      	ldr	r1, [r5, #0]
 800ce20:	291d      	cmp	r1, #29
 800ce22:	d846      	bhi.n	800ceb2 <__sflush_r+0xee>
 800ce24:	4b29      	ldr	r3, [pc, #164]	@ (800cecc <__sflush_r+0x108>)
 800ce26:	40cb      	lsrs	r3, r1
 800ce28:	07db      	lsls	r3, r3, #31
 800ce2a:	d542      	bpl.n	800ceb2 <__sflush_r+0xee>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	6063      	str	r3, [r4, #4]
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	04d2      	lsls	r2, r2, #19
 800ce36:	d505      	bpl.n	800ce44 <__sflush_r+0x80>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	d102      	bne.n	800ce42 <__sflush_r+0x7e>
 800ce3c:	682b      	ldr	r3, [r5, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d100      	bne.n	800ce44 <__sflush_r+0x80>
 800ce42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce46:	602e      	str	r6, [r5, #0]
 800ce48:	2900      	cmp	r1, #0
 800ce4a:	d017      	beq.n	800ce7c <__sflush_r+0xb8>
 800ce4c:	0023      	movs	r3, r4
 800ce4e:	3344      	adds	r3, #68	@ 0x44
 800ce50:	4299      	cmp	r1, r3
 800ce52:	d002      	beq.n	800ce5a <__sflush_r+0x96>
 800ce54:	0028      	movs	r0, r5
 800ce56:	f7ff f9b5 	bl	800c1c4 <_free_r>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce5e:	e00d      	b.n	800ce7c <__sflush_r+0xb8>
 800ce60:	2301      	movs	r3, #1
 800ce62:	0028      	movs	r0, r5
 800ce64:	47b8      	blx	r7
 800ce66:	0002      	movs	r2, r0
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d1c6      	bne.n	800cdfa <__sflush_r+0x36>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d0c3      	beq.n	800cdfa <__sflush_r+0x36>
 800ce72:	2b1d      	cmp	r3, #29
 800ce74:	d001      	beq.n	800ce7a <__sflush_r+0xb6>
 800ce76:	2b16      	cmp	r3, #22
 800ce78:	d11a      	bne.n	800ceb0 <__sflush_r+0xec>
 800ce7a:	602e      	str	r6, [r5, #0]
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e01e      	b.n	800cebe <__sflush_r+0xfa>
 800ce80:	690e      	ldr	r6, [r1, #16]
 800ce82:	2e00      	cmp	r6, #0
 800ce84:	d0fa      	beq.n	800ce7c <__sflush_r+0xb8>
 800ce86:	680f      	ldr	r7, [r1, #0]
 800ce88:	600e      	str	r6, [r1, #0]
 800ce8a:	1bba      	subs	r2, r7, r6
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	079b      	lsls	r3, r3, #30
 800ce92:	d100      	bne.n	800ce96 <__sflush_r+0xd2>
 800ce94:	694a      	ldr	r2, [r1, #20]
 800ce96:	60a2      	str	r2, [r4, #8]
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	ddee      	ble.n	800ce7c <__sflush_r+0xb8>
 800ce9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cea0:	0032      	movs	r2, r6
 800cea2:	001f      	movs	r7, r3
 800cea4:	0028      	movs	r0, r5
 800cea6:	9b01      	ldr	r3, [sp, #4]
 800cea8:	6a21      	ldr	r1, [r4, #32]
 800ceaa:	47b8      	blx	r7
 800ceac:	2800      	cmp	r0, #0
 800ceae:	dc07      	bgt.n	800cec0 <__sflush_r+0xfc>
 800ceb0:	89a2      	ldrh	r2, [r4, #12]
 800ceb2:	2340      	movs	r3, #64	@ 0x40
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	b21b      	sxth	r3, r3
 800ceba:	81a3      	strh	r3, [r4, #12]
 800cebc:	4240      	negs	r0, r0
 800cebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	1836      	adds	r6, r6, r0
 800cec4:	1a1b      	subs	r3, r3, r0
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	e7e6      	b.n	800ce98 <__sflush_r+0xd4>
 800ceca:	46c0      	nop			@ (mov r8, r8)
 800cecc:	20400001 	.word	0x20400001

0800ced0 <_fflush_r>:
 800ced0:	690b      	ldr	r3, [r1, #16]
 800ced2:	b570      	push	{r4, r5, r6, lr}
 800ced4:	0005      	movs	r5, r0
 800ced6:	000c      	movs	r4, r1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d102      	bne.n	800cee2 <_fflush_r+0x12>
 800cedc:	2500      	movs	r5, #0
 800cede:	0028      	movs	r0, r5
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d004      	beq.n	800cef0 <_fflush_r+0x20>
 800cee6:	6a03      	ldr	r3, [r0, #32]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <_fflush_r+0x20>
 800ceec:	f7fe f9a4 	bl	800b238 <__sinit>
 800cef0:	220c      	movs	r2, #12
 800cef2:	5ea3      	ldrsh	r3, [r4, r2]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0f1      	beq.n	800cedc <_fflush_r+0xc>
 800cef8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cefa:	07d2      	lsls	r2, r2, #31
 800cefc:	d404      	bmi.n	800cf08 <_fflush_r+0x38>
 800cefe:	059b      	lsls	r3, r3, #22
 800cf00:	d402      	bmi.n	800cf08 <_fflush_r+0x38>
 800cf02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf04:	f7fe fad3 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800cf08:	0028      	movs	r0, r5
 800cf0a:	0021      	movs	r1, r4
 800cf0c:	f7ff ff5a 	bl	800cdc4 <__sflush_r>
 800cf10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf12:	0005      	movs	r5, r0
 800cf14:	07db      	lsls	r3, r3, #31
 800cf16:	d4e2      	bmi.n	800cede <_fflush_r+0xe>
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	059b      	lsls	r3, r3, #22
 800cf1c:	d4df      	bmi.n	800cede <_fflush_r+0xe>
 800cf1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf20:	f7fe fac6 	bl	800b4b0 <__retarget_lock_release_recursive>
 800cf24:	e7db      	b.n	800cede <_fflush_r+0xe>

0800cf26 <memmove>:
 800cf26:	b510      	push	{r4, lr}
 800cf28:	4288      	cmp	r0, r1
 800cf2a:	d902      	bls.n	800cf32 <memmove+0xc>
 800cf2c:	188b      	adds	r3, r1, r2
 800cf2e:	4298      	cmp	r0, r3
 800cf30:	d308      	bcc.n	800cf44 <memmove+0x1e>
 800cf32:	2300      	movs	r3, #0
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d007      	beq.n	800cf48 <memmove+0x22>
 800cf38:	5ccc      	ldrb	r4, [r1, r3]
 800cf3a:	54c4      	strb	r4, [r0, r3]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	e7f9      	b.n	800cf34 <memmove+0xe>
 800cf40:	5c8b      	ldrb	r3, [r1, r2]
 800cf42:	5483      	strb	r3, [r0, r2]
 800cf44:	3a01      	subs	r2, #1
 800cf46:	d2fb      	bcs.n	800cf40 <memmove+0x1a>
 800cf48:	bd10      	pop	{r4, pc}
	...

0800cf4c <_sbrk_r>:
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	b570      	push	{r4, r5, r6, lr}
 800cf50:	4d06      	ldr	r5, [pc, #24]	@ (800cf6c <_sbrk_r+0x20>)
 800cf52:	0004      	movs	r4, r0
 800cf54:	0008      	movs	r0, r1
 800cf56:	602b      	str	r3, [r5, #0]
 800cf58:	f7f7 fe1a 	bl	8004b90 <_sbrk>
 800cf5c:	1c43      	adds	r3, r0, #1
 800cf5e:	d103      	bne.n	800cf68 <_sbrk_r+0x1c>
 800cf60:	682b      	ldr	r3, [r5, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d000      	beq.n	800cf68 <_sbrk_r+0x1c>
 800cf66:	6023      	str	r3, [r4, #0]
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
 800cf6a:	46c0      	nop			@ (mov r8, r8)
 800cf6c:	20000590 	.word	0x20000590

0800cf70 <__assert_func>:
 800cf70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cf72:	0014      	movs	r4, r2
 800cf74:	001a      	movs	r2, r3
 800cf76:	4b09      	ldr	r3, [pc, #36]	@ (800cf9c <__assert_func+0x2c>)
 800cf78:	0005      	movs	r5, r0
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	000e      	movs	r6, r1
 800cf7e:	68d8      	ldr	r0, [r3, #12]
 800cf80:	4b07      	ldr	r3, [pc, #28]	@ (800cfa0 <__assert_func+0x30>)
 800cf82:	2c00      	cmp	r4, #0
 800cf84:	d101      	bne.n	800cf8a <__assert_func+0x1a>
 800cf86:	4b07      	ldr	r3, [pc, #28]	@ (800cfa4 <__assert_func+0x34>)
 800cf88:	001c      	movs	r4, r3
 800cf8a:	4907      	ldr	r1, [pc, #28]	@ (800cfa8 <__assert_func+0x38>)
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	9402      	str	r4, [sp, #8]
 800cf90:	002b      	movs	r3, r5
 800cf92:	9600      	str	r6, [sp, #0]
 800cf94:	f000 f886 	bl	800d0a4 <fiprintf>
 800cf98:	f000 f894 	bl	800d0c4 <abort>
 800cf9c:	20000018 	.word	0x20000018
 800cfa0:	0800e6a5 	.word	0x0800e6a5
 800cfa4:	0800e6e0 	.word	0x0800e6e0
 800cfa8:	0800e6b2 	.word	0x0800e6b2

0800cfac <_calloc_r>:
 800cfac:	b570      	push	{r4, r5, r6, lr}
 800cfae:	0c0b      	lsrs	r3, r1, #16
 800cfb0:	0c15      	lsrs	r5, r2, #16
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d11e      	bne.n	800cff4 <_calloc_r+0x48>
 800cfb6:	2d00      	cmp	r5, #0
 800cfb8:	d10c      	bne.n	800cfd4 <_calloc_r+0x28>
 800cfba:	b289      	uxth	r1, r1
 800cfbc:	b294      	uxth	r4, r2
 800cfbe:	434c      	muls	r4, r1
 800cfc0:	0021      	movs	r1, r4
 800cfc2:	f7ff f975 	bl	800c2b0 <_malloc_r>
 800cfc6:	1e05      	subs	r5, r0, #0
 800cfc8:	d01b      	beq.n	800d002 <_calloc_r+0x56>
 800cfca:	0022      	movs	r2, r4
 800cfcc:	2100      	movs	r1, #0
 800cfce:	f7fe f9e9 	bl	800b3a4 <memset>
 800cfd2:	e016      	b.n	800d002 <_calloc_r+0x56>
 800cfd4:	1c2b      	adds	r3, r5, #0
 800cfd6:	1c0c      	adds	r4, r1, #0
 800cfd8:	b289      	uxth	r1, r1
 800cfda:	b292      	uxth	r2, r2
 800cfdc:	434a      	muls	r2, r1
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	b2a1      	uxth	r1, r4
 800cfe2:	4359      	muls	r1, r3
 800cfe4:	0c14      	lsrs	r4, r2, #16
 800cfe6:	190c      	adds	r4, r1, r4
 800cfe8:	0c23      	lsrs	r3, r4, #16
 800cfea:	d107      	bne.n	800cffc <_calloc_r+0x50>
 800cfec:	0424      	lsls	r4, r4, #16
 800cfee:	b292      	uxth	r2, r2
 800cff0:	4314      	orrs	r4, r2
 800cff2:	e7e5      	b.n	800cfc0 <_calloc_r+0x14>
 800cff4:	2d00      	cmp	r5, #0
 800cff6:	d101      	bne.n	800cffc <_calloc_r+0x50>
 800cff8:	1c14      	adds	r4, r2, #0
 800cffa:	e7ed      	b.n	800cfd8 <_calloc_r+0x2c>
 800cffc:	230c      	movs	r3, #12
 800cffe:	2500      	movs	r5, #0
 800d000:	6003      	str	r3, [r0, #0]
 800d002:	0028      	movs	r0, r5
 800d004:	bd70      	pop	{r4, r5, r6, pc}

0800d006 <__ascii_mbtowc>:
 800d006:	b082      	sub	sp, #8
 800d008:	2900      	cmp	r1, #0
 800d00a:	d100      	bne.n	800d00e <__ascii_mbtowc+0x8>
 800d00c:	a901      	add	r1, sp, #4
 800d00e:	1e10      	subs	r0, r2, #0
 800d010:	d006      	beq.n	800d020 <__ascii_mbtowc+0x1a>
 800d012:	2b00      	cmp	r3, #0
 800d014:	d006      	beq.n	800d024 <__ascii_mbtowc+0x1e>
 800d016:	7813      	ldrb	r3, [r2, #0]
 800d018:	600b      	str	r3, [r1, #0]
 800d01a:	7810      	ldrb	r0, [r2, #0]
 800d01c:	1e43      	subs	r3, r0, #1
 800d01e:	4198      	sbcs	r0, r3
 800d020:	b002      	add	sp, #8
 800d022:	4770      	bx	lr
 800d024:	2002      	movs	r0, #2
 800d026:	4240      	negs	r0, r0
 800d028:	e7fa      	b.n	800d020 <__ascii_mbtowc+0x1a>

0800d02a <_realloc_r>:
 800d02a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d02c:	0006      	movs	r6, r0
 800d02e:	000c      	movs	r4, r1
 800d030:	0015      	movs	r5, r2
 800d032:	2900      	cmp	r1, #0
 800d034:	d105      	bne.n	800d042 <_realloc_r+0x18>
 800d036:	0011      	movs	r1, r2
 800d038:	f7ff f93a 	bl	800c2b0 <_malloc_r>
 800d03c:	0004      	movs	r4, r0
 800d03e:	0020      	movs	r0, r4
 800d040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d042:	2a00      	cmp	r2, #0
 800d044:	d103      	bne.n	800d04e <_realloc_r+0x24>
 800d046:	f7ff f8bd 	bl	800c1c4 <_free_r>
 800d04a:	002c      	movs	r4, r5
 800d04c:	e7f7      	b.n	800d03e <_realloc_r+0x14>
 800d04e:	f000 f840 	bl	800d0d2 <_malloc_usable_size_r>
 800d052:	0007      	movs	r7, r0
 800d054:	4285      	cmp	r5, r0
 800d056:	d802      	bhi.n	800d05e <_realloc_r+0x34>
 800d058:	0843      	lsrs	r3, r0, #1
 800d05a:	42ab      	cmp	r3, r5
 800d05c:	d3ef      	bcc.n	800d03e <_realloc_r+0x14>
 800d05e:	0029      	movs	r1, r5
 800d060:	0030      	movs	r0, r6
 800d062:	f7ff f925 	bl	800c2b0 <_malloc_r>
 800d066:	9001      	str	r0, [sp, #4]
 800d068:	2800      	cmp	r0, #0
 800d06a:	d101      	bne.n	800d070 <_realloc_r+0x46>
 800d06c:	9c01      	ldr	r4, [sp, #4]
 800d06e:	e7e6      	b.n	800d03e <_realloc_r+0x14>
 800d070:	002a      	movs	r2, r5
 800d072:	42bd      	cmp	r5, r7
 800d074:	d900      	bls.n	800d078 <_realloc_r+0x4e>
 800d076:	003a      	movs	r2, r7
 800d078:	0021      	movs	r1, r4
 800d07a:	9801      	ldr	r0, [sp, #4]
 800d07c:	f7fe fa24 	bl	800b4c8 <memcpy>
 800d080:	0021      	movs	r1, r4
 800d082:	0030      	movs	r0, r6
 800d084:	f7ff f89e 	bl	800c1c4 <_free_r>
 800d088:	e7f0      	b.n	800d06c <_realloc_r+0x42>

0800d08a <__ascii_wctomb>:
 800d08a:	0003      	movs	r3, r0
 800d08c:	1e08      	subs	r0, r1, #0
 800d08e:	d005      	beq.n	800d09c <__ascii_wctomb+0x12>
 800d090:	2aff      	cmp	r2, #255	@ 0xff
 800d092:	d904      	bls.n	800d09e <__ascii_wctomb+0x14>
 800d094:	228a      	movs	r2, #138	@ 0x8a
 800d096:	2001      	movs	r0, #1
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	4240      	negs	r0, r0
 800d09c:	4770      	bx	lr
 800d09e:	2001      	movs	r0, #1
 800d0a0:	700a      	strb	r2, [r1, #0]
 800d0a2:	e7fb      	b.n	800d09c <__ascii_wctomb+0x12>

0800d0a4 <fiprintf>:
 800d0a4:	b40e      	push	{r1, r2, r3}
 800d0a6:	b517      	push	{r0, r1, r2, r4, lr}
 800d0a8:	4c05      	ldr	r4, [pc, #20]	@ (800d0c0 <fiprintf+0x1c>)
 800d0aa:	ab05      	add	r3, sp, #20
 800d0ac:	cb04      	ldmia	r3!, {r2}
 800d0ae:	0001      	movs	r1, r0
 800d0b0:	6820      	ldr	r0, [r4, #0]
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	f000 f83c 	bl	800d130 <_vfiprintf_r>
 800d0b8:	bc1e      	pop	{r1, r2, r3, r4}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	b003      	add	sp, #12
 800d0be:	4718      	bx	r3
 800d0c0:	20000018 	.word	0x20000018

0800d0c4 <abort>:
 800d0c4:	2006      	movs	r0, #6
 800d0c6:	b510      	push	{r4, lr}
 800d0c8:	f000 fa18 	bl	800d4fc <raise>
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	f7f7 fced 	bl	8004aac <_exit>

0800d0d2 <_malloc_usable_size_r>:
 800d0d2:	1f0b      	subs	r3, r1, #4
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	1f18      	subs	r0, r3, #4
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da01      	bge.n	800d0e0 <_malloc_usable_size_r+0xe>
 800d0dc:	580b      	ldr	r3, [r1, r0]
 800d0de:	18c0      	adds	r0, r0, r3
 800d0e0:	4770      	bx	lr

0800d0e2 <__sfputc_r>:
 800d0e2:	6893      	ldr	r3, [r2, #8]
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	6093      	str	r3, [r2, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	da04      	bge.n	800d0f8 <__sfputc_r+0x16>
 800d0ee:	6994      	ldr	r4, [r2, #24]
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	db07      	blt.n	800d104 <__sfputc_r+0x22>
 800d0f4:	290a      	cmp	r1, #10
 800d0f6:	d005      	beq.n	800d104 <__sfputc_r+0x22>
 800d0f8:	6813      	ldr	r3, [r2, #0]
 800d0fa:	1c58      	adds	r0, r3, #1
 800d0fc:	6010      	str	r0, [r2, #0]
 800d0fe:	7019      	strb	r1, [r3, #0]
 800d100:	0008      	movs	r0, r1
 800d102:	bd10      	pop	{r4, pc}
 800d104:	f000 f930 	bl	800d368 <__swbuf_r>
 800d108:	0001      	movs	r1, r0
 800d10a:	e7f9      	b.n	800d100 <__sfputc_r+0x1e>

0800d10c <__sfputs_r>:
 800d10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10e:	0006      	movs	r6, r0
 800d110:	000f      	movs	r7, r1
 800d112:	0014      	movs	r4, r2
 800d114:	18d5      	adds	r5, r2, r3
 800d116:	42ac      	cmp	r4, r5
 800d118:	d101      	bne.n	800d11e <__sfputs_r+0x12>
 800d11a:	2000      	movs	r0, #0
 800d11c:	e007      	b.n	800d12e <__sfputs_r+0x22>
 800d11e:	7821      	ldrb	r1, [r4, #0]
 800d120:	003a      	movs	r2, r7
 800d122:	0030      	movs	r0, r6
 800d124:	f7ff ffdd 	bl	800d0e2 <__sfputc_r>
 800d128:	3401      	adds	r4, #1
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	d1f3      	bne.n	800d116 <__sfputs_r+0xa>
 800d12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d130 <_vfiprintf_r>:
 800d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d132:	b0a1      	sub	sp, #132	@ 0x84
 800d134:	000f      	movs	r7, r1
 800d136:	0015      	movs	r5, r2
 800d138:	001e      	movs	r6, r3
 800d13a:	9003      	str	r0, [sp, #12]
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d004      	beq.n	800d14a <_vfiprintf_r+0x1a>
 800d140:	6a03      	ldr	r3, [r0, #32]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <_vfiprintf_r+0x1a>
 800d146:	f7fe f877 	bl	800b238 <__sinit>
 800d14a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d14c:	07db      	lsls	r3, r3, #31
 800d14e:	d405      	bmi.n	800d15c <_vfiprintf_r+0x2c>
 800d150:	89bb      	ldrh	r3, [r7, #12]
 800d152:	059b      	lsls	r3, r3, #22
 800d154:	d402      	bmi.n	800d15c <_vfiprintf_r+0x2c>
 800d156:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d158:	f7fe f9a9 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800d15c:	89bb      	ldrh	r3, [r7, #12]
 800d15e:	071b      	lsls	r3, r3, #28
 800d160:	d502      	bpl.n	800d168 <_vfiprintf_r+0x38>
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d113      	bne.n	800d190 <_vfiprintf_r+0x60>
 800d168:	0039      	movs	r1, r7
 800d16a:	9803      	ldr	r0, [sp, #12]
 800d16c:	f000 f93e 	bl	800d3ec <__swsetup_r>
 800d170:	2800      	cmp	r0, #0
 800d172:	d00d      	beq.n	800d190 <_vfiprintf_r+0x60>
 800d174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d176:	07db      	lsls	r3, r3, #31
 800d178:	d503      	bpl.n	800d182 <_vfiprintf_r+0x52>
 800d17a:	2001      	movs	r0, #1
 800d17c:	4240      	negs	r0, r0
 800d17e:	b021      	add	sp, #132	@ 0x84
 800d180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d182:	89bb      	ldrh	r3, [r7, #12]
 800d184:	059b      	lsls	r3, r3, #22
 800d186:	d4f8      	bmi.n	800d17a <_vfiprintf_r+0x4a>
 800d188:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d18a:	f7fe f991 	bl	800b4b0 <__retarget_lock_release_recursive>
 800d18e:	e7f4      	b.n	800d17a <_vfiprintf_r+0x4a>
 800d190:	2300      	movs	r3, #0
 800d192:	ac08      	add	r4, sp, #32
 800d194:	6163      	str	r3, [r4, #20]
 800d196:	3320      	adds	r3, #32
 800d198:	7663      	strb	r3, [r4, #25]
 800d19a:	3310      	adds	r3, #16
 800d19c:	76a3      	strb	r3, [r4, #26]
 800d19e:	9607      	str	r6, [sp, #28]
 800d1a0:	002e      	movs	r6, r5
 800d1a2:	7833      	ldrb	r3, [r6, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <_vfiprintf_r+0x7c>
 800d1a8:	2b25      	cmp	r3, #37	@ 0x25
 800d1aa:	d148      	bne.n	800d23e <_vfiprintf_r+0x10e>
 800d1ac:	1b73      	subs	r3, r6, r5
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	42ae      	cmp	r6, r5
 800d1b2:	d00b      	beq.n	800d1cc <_vfiprintf_r+0x9c>
 800d1b4:	002a      	movs	r2, r5
 800d1b6:	0039      	movs	r1, r7
 800d1b8:	9803      	ldr	r0, [sp, #12]
 800d1ba:	f7ff ffa7 	bl	800d10c <__sfputs_r>
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d100      	bne.n	800d1c4 <_vfiprintf_r+0x94>
 800d1c2:	e0ae      	b.n	800d322 <_vfiprintf_r+0x1f2>
 800d1c4:	6963      	ldr	r3, [r4, #20]
 800d1c6:	9a05      	ldr	r2, [sp, #20]
 800d1c8:	189b      	adds	r3, r3, r2
 800d1ca:	6163      	str	r3, [r4, #20]
 800d1cc:	7833      	ldrb	r3, [r6, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d100      	bne.n	800d1d4 <_vfiprintf_r+0xa4>
 800d1d2:	e0a6      	b.n	800d322 <_vfiprintf_r+0x1f2>
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	4252      	negs	r2, r2
 800d1da:	6062      	str	r2, [r4, #4]
 800d1dc:	a904      	add	r1, sp, #16
 800d1de:	3254      	adds	r2, #84	@ 0x54
 800d1e0:	1852      	adds	r2, r2, r1
 800d1e2:	1c75      	adds	r5, r6, #1
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	60e3      	str	r3, [r4, #12]
 800d1e8:	60a3      	str	r3, [r4, #8]
 800d1ea:	7013      	strb	r3, [r2, #0]
 800d1ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d1ee:	4b59      	ldr	r3, [pc, #356]	@ (800d354 <_vfiprintf_r+0x224>)
 800d1f0:	2205      	movs	r2, #5
 800d1f2:	0018      	movs	r0, r3
 800d1f4:	7829      	ldrb	r1, [r5, #0]
 800d1f6:	9305      	str	r3, [sp, #20]
 800d1f8:	f7fe f95b 	bl	800b4b2 <memchr>
 800d1fc:	1c6e      	adds	r6, r5, #1
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d11f      	bne.n	800d242 <_vfiprintf_r+0x112>
 800d202:	6822      	ldr	r2, [r4, #0]
 800d204:	06d3      	lsls	r3, r2, #27
 800d206:	d504      	bpl.n	800d212 <_vfiprintf_r+0xe2>
 800d208:	2353      	movs	r3, #83	@ 0x53
 800d20a:	a904      	add	r1, sp, #16
 800d20c:	185b      	adds	r3, r3, r1
 800d20e:	2120      	movs	r1, #32
 800d210:	7019      	strb	r1, [r3, #0]
 800d212:	0713      	lsls	r3, r2, #28
 800d214:	d504      	bpl.n	800d220 <_vfiprintf_r+0xf0>
 800d216:	2353      	movs	r3, #83	@ 0x53
 800d218:	a904      	add	r1, sp, #16
 800d21a:	185b      	adds	r3, r3, r1
 800d21c:	212b      	movs	r1, #43	@ 0x2b
 800d21e:	7019      	strb	r1, [r3, #0]
 800d220:	782b      	ldrb	r3, [r5, #0]
 800d222:	2b2a      	cmp	r3, #42	@ 0x2a
 800d224:	d016      	beq.n	800d254 <_vfiprintf_r+0x124>
 800d226:	002e      	movs	r6, r5
 800d228:	2100      	movs	r1, #0
 800d22a:	200a      	movs	r0, #10
 800d22c:	68e3      	ldr	r3, [r4, #12]
 800d22e:	7832      	ldrb	r2, [r6, #0]
 800d230:	1c75      	adds	r5, r6, #1
 800d232:	3a30      	subs	r2, #48	@ 0x30
 800d234:	2a09      	cmp	r2, #9
 800d236:	d950      	bls.n	800d2da <_vfiprintf_r+0x1aa>
 800d238:	2900      	cmp	r1, #0
 800d23a:	d111      	bne.n	800d260 <_vfiprintf_r+0x130>
 800d23c:	e017      	b.n	800d26e <_vfiprintf_r+0x13e>
 800d23e:	3601      	adds	r6, #1
 800d240:	e7af      	b.n	800d1a2 <_vfiprintf_r+0x72>
 800d242:	9b05      	ldr	r3, [sp, #20]
 800d244:	6822      	ldr	r2, [r4, #0]
 800d246:	1ac0      	subs	r0, r0, r3
 800d248:	2301      	movs	r3, #1
 800d24a:	4083      	lsls	r3, r0
 800d24c:	4313      	orrs	r3, r2
 800d24e:	0035      	movs	r5, r6
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	e7cc      	b.n	800d1ee <_vfiprintf_r+0xbe>
 800d254:	9b07      	ldr	r3, [sp, #28]
 800d256:	1d19      	adds	r1, r3, #4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	9107      	str	r1, [sp, #28]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	db01      	blt.n	800d264 <_vfiprintf_r+0x134>
 800d260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d262:	e004      	b.n	800d26e <_vfiprintf_r+0x13e>
 800d264:	425b      	negs	r3, r3
 800d266:	60e3      	str	r3, [r4, #12]
 800d268:	2302      	movs	r3, #2
 800d26a:	4313      	orrs	r3, r2
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	7833      	ldrb	r3, [r6, #0]
 800d270:	2b2e      	cmp	r3, #46	@ 0x2e
 800d272:	d10c      	bne.n	800d28e <_vfiprintf_r+0x15e>
 800d274:	7873      	ldrb	r3, [r6, #1]
 800d276:	2b2a      	cmp	r3, #42	@ 0x2a
 800d278:	d134      	bne.n	800d2e4 <_vfiprintf_r+0x1b4>
 800d27a:	9b07      	ldr	r3, [sp, #28]
 800d27c:	3602      	adds	r6, #2
 800d27e:	1d1a      	adds	r2, r3, #4
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	9207      	str	r2, [sp, #28]
 800d284:	2b00      	cmp	r3, #0
 800d286:	da01      	bge.n	800d28c <_vfiprintf_r+0x15c>
 800d288:	2301      	movs	r3, #1
 800d28a:	425b      	negs	r3, r3
 800d28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d28e:	4d32      	ldr	r5, [pc, #200]	@ (800d358 <_vfiprintf_r+0x228>)
 800d290:	2203      	movs	r2, #3
 800d292:	0028      	movs	r0, r5
 800d294:	7831      	ldrb	r1, [r6, #0]
 800d296:	f7fe f90c 	bl	800b4b2 <memchr>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d006      	beq.n	800d2ac <_vfiprintf_r+0x17c>
 800d29e:	2340      	movs	r3, #64	@ 0x40
 800d2a0:	1b40      	subs	r0, r0, r5
 800d2a2:	4083      	lsls	r3, r0
 800d2a4:	6822      	ldr	r2, [r4, #0]
 800d2a6:	3601      	adds	r6, #1
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	7831      	ldrb	r1, [r6, #0]
 800d2ae:	2206      	movs	r2, #6
 800d2b0:	482a      	ldr	r0, [pc, #168]	@ (800d35c <_vfiprintf_r+0x22c>)
 800d2b2:	1c75      	adds	r5, r6, #1
 800d2b4:	7621      	strb	r1, [r4, #24]
 800d2b6:	f7fe f8fc 	bl	800b4b2 <memchr>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d040      	beq.n	800d340 <_vfiprintf_r+0x210>
 800d2be:	4b28      	ldr	r3, [pc, #160]	@ (800d360 <_vfiprintf_r+0x230>)
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d122      	bne.n	800d30a <_vfiprintf_r+0x1da>
 800d2c4:	2207      	movs	r2, #7
 800d2c6:	9b07      	ldr	r3, [sp, #28]
 800d2c8:	3307      	adds	r3, #7
 800d2ca:	4393      	bics	r3, r2
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	9307      	str	r3, [sp, #28]
 800d2d0:	6963      	ldr	r3, [r4, #20]
 800d2d2:	9a04      	ldr	r2, [sp, #16]
 800d2d4:	189b      	adds	r3, r3, r2
 800d2d6:	6163      	str	r3, [r4, #20]
 800d2d8:	e762      	b.n	800d1a0 <_vfiprintf_r+0x70>
 800d2da:	4343      	muls	r3, r0
 800d2dc:	002e      	movs	r6, r5
 800d2de:	2101      	movs	r1, #1
 800d2e0:	189b      	adds	r3, r3, r2
 800d2e2:	e7a4      	b.n	800d22e <_vfiprintf_r+0xfe>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	200a      	movs	r0, #10
 800d2e8:	0019      	movs	r1, r3
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	6063      	str	r3, [r4, #4]
 800d2ee:	7832      	ldrb	r2, [r6, #0]
 800d2f0:	1c75      	adds	r5, r6, #1
 800d2f2:	3a30      	subs	r2, #48	@ 0x30
 800d2f4:	2a09      	cmp	r2, #9
 800d2f6:	d903      	bls.n	800d300 <_vfiprintf_r+0x1d0>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0c8      	beq.n	800d28e <_vfiprintf_r+0x15e>
 800d2fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800d2fe:	e7c6      	b.n	800d28e <_vfiprintf_r+0x15e>
 800d300:	4341      	muls	r1, r0
 800d302:	002e      	movs	r6, r5
 800d304:	2301      	movs	r3, #1
 800d306:	1889      	adds	r1, r1, r2
 800d308:	e7f1      	b.n	800d2ee <_vfiprintf_r+0x1be>
 800d30a:	aa07      	add	r2, sp, #28
 800d30c:	9200      	str	r2, [sp, #0]
 800d30e:	0021      	movs	r1, r4
 800d310:	003a      	movs	r2, r7
 800d312:	4b14      	ldr	r3, [pc, #80]	@ (800d364 <_vfiprintf_r+0x234>)
 800d314:	9803      	ldr	r0, [sp, #12]
 800d316:	f7fd fb45 	bl	800a9a4 <_printf_float>
 800d31a:	9004      	str	r0, [sp, #16]
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	3301      	adds	r3, #1
 800d320:	d1d6      	bne.n	800d2d0 <_vfiprintf_r+0x1a0>
 800d322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d324:	07db      	lsls	r3, r3, #31
 800d326:	d405      	bmi.n	800d334 <_vfiprintf_r+0x204>
 800d328:	89bb      	ldrh	r3, [r7, #12]
 800d32a:	059b      	lsls	r3, r3, #22
 800d32c:	d402      	bmi.n	800d334 <_vfiprintf_r+0x204>
 800d32e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d330:	f7fe f8be 	bl	800b4b0 <__retarget_lock_release_recursive>
 800d334:	89bb      	ldrh	r3, [r7, #12]
 800d336:	065b      	lsls	r3, r3, #25
 800d338:	d500      	bpl.n	800d33c <_vfiprintf_r+0x20c>
 800d33a:	e71e      	b.n	800d17a <_vfiprintf_r+0x4a>
 800d33c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d33e:	e71e      	b.n	800d17e <_vfiprintf_r+0x4e>
 800d340:	aa07      	add	r2, sp, #28
 800d342:	9200      	str	r2, [sp, #0]
 800d344:	0021      	movs	r1, r4
 800d346:	003a      	movs	r2, r7
 800d348:	4b06      	ldr	r3, [pc, #24]	@ (800d364 <_vfiprintf_r+0x234>)
 800d34a:	9803      	ldr	r0, [sp, #12]
 800d34c:	f7fd fdd8 	bl	800af00 <_printf_i>
 800d350:	e7e3      	b.n	800d31a <_vfiprintf_r+0x1ea>
 800d352:	46c0      	nop			@ (mov r8, r8)
 800d354:	0800e68a 	.word	0x0800e68a
 800d358:	0800e690 	.word	0x0800e690
 800d35c:	0800e694 	.word	0x0800e694
 800d360:	0800a9a5 	.word	0x0800a9a5
 800d364:	0800d10d 	.word	0x0800d10d

0800d368 <__swbuf_r>:
 800d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36a:	0006      	movs	r6, r0
 800d36c:	000d      	movs	r5, r1
 800d36e:	0014      	movs	r4, r2
 800d370:	2800      	cmp	r0, #0
 800d372:	d004      	beq.n	800d37e <__swbuf_r+0x16>
 800d374:	6a03      	ldr	r3, [r0, #32]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <__swbuf_r+0x16>
 800d37a:	f7fd ff5d 	bl	800b238 <__sinit>
 800d37e:	69a3      	ldr	r3, [r4, #24]
 800d380:	60a3      	str	r3, [r4, #8]
 800d382:	89a3      	ldrh	r3, [r4, #12]
 800d384:	071b      	lsls	r3, r3, #28
 800d386:	d502      	bpl.n	800d38e <__swbuf_r+0x26>
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d109      	bne.n	800d3a2 <__swbuf_r+0x3a>
 800d38e:	0021      	movs	r1, r4
 800d390:	0030      	movs	r0, r6
 800d392:	f000 f82b 	bl	800d3ec <__swsetup_r>
 800d396:	2800      	cmp	r0, #0
 800d398:	d003      	beq.n	800d3a2 <__swbuf_r+0x3a>
 800d39a:	2501      	movs	r5, #1
 800d39c:	426d      	negs	r5, r5
 800d39e:	0028      	movs	r0, r5
 800d3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	6820      	ldr	r0, [r4, #0]
 800d3a6:	b2ef      	uxtb	r7, r5
 800d3a8:	1ac0      	subs	r0, r0, r3
 800d3aa:	6963      	ldr	r3, [r4, #20]
 800d3ac:	b2ed      	uxtb	r5, r5
 800d3ae:	4283      	cmp	r3, r0
 800d3b0:	dc05      	bgt.n	800d3be <__swbuf_r+0x56>
 800d3b2:	0021      	movs	r1, r4
 800d3b4:	0030      	movs	r0, r6
 800d3b6:	f7ff fd8b 	bl	800ced0 <_fflush_r>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d1ed      	bne.n	800d39a <__swbuf_r+0x32>
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	60a3      	str	r3, [r4, #8]
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	6022      	str	r2, [r4, #0]
 800d3cc:	701f      	strb	r7, [r3, #0]
 800d3ce:	6963      	ldr	r3, [r4, #20]
 800d3d0:	4283      	cmp	r3, r0
 800d3d2:	d004      	beq.n	800d3de <__swbuf_r+0x76>
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	07db      	lsls	r3, r3, #31
 800d3d8:	d5e1      	bpl.n	800d39e <__swbuf_r+0x36>
 800d3da:	2d0a      	cmp	r5, #10
 800d3dc:	d1df      	bne.n	800d39e <__swbuf_r+0x36>
 800d3de:	0021      	movs	r1, r4
 800d3e0:	0030      	movs	r0, r6
 800d3e2:	f7ff fd75 	bl	800ced0 <_fflush_r>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d0d9      	beq.n	800d39e <__swbuf_r+0x36>
 800d3ea:	e7d6      	b.n	800d39a <__swbuf_r+0x32>

0800d3ec <__swsetup_r>:
 800d3ec:	4b2d      	ldr	r3, [pc, #180]	@ (800d4a4 <__swsetup_r+0xb8>)
 800d3ee:	b570      	push	{r4, r5, r6, lr}
 800d3f0:	0005      	movs	r5, r0
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	000c      	movs	r4, r1
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d004      	beq.n	800d404 <__swsetup_r+0x18>
 800d3fa:	6a03      	ldr	r3, [r0, #32]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <__swsetup_r+0x18>
 800d400:	f7fd ff1a 	bl	800b238 <__sinit>
 800d404:	220c      	movs	r2, #12
 800d406:	5ea3      	ldrsh	r3, [r4, r2]
 800d408:	071a      	lsls	r2, r3, #28
 800d40a:	d423      	bmi.n	800d454 <__swsetup_r+0x68>
 800d40c:	06da      	lsls	r2, r3, #27
 800d40e:	d407      	bmi.n	800d420 <__swsetup_r+0x34>
 800d410:	2209      	movs	r2, #9
 800d412:	602a      	str	r2, [r5, #0]
 800d414:	2240      	movs	r2, #64	@ 0x40
 800d416:	2001      	movs	r0, #1
 800d418:	4313      	orrs	r3, r2
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	4240      	negs	r0, r0
 800d41e:	e03a      	b.n	800d496 <__swsetup_r+0xaa>
 800d420:	075b      	lsls	r3, r3, #29
 800d422:	d513      	bpl.n	800d44c <__swsetup_r+0x60>
 800d424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d426:	2900      	cmp	r1, #0
 800d428:	d008      	beq.n	800d43c <__swsetup_r+0x50>
 800d42a:	0023      	movs	r3, r4
 800d42c:	3344      	adds	r3, #68	@ 0x44
 800d42e:	4299      	cmp	r1, r3
 800d430:	d002      	beq.n	800d438 <__swsetup_r+0x4c>
 800d432:	0028      	movs	r0, r5
 800d434:	f7fe fec6 	bl	800c1c4 <_free_r>
 800d438:	2300      	movs	r3, #0
 800d43a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d43c:	2224      	movs	r2, #36	@ 0x24
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	4393      	bics	r3, r2
 800d442:	81a3      	strh	r3, [r4, #12]
 800d444:	2300      	movs	r3, #0
 800d446:	6063      	str	r3, [r4, #4]
 800d448:	6923      	ldr	r3, [r4, #16]
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	2308      	movs	r3, #8
 800d44e:	89a2      	ldrh	r2, [r4, #12]
 800d450:	4313      	orrs	r3, r2
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	6923      	ldr	r3, [r4, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10b      	bne.n	800d472 <__swsetup_r+0x86>
 800d45a:	21a0      	movs	r1, #160	@ 0xa0
 800d45c:	2280      	movs	r2, #128	@ 0x80
 800d45e:	89a3      	ldrh	r3, [r4, #12]
 800d460:	0089      	lsls	r1, r1, #2
 800d462:	0092      	lsls	r2, r2, #2
 800d464:	400b      	ands	r3, r1
 800d466:	4293      	cmp	r3, r2
 800d468:	d003      	beq.n	800d472 <__swsetup_r+0x86>
 800d46a:	0021      	movs	r1, r4
 800d46c:	0028      	movs	r0, r5
 800d46e:	f000 f88f 	bl	800d590 <__smakebuf_r>
 800d472:	220c      	movs	r2, #12
 800d474:	5ea3      	ldrsh	r3, [r4, r2]
 800d476:	2101      	movs	r1, #1
 800d478:	001a      	movs	r2, r3
 800d47a:	400a      	ands	r2, r1
 800d47c:	420b      	tst	r3, r1
 800d47e:	d00b      	beq.n	800d498 <__swsetup_r+0xac>
 800d480:	2200      	movs	r2, #0
 800d482:	60a2      	str	r2, [r4, #8]
 800d484:	6962      	ldr	r2, [r4, #20]
 800d486:	4252      	negs	r2, r2
 800d488:	61a2      	str	r2, [r4, #24]
 800d48a:	2000      	movs	r0, #0
 800d48c:	6922      	ldr	r2, [r4, #16]
 800d48e:	4282      	cmp	r2, r0
 800d490:	d101      	bne.n	800d496 <__swsetup_r+0xaa>
 800d492:	061a      	lsls	r2, r3, #24
 800d494:	d4be      	bmi.n	800d414 <__swsetup_r+0x28>
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	0799      	lsls	r1, r3, #30
 800d49a:	d400      	bmi.n	800d49e <__swsetup_r+0xb2>
 800d49c:	6962      	ldr	r2, [r4, #20]
 800d49e:	60a2      	str	r2, [r4, #8]
 800d4a0:	e7f3      	b.n	800d48a <__swsetup_r+0x9e>
 800d4a2:	46c0      	nop			@ (mov r8, r8)
 800d4a4:	20000018 	.word	0x20000018

0800d4a8 <_raise_r>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	0004      	movs	r4, r0
 800d4ac:	000d      	movs	r5, r1
 800d4ae:	291f      	cmp	r1, #31
 800d4b0:	d904      	bls.n	800d4bc <_raise_r+0x14>
 800d4b2:	2316      	movs	r3, #22
 800d4b4:	6003      	str	r3, [r0, #0]
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	4240      	negs	r0, r0
 800d4ba:	bd70      	pop	{r4, r5, r6, pc}
 800d4bc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d004      	beq.n	800d4cc <_raise_r+0x24>
 800d4c2:	008a      	lsls	r2, r1, #2
 800d4c4:	189b      	adds	r3, r3, r2
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	2a00      	cmp	r2, #0
 800d4ca:	d108      	bne.n	800d4de <_raise_r+0x36>
 800d4cc:	0020      	movs	r0, r4
 800d4ce:	f000 f831 	bl	800d534 <_getpid_r>
 800d4d2:	002a      	movs	r2, r5
 800d4d4:	0001      	movs	r1, r0
 800d4d6:	0020      	movs	r0, r4
 800d4d8:	f000 f81a 	bl	800d510 <_kill_r>
 800d4dc:	e7ed      	b.n	800d4ba <_raise_r+0x12>
 800d4de:	2a01      	cmp	r2, #1
 800d4e0:	d009      	beq.n	800d4f6 <_raise_r+0x4e>
 800d4e2:	1c51      	adds	r1, r2, #1
 800d4e4:	d103      	bne.n	800d4ee <_raise_r+0x46>
 800d4e6:	2316      	movs	r3, #22
 800d4e8:	6003      	str	r3, [r0, #0]
 800d4ea:	2001      	movs	r0, #1
 800d4ec:	e7e5      	b.n	800d4ba <_raise_r+0x12>
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	0028      	movs	r0, r5
 800d4f2:	6019      	str	r1, [r3, #0]
 800d4f4:	4790      	blx	r2
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	e7df      	b.n	800d4ba <_raise_r+0x12>
	...

0800d4fc <raise>:
 800d4fc:	b510      	push	{r4, lr}
 800d4fe:	4b03      	ldr	r3, [pc, #12]	@ (800d50c <raise+0x10>)
 800d500:	0001      	movs	r1, r0
 800d502:	6818      	ldr	r0, [r3, #0]
 800d504:	f7ff ffd0 	bl	800d4a8 <_raise_r>
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	46c0      	nop			@ (mov r8, r8)
 800d50c:	20000018 	.word	0x20000018

0800d510 <_kill_r>:
 800d510:	2300      	movs	r3, #0
 800d512:	b570      	push	{r4, r5, r6, lr}
 800d514:	4d06      	ldr	r5, [pc, #24]	@ (800d530 <_kill_r+0x20>)
 800d516:	0004      	movs	r4, r0
 800d518:	0008      	movs	r0, r1
 800d51a:	0011      	movs	r1, r2
 800d51c:	602b      	str	r3, [r5, #0]
 800d51e:	f7f7 fab5 	bl	8004a8c <_kill>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	d103      	bne.n	800d52e <_kill_r+0x1e>
 800d526:	682b      	ldr	r3, [r5, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d000      	beq.n	800d52e <_kill_r+0x1e>
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	bd70      	pop	{r4, r5, r6, pc}
 800d530:	20000590 	.word	0x20000590

0800d534 <_getpid_r>:
 800d534:	b510      	push	{r4, lr}
 800d536:	f7f7 faa3 	bl	8004a80 <_getpid>
 800d53a:	bd10      	pop	{r4, pc}

0800d53c <__swhatbuf_r>:
 800d53c:	b570      	push	{r4, r5, r6, lr}
 800d53e:	000e      	movs	r6, r1
 800d540:	001d      	movs	r5, r3
 800d542:	230e      	movs	r3, #14
 800d544:	5ec9      	ldrsh	r1, [r1, r3]
 800d546:	0014      	movs	r4, r2
 800d548:	b096      	sub	sp, #88	@ 0x58
 800d54a:	2900      	cmp	r1, #0
 800d54c:	da0c      	bge.n	800d568 <__swhatbuf_r+0x2c>
 800d54e:	89b2      	ldrh	r2, [r6, #12]
 800d550:	2380      	movs	r3, #128	@ 0x80
 800d552:	0011      	movs	r1, r2
 800d554:	4019      	ands	r1, r3
 800d556:	421a      	tst	r2, r3
 800d558:	d114      	bne.n	800d584 <__swhatbuf_r+0x48>
 800d55a:	2380      	movs	r3, #128	@ 0x80
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	2000      	movs	r0, #0
 800d560:	6029      	str	r1, [r5, #0]
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	b016      	add	sp, #88	@ 0x58
 800d566:	bd70      	pop	{r4, r5, r6, pc}
 800d568:	466a      	mov	r2, sp
 800d56a:	f000 f853 	bl	800d614 <_fstat_r>
 800d56e:	2800      	cmp	r0, #0
 800d570:	dbed      	blt.n	800d54e <__swhatbuf_r+0x12>
 800d572:	23f0      	movs	r3, #240	@ 0xf0
 800d574:	9901      	ldr	r1, [sp, #4]
 800d576:	021b      	lsls	r3, r3, #8
 800d578:	4019      	ands	r1, r3
 800d57a:	4b04      	ldr	r3, [pc, #16]	@ (800d58c <__swhatbuf_r+0x50>)
 800d57c:	18c9      	adds	r1, r1, r3
 800d57e:	424b      	negs	r3, r1
 800d580:	4159      	adcs	r1, r3
 800d582:	e7ea      	b.n	800d55a <__swhatbuf_r+0x1e>
 800d584:	2100      	movs	r1, #0
 800d586:	2340      	movs	r3, #64	@ 0x40
 800d588:	e7e9      	b.n	800d55e <__swhatbuf_r+0x22>
 800d58a:	46c0      	nop			@ (mov r8, r8)
 800d58c:	ffffe000 	.word	0xffffe000

0800d590 <__smakebuf_r>:
 800d590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d592:	2602      	movs	r6, #2
 800d594:	898b      	ldrh	r3, [r1, #12]
 800d596:	0005      	movs	r5, r0
 800d598:	000c      	movs	r4, r1
 800d59a:	b085      	sub	sp, #20
 800d59c:	4233      	tst	r3, r6
 800d59e:	d007      	beq.n	800d5b0 <__smakebuf_r+0x20>
 800d5a0:	0023      	movs	r3, r4
 800d5a2:	3347      	adds	r3, #71	@ 0x47
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	6123      	str	r3, [r4, #16]
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	6163      	str	r3, [r4, #20]
 800d5ac:	b005      	add	sp, #20
 800d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b0:	ab03      	add	r3, sp, #12
 800d5b2:	aa02      	add	r2, sp, #8
 800d5b4:	f7ff ffc2 	bl	800d53c <__swhatbuf_r>
 800d5b8:	9f02      	ldr	r7, [sp, #8]
 800d5ba:	9001      	str	r0, [sp, #4]
 800d5bc:	0039      	movs	r1, r7
 800d5be:	0028      	movs	r0, r5
 800d5c0:	f7fe fe76 	bl	800c2b0 <_malloc_r>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d108      	bne.n	800d5da <__smakebuf_r+0x4a>
 800d5c8:	220c      	movs	r2, #12
 800d5ca:	5ea3      	ldrsh	r3, [r4, r2]
 800d5cc:	059a      	lsls	r2, r3, #22
 800d5ce:	d4ed      	bmi.n	800d5ac <__smakebuf_r+0x1c>
 800d5d0:	2203      	movs	r2, #3
 800d5d2:	4393      	bics	r3, r2
 800d5d4:	431e      	orrs	r6, r3
 800d5d6:	81a6      	strh	r6, [r4, #12]
 800d5d8:	e7e2      	b.n	800d5a0 <__smakebuf_r+0x10>
 800d5da:	2380      	movs	r3, #128	@ 0x80
 800d5dc:	89a2      	ldrh	r2, [r4, #12]
 800d5de:	6020      	str	r0, [r4, #0]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	9b03      	ldr	r3, [sp, #12]
 800d5e6:	6120      	str	r0, [r4, #16]
 800d5e8:	6167      	str	r7, [r4, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00c      	beq.n	800d608 <__smakebuf_r+0x78>
 800d5ee:	0028      	movs	r0, r5
 800d5f0:	230e      	movs	r3, #14
 800d5f2:	5ee1      	ldrsh	r1, [r4, r3]
 800d5f4:	f000 f820 	bl	800d638 <_isatty_r>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d005      	beq.n	800d608 <__smakebuf_r+0x78>
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	89a2      	ldrh	r2, [r4, #12]
 800d600:	439a      	bics	r2, r3
 800d602:	3b02      	subs	r3, #2
 800d604:	4313      	orrs	r3, r2
 800d606:	81a3      	strh	r3, [r4, #12]
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	9a01      	ldr	r2, [sp, #4]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	e7cc      	b.n	800d5ac <__smakebuf_r+0x1c>
	...

0800d614 <_fstat_r>:
 800d614:	2300      	movs	r3, #0
 800d616:	b570      	push	{r4, r5, r6, lr}
 800d618:	4d06      	ldr	r5, [pc, #24]	@ (800d634 <_fstat_r+0x20>)
 800d61a:	0004      	movs	r4, r0
 800d61c:	0008      	movs	r0, r1
 800d61e:	0011      	movs	r1, r2
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	f7f7 fa93 	bl	8004b4c <_fstat>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d103      	bne.n	800d632 <_fstat_r+0x1e>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d000      	beq.n	800d632 <_fstat_r+0x1e>
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	bd70      	pop	{r4, r5, r6, pc}
 800d634:	20000590 	.word	0x20000590

0800d638 <_isatty_r>:
 800d638:	2300      	movs	r3, #0
 800d63a:	b570      	push	{r4, r5, r6, lr}
 800d63c:	4d06      	ldr	r5, [pc, #24]	@ (800d658 <_isatty_r+0x20>)
 800d63e:	0004      	movs	r4, r0
 800d640:	0008      	movs	r0, r1
 800d642:	602b      	str	r3, [r5, #0]
 800d644:	f7f7 fa90 	bl	8004b68 <_isatty>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d103      	bne.n	800d654 <_isatty_r+0x1c>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d000      	beq.n	800d654 <_isatty_r+0x1c>
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	bd70      	pop	{r4, r5, r6, pc}
 800d656:	46c0      	nop			@ (mov r8, r8)
 800d658:	20000590 	.word	0x20000590

0800d65c <fmodf>:
 800d65c:	b570      	push	{r4, r5, r6, lr}
 800d65e:	1c06      	adds	r6, r0, #0
 800d660:	1c0d      	adds	r5, r1, #0
 800d662:	f000 f979 	bl	800d958 <__ieee754_fmodf>
 800d666:	1c29      	adds	r1, r5, #0
 800d668:	1c04      	adds	r4, r0, #0
 800d66a:	1c30      	adds	r0, r6, #0
 800d66c:	f7f3 ffd6 	bl	800161c <__aeabi_fcmpun>
 800d670:	2800      	cmp	r0, #0
 800d672:	d10e      	bne.n	800d692 <fmodf+0x36>
 800d674:	2100      	movs	r1, #0
 800d676:	1c28      	adds	r0, r5, #0
 800d678:	f7f2 ff20 	bl	80004bc <__aeabi_fcmpeq>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d008      	beq.n	800d692 <fmodf+0x36>
 800d680:	f7fd feea 	bl	800b458 <__errno>
 800d684:	2321      	movs	r3, #33	@ 0x21
 800d686:	2100      	movs	r1, #0
 800d688:	6003      	str	r3, [r0, #0]
 800d68a:	1c08      	adds	r0, r1, #0
 800d68c:	f7f3 fa3a 	bl	8000b04 <__aeabi_fdiv>
 800d690:	1c04      	adds	r4, r0, #0
 800d692:	1c20      	adds	r0, r4, #0
 800d694:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d698 <cosf>:
 800d698:	b507      	push	{r0, r1, r2, lr}
 800d69a:	4a18      	ldr	r2, [pc, #96]	@ (800d6fc <cosf+0x64>)
 800d69c:	0043      	lsls	r3, r0, #1
 800d69e:	2100      	movs	r1, #0
 800d6a0:	085b      	lsrs	r3, r3, #1
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d914      	bls.n	800d6d0 <cosf+0x38>
 800d6a6:	22ff      	movs	r2, #255	@ 0xff
 800d6a8:	05d2      	lsls	r2, r2, #23
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d303      	bcc.n	800d6b6 <cosf+0x1e>
 800d6ae:	1c01      	adds	r1, r0, #0
 800d6b0:	f7f3 fd50 	bl	8001154 <__aeabi_fsub>
 800d6b4:	bd0e      	pop	{r1, r2, r3, pc}
 800d6b6:	4669      	mov	r1, sp
 800d6b8:	f000 f9ce 	bl	800da58 <__ieee754_rem_pio2f>
 800d6bc:	2203      	movs	r2, #3
 800d6be:	4002      	ands	r2, r0
 800d6c0:	2a01      	cmp	r2, #1
 800d6c2:	d008      	beq.n	800d6d6 <cosf+0x3e>
 800d6c4:	2a02      	cmp	r2, #2
 800d6c6:	d00e      	beq.n	800d6e6 <cosf+0x4e>
 800d6c8:	2a00      	cmp	r2, #0
 800d6ca:	d111      	bne.n	800d6f0 <cosf+0x58>
 800d6cc:	9901      	ldr	r1, [sp, #4]
 800d6ce:	9800      	ldr	r0, [sp, #0]
 800d6d0:	f000 f84e 	bl	800d770 <__kernel_cosf>
 800d6d4:	e7ee      	b.n	800d6b4 <cosf+0x1c>
 800d6d6:	9901      	ldr	r1, [sp, #4]
 800d6d8:	9800      	ldr	r0, [sp, #0]
 800d6da:	f000 f8c9 	bl	800d870 <__kernel_sinf>
 800d6de:	2380      	movs	r3, #128	@ 0x80
 800d6e0:	061b      	lsls	r3, r3, #24
 800d6e2:	18c0      	adds	r0, r0, r3
 800d6e4:	e7e6      	b.n	800d6b4 <cosf+0x1c>
 800d6e6:	9901      	ldr	r1, [sp, #4]
 800d6e8:	9800      	ldr	r0, [sp, #0]
 800d6ea:	f000 f841 	bl	800d770 <__kernel_cosf>
 800d6ee:	e7f6      	b.n	800d6de <cosf+0x46>
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	9901      	ldr	r1, [sp, #4]
 800d6f4:	9800      	ldr	r0, [sp, #0]
 800d6f6:	f000 f8bb 	bl	800d870 <__kernel_sinf>
 800d6fa:	e7db      	b.n	800d6b4 <cosf+0x1c>
 800d6fc:	3f490fd8 	.word	0x3f490fd8

0800d700 <sinf>:
 800d700:	b507      	push	{r0, r1, r2, lr}
 800d702:	4a1a      	ldr	r2, [pc, #104]	@ (800d76c <sinf+0x6c>)
 800d704:	0043      	lsls	r3, r0, #1
 800d706:	085b      	lsrs	r3, r3, #1
 800d708:	4293      	cmp	r3, r2
 800d70a:	d804      	bhi.n	800d716 <sinf+0x16>
 800d70c:	2200      	movs	r2, #0
 800d70e:	2100      	movs	r1, #0
 800d710:	f000 f8ae 	bl	800d870 <__kernel_sinf>
 800d714:	e006      	b.n	800d724 <sinf+0x24>
 800d716:	22ff      	movs	r2, #255	@ 0xff
 800d718:	05d2      	lsls	r2, r2, #23
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d303      	bcc.n	800d726 <sinf+0x26>
 800d71e:	1c01      	adds	r1, r0, #0
 800d720:	f7f3 fd18 	bl	8001154 <__aeabi_fsub>
 800d724:	bd0e      	pop	{r1, r2, r3, pc}
 800d726:	4669      	mov	r1, sp
 800d728:	f000 f996 	bl	800da58 <__ieee754_rem_pio2f>
 800d72c:	2303      	movs	r3, #3
 800d72e:	4018      	ands	r0, r3
 800d730:	2801      	cmp	r0, #1
 800d732:	d007      	beq.n	800d744 <sinf+0x44>
 800d734:	2802      	cmp	r0, #2
 800d736:	d00a      	beq.n	800d74e <sinf+0x4e>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d111      	bne.n	800d760 <sinf+0x60>
 800d73c:	2201      	movs	r2, #1
 800d73e:	9901      	ldr	r1, [sp, #4]
 800d740:	9800      	ldr	r0, [sp, #0]
 800d742:	e7e5      	b.n	800d710 <sinf+0x10>
 800d744:	9901      	ldr	r1, [sp, #4]
 800d746:	9800      	ldr	r0, [sp, #0]
 800d748:	f000 f812 	bl	800d770 <__kernel_cosf>
 800d74c:	e7ea      	b.n	800d724 <sinf+0x24>
 800d74e:	2201      	movs	r2, #1
 800d750:	9901      	ldr	r1, [sp, #4]
 800d752:	9800      	ldr	r0, [sp, #0]
 800d754:	f000 f88c 	bl	800d870 <__kernel_sinf>
 800d758:	2380      	movs	r3, #128	@ 0x80
 800d75a:	061b      	lsls	r3, r3, #24
 800d75c:	18c0      	adds	r0, r0, r3
 800d75e:	e7e1      	b.n	800d724 <sinf+0x24>
 800d760:	9901      	ldr	r1, [sp, #4]
 800d762:	9800      	ldr	r0, [sp, #0]
 800d764:	f000 f804 	bl	800d770 <__kernel_cosf>
 800d768:	e7f6      	b.n	800d758 <sinf+0x58>
 800d76a:	46c0      	nop			@ (mov r8, r8)
 800d76c:	3f490fd8 	.word	0x3f490fd8

0800d770 <__kernel_cosf>:
 800d770:	23c8      	movs	r3, #200	@ 0xc8
 800d772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d774:	0044      	lsls	r4, r0, #1
 800d776:	1c06      	adds	r6, r0, #0
 800d778:	9101      	str	r1, [sp, #4]
 800d77a:	0864      	lsrs	r4, r4, #1
 800d77c:	059b      	lsls	r3, r3, #22
 800d77e:	429c      	cmp	r4, r3
 800d780:	d203      	bcs.n	800d78a <__kernel_cosf+0x1a>
 800d782:	f7f3 ff61 	bl	8001648 <__aeabi_f2iz>
 800d786:	2800      	cmp	r0, #0
 800d788:	d05d      	beq.n	800d846 <__kernel_cosf+0xd6>
 800d78a:	1c31      	adds	r1, r6, #0
 800d78c:	1c30      	adds	r0, r6, #0
 800d78e:	f7f3 fb87 	bl	8000ea0 <__aeabi_fmul>
 800d792:	21fc      	movs	r1, #252	@ 0xfc
 800d794:	0589      	lsls	r1, r1, #22
 800d796:	1c05      	adds	r5, r0, #0
 800d798:	f7f3 fb82 	bl	8000ea0 <__aeabi_fmul>
 800d79c:	492b      	ldr	r1, [pc, #172]	@ (800d84c <__kernel_cosf+0xdc>)
 800d79e:	1c07      	adds	r7, r0, #0
 800d7a0:	1c28      	adds	r0, r5, #0
 800d7a2:	f7f3 fb7d 	bl	8000ea0 <__aeabi_fmul>
 800d7a6:	492a      	ldr	r1, [pc, #168]	@ (800d850 <__kernel_cosf+0xe0>)
 800d7a8:	f7f2 ffba 	bl	8000720 <__aeabi_fadd>
 800d7ac:	1c29      	adds	r1, r5, #0
 800d7ae:	f7f3 fb77 	bl	8000ea0 <__aeabi_fmul>
 800d7b2:	4928      	ldr	r1, [pc, #160]	@ (800d854 <__kernel_cosf+0xe4>)
 800d7b4:	f7f3 fcce 	bl	8001154 <__aeabi_fsub>
 800d7b8:	1c29      	adds	r1, r5, #0
 800d7ba:	f7f3 fb71 	bl	8000ea0 <__aeabi_fmul>
 800d7be:	4926      	ldr	r1, [pc, #152]	@ (800d858 <__kernel_cosf+0xe8>)
 800d7c0:	f7f2 ffae 	bl	8000720 <__aeabi_fadd>
 800d7c4:	1c29      	adds	r1, r5, #0
 800d7c6:	f7f3 fb6b 	bl	8000ea0 <__aeabi_fmul>
 800d7ca:	4924      	ldr	r1, [pc, #144]	@ (800d85c <__kernel_cosf+0xec>)
 800d7cc:	f7f3 fcc2 	bl	8001154 <__aeabi_fsub>
 800d7d0:	1c29      	adds	r1, r5, #0
 800d7d2:	f7f3 fb65 	bl	8000ea0 <__aeabi_fmul>
 800d7d6:	4922      	ldr	r1, [pc, #136]	@ (800d860 <__kernel_cosf+0xf0>)
 800d7d8:	f7f2 ffa2 	bl	8000720 <__aeabi_fadd>
 800d7dc:	1c29      	adds	r1, r5, #0
 800d7de:	f7f3 fb5f 	bl	8000ea0 <__aeabi_fmul>
 800d7e2:	1c29      	adds	r1, r5, #0
 800d7e4:	f7f3 fb5c 	bl	8000ea0 <__aeabi_fmul>
 800d7e8:	9901      	ldr	r1, [sp, #4]
 800d7ea:	1c05      	adds	r5, r0, #0
 800d7ec:	1c30      	adds	r0, r6, #0
 800d7ee:	f7f3 fb57 	bl	8000ea0 <__aeabi_fmul>
 800d7f2:	1c01      	adds	r1, r0, #0
 800d7f4:	1c28      	adds	r0, r5, #0
 800d7f6:	f7f3 fcad 	bl	8001154 <__aeabi_fsub>
 800d7fa:	4b1a      	ldr	r3, [pc, #104]	@ (800d864 <__kernel_cosf+0xf4>)
 800d7fc:	1c05      	adds	r5, r0, #0
 800d7fe:	429c      	cmp	r4, r3
 800d800:	d809      	bhi.n	800d816 <__kernel_cosf+0xa6>
 800d802:	1c01      	adds	r1, r0, #0
 800d804:	1c38      	adds	r0, r7, #0
 800d806:	f7f3 fca5 	bl	8001154 <__aeabi_fsub>
 800d80a:	1c01      	adds	r1, r0, #0
 800d80c:	20fe      	movs	r0, #254	@ 0xfe
 800d80e:	0580      	lsls	r0, r0, #22
 800d810:	f7f3 fca0 	bl	8001154 <__aeabi_fsub>
 800d814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d816:	4b14      	ldr	r3, [pc, #80]	@ (800d868 <__kernel_cosf+0xf8>)
 800d818:	429c      	cmp	r4, r3
 800d81a:	d812      	bhi.n	800d842 <__kernel_cosf+0xd2>
 800d81c:	23ff      	movs	r3, #255	@ 0xff
 800d81e:	061b      	lsls	r3, r3, #24
 800d820:	18e4      	adds	r4, r4, r3
 800d822:	20fe      	movs	r0, #254	@ 0xfe
 800d824:	1c21      	adds	r1, r4, #0
 800d826:	0580      	lsls	r0, r0, #22
 800d828:	f7f3 fc94 	bl	8001154 <__aeabi_fsub>
 800d82c:	1c21      	adds	r1, r4, #0
 800d82e:	1c06      	adds	r6, r0, #0
 800d830:	1c38      	adds	r0, r7, #0
 800d832:	f7f3 fc8f 	bl	8001154 <__aeabi_fsub>
 800d836:	1c29      	adds	r1, r5, #0
 800d838:	f7f3 fc8c 	bl	8001154 <__aeabi_fsub>
 800d83c:	1c01      	adds	r1, r0, #0
 800d83e:	1c30      	adds	r0, r6, #0
 800d840:	e7e6      	b.n	800d810 <__kernel_cosf+0xa0>
 800d842:	4c0a      	ldr	r4, [pc, #40]	@ (800d86c <__kernel_cosf+0xfc>)
 800d844:	e7ed      	b.n	800d822 <__kernel_cosf+0xb2>
 800d846:	20fe      	movs	r0, #254	@ 0xfe
 800d848:	0580      	lsls	r0, r0, #22
 800d84a:	e7e3      	b.n	800d814 <__kernel_cosf+0xa4>
 800d84c:	ad47d74e 	.word	0xad47d74e
 800d850:	310f74f6 	.word	0x310f74f6
 800d854:	3493f27c 	.word	0x3493f27c
 800d858:	37d00d01 	.word	0x37d00d01
 800d85c:	3ab60b61 	.word	0x3ab60b61
 800d860:	3d2aaaab 	.word	0x3d2aaaab
 800d864:	3e999999 	.word	0x3e999999
 800d868:	3f480000 	.word	0x3f480000
 800d86c:	3e900000 	.word	0x3e900000

0800d870 <__kernel_sinf>:
 800d870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d872:	9201      	str	r2, [sp, #4]
 800d874:	22c8      	movs	r2, #200	@ 0xc8
 800d876:	0043      	lsls	r3, r0, #1
 800d878:	1c04      	adds	r4, r0, #0
 800d87a:	9100      	str	r1, [sp, #0]
 800d87c:	085b      	lsrs	r3, r3, #1
 800d87e:	0592      	lsls	r2, r2, #22
 800d880:	4293      	cmp	r3, r2
 800d882:	d203      	bcs.n	800d88c <__kernel_sinf+0x1c>
 800d884:	f7f3 fee0 	bl	8001648 <__aeabi_f2iz>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d035      	beq.n	800d8f8 <__kernel_sinf+0x88>
 800d88c:	1c21      	adds	r1, r4, #0
 800d88e:	1c20      	adds	r0, r4, #0
 800d890:	f7f3 fb06 	bl	8000ea0 <__aeabi_fmul>
 800d894:	1c05      	adds	r5, r0, #0
 800d896:	1c01      	adds	r1, r0, #0
 800d898:	1c20      	adds	r0, r4, #0
 800d89a:	f7f3 fb01 	bl	8000ea0 <__aeabi_fmul>
 800d89e:	4928      	ldr	r1, [pc, #160]	@ (800d940 <__kernel_sinf+0xd0>)
 800d8a0:	1c06      	adds	r6, r0, #0
 800d8a2:	1c28      	adds	r0, r5, #0
 800d8a4:	f7f3 fafc 	bl	8000ea0 <__aeabi_fmul>
 800d8a8:	4926      	ldr	r1, [pc, #152]	@ (800d944 <__kernel_sinf+0xd4>)
 800d8aa:	f7f3 fc53 	bl	8001154 <__aeabi_fsub>
 800d8ae:	1c29      	adds	r1, r5, #0
 800d8b0:	f7f3 faf6 	bl	8000ea0 <__aeabi_fmul>
 800d8b4:	4924      	ldr	r1, [pc, #144]	@ (800d948 <__kernel_sinf+0xd8>)
 800d8b6:	f7f2 ff33 	bl	8000720 <__aeabi_fadd>
 800d8ba:	1c29      	adds	r1, r5, #0
 800d8bc:	f7f3 faf0 	bl	8000ea0 <__aeabi_fmul>
 800d8c0:	4922      	ldr	r1, [pc, #136]	@ (800d94c <__kernel_sinf+0xdc>)
 800d8c2:	f7f3 fc47 	bl	8001154 <__aeabi_fsub>
 800d8c6:	1c29      	adds	r1, r5, #0
 800d8c8:	f7f3 faea 	bl	8000ea0 <__aeabi_fmul>
 800d8cc:	4920      	ldr	r1, [pc, #128]	@ (800d950 <__kernel_sinf+0xe0>)
 800d8ce:	f7f2 ff27 	bl	8000720 <__aeabi_fadd>
 800d8d2:	9b01      	ldr	r3, [sp, #4]
 800d8d4:	1c07      	adds	r7, r0, #0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d110      	bne.n	800d8fc <__kernel_sinf+0x8c>
 800d8da:	1c01      	adds	r1, r0, #0
 800d8dc:	1c28      	adds	r0, r5, #0
 800d8de:	f7f3 fadf 	bl	8000ea0 <__aeabi_fmul>
 800d8e2:	491c      	ldr	r1, [pc, #112]	@ (800d954 <__kernel_sinf+0xe4>)
 800d8e4:	f7f3 fc36 	bl	8001154 <__aeabi_fsub>
 800d8e8:	1c31      	adds	r1, r6, #0
 800d8ea:	f7f3 fad9 	bl	8000ea0 <__aeabi_fmul>
 800d8ee:	1c01      	adds	r1, r0, #0
 800d8f0:	1c20      	adds	r0, r4, #0
 800d8f2:	f7f2 ff15 	bl	8000720 <__aeabi_fadd>
 800d8f6:	1c04      	adds	r4, r0, #0
 800d8f8:	1c20      	adds	r0, r4, #0
 800d8fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8fc:	21fc      	movs	r1, #252	@ 0xfc
 800d8fe:	9800      	ldr	r0, [sp, #0]
 800d900:	0589      	lsls	r1, r1, #22
 800d902:	f7f3 facd 	bl	8000ea0 <__aeabi_fmul>
 800d906:	1c39      	adds	r1, r7, #0
 800d908:	9001      	str	r0, [sp, #4]
 800d90a:	1c30      	adds	r0, r6, #0
 800d90c:	f7f3 fac8 	bl	8000ea0 <__aeabi_fmul>
 800d910:	1c01      	adds	r1, r0, #0
 800d912:	9801      	ldr	r0, [sp, #4]
 800d914:	f7f3 fc1e 	bl	8001154 <__aeabi_fsub>
 800d918:	1c29      	adds	r1, r5, #0
 800d91a:	f7f3 fac1 	bl	8000ea0 <__aeabi_fmul>
 800d91e:	9900      	ldr	r1, [sp, #0]
 800d920:	f7f3 fc18 	bl	8001154 <__aeabi_fsub>
 800d924:	490b      	ldr	r1, [pc, #44]	@ (800d954 <__kernel_sinf+0xe4>)
 800d926:	1c05      	adds	r5, r0, #0
 800d928:	1c30      	adds	r0, r6, #0
 800d92a:	f7f3 fab9 	bl	8000ea0 <__aeabi_fmul>
 800d92e:	1c01      	adds	r1, r0, #0
 800d930:	1c28      	adds	r0, r5, #0
 800d932:	f7f2 fef5 	bl	8000720 <__aeabi_fadd>
 800d936:	1c01      	adds	r1, r0, #0
 800d938:	1c20      	adds	r0, r4, #0
 800d93a:	f7f3 fc0b 	bl	8001154 <__aeabi_fsub>
 800d93e:	e7da      	b.n	800d8f6 <__kernel_sinf+0x86>
 800d940:	2f2ec9d3 	.word	0x2f2ec9d3
 800d944:	32d72f34 	.word	0x32d72f34
 800d948:	3638ef1b 	.word	0x3638ef1b
 800d94c:	39500d01 	.word	0x39500d01
 800d950:	3c088889 	.word	0x3c088889
 800d954:	3e2aaaab 	.word	0x3e2aaaab

0800d958 <__ieee754_fmodf>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	23ff      	movs	r3, #255	@ 0xff
 800d95c:	004f      	lsls	r7, r1, #1
 800d95e:	087f      	lsrs	r7, r7, #1
 800d960:	1e7a      	subs	r2, r7, #1
 800d962:	05db      	lsls	r3, r3, #23
 800d964:	429a      	cmp	r2, r3
 800d966:	d204      	bcs.n	800d972 <__ieee754_fmodf+0x1a>
 800d968:	0044      	lsls	r4, r0, #1
 800d96a:	0006      	movs	r6, r0
 800d96c:	0864      	lsrs	r4, r4, #1
 800d96e:	429c      	cmp	r4, r3
 800d970:	d305      	bcc.n	800d97e <__ieee754_fmodf+0x26>
 800d972:	f7f3 fa95 	bl	8000ea0 <__aeabi_fmul>
 800d976:	1c01      	adds	r1, r0, #0
 800d978:	f7f3 f8c4 	bl	8000b04 <__aeabi_fdiv>
 800d97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97e:	42bc      	cmp	r4, r7
 800d980:	dbfc      	blt.n	800d97c <__ieee754_fmodf+0x24>
 800d982:	0fc5      	lsrs	r5, r0, #31
 800d984:	07ed      	lsls	r5, r5, #31
 800d986:	42bc      	cmp	r4, r7
 800d988:	d103      	bne.n	800d992 <__ieee754_fmodf+0x3a>
 800d98a:	4b31      	ldr	r3, [pc, #196]	@ (800da50 <__ieee754_fmodf+0xf8>)
 800d98c:	0f6d      	lsrs	r5, r5, #29
 800d98e:	58e8      	ldr	r0, [r5, r3]
 800d990:	e7f4      	b.n	800d97c <__ieee754_fmodf+0x24>
 800d992:	4218      	tst	r0, r3
 800d994:	d137      	bne.n	800da06 <__ieee754_fmodf+0xae>
 800d996:	237e      	movs	r3, #126	@ 0x7e
 800d998:	0222      	lsls	r2, r4, #8
 800d99a:	425b      	negs	r3, r3
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	dc2f      	bgt.n	800da00 <__ieee754_fmodf+0xa8>
 800d9a0:	22ff      	movs	r2, #255	@ 0xff
 800d9a2:	05d2      	lsls	r2, r2, #23
 800d9a4:	420a      	tst	r2, r1
 800d9a6:	d134      	bne.n	800da12 <__ieee754_fmodf+0xba>
 800d9a8:	227e      	movs	r2, #126	@ 0x7e
 800d9aa:	0238      	lsls	r0, r7, #8
 800d9ac:	4252      	negs	r2, r2
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	da2c      	bge.n	800da0c <__ieee754_fmodf+0xb4>
 800d9b2:	0018      	movs	r0, r3
 800d9b4:	307e      	adds	r0, #126	@ 0x7e
 800d9b6:	db2f      	blt.n	800da18 <__ieee754_fmodf+0xc0>
 800d9b8:	2480      	movs	r4, #128	@ 0x80
 800d9ba:	0276      	lsls	r6, r6, #9
 800d9bc:	0a76      	lsrs	r6, r6, #9
 800d9be:	0424      	lsls	r4, r4, #16
 800d9c0:	4334      	orrs	r4, r6
 800d9c2:	0010      	movs	r0, r2
 800d9c4:	307e      	adds	r0, #126	@ 0x7e
 800d9c6:	db2c      	blt.n	800da22 <__ieee754_fmodf+0xca>
 800d9c8:	0248      	lsls	r0, r1, #9
 800d9ca:	2180      	movs	r1, #128	@ 0x80
 800d9cc:	0a40      	lsrs	r0, r0, #9
 800d9ce:	0409      	lsls	r1, r1, #16
 800d9d0:	4301      	orrs	r1, r0
 800d9d2:	1a98      	subs	r0, r3, r2
 800d9d4:	1a63      	subs	r3, r4, r1
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d129      	bne.n	800da2e <__ieee754_fmodf+0xd6>
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	da00      	bge.n	800d9e0 <__ieee754_fmodf+0x88>
 800d9de:	0023      	movs	r3, r4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d0d2      	beq.n	800d98a <__ieee754_fmodf+0x32>
 800d9e4:	2180      	movs	r1, #128	@ 0x80
 800d9e6:	0409      	lsls	r1, r1, #16
 800d9e8:	428b      	cmp	r3, r1
 800d9ea:	db27      	blt.n	800da3c <__ieee754_fmodf+0xe4>
 800d9ec:	0011      	movs	r1, r2
 800d9ee:	317e      	adds	r1, #126	@ 0x7e
 800d9f0:	db27      	blt.n	800da42 <__ieee754_fmodf+0xea>
 800d9f2:	4918      	ldr	r1, [pc, #96]	@ (800da54 <__ieee754_fmodf+0xfc>)
 800d9f4:	327f      	adds	r2, #127	@ 0x7f
 800d9f6:	1858      	adds	r0, r3, r1
 800d9f8:	05d2      	lsls	r2, r2, #23
 800d9fa:	4328      	orrs	r0, r5
 800d9fc:	4310      	orrs	r0, r2
 800d9fe:	e7bd      	b.n	800d97c <__ieee754_fmodf+0x24>
 800da00:	3b01      	subs	r3, #1
 800da02:	0052      	lsls	r2, r2, #1
 800da04:	e7ca      	b.n	800d99c <__ieee754_fmodf+0x44>
 800da06:	15e3      	asrs	r3, r4, #23
 800da08:	3b7f      	subs	r3, #127	@ 0x7f
 800da0a:	e7c9      	b.n	800d9a0 <__ieee754_fmodf+0x48>
 800da0c:	3a01      	subs	r2, #1
 800da0e:	0040      	lsls	r0, r0, #1
 800da10:	e7cd      	b.n	800d9ae <__ieee754_fmodf+0x56>
 800da12:	15fa      	asrs	r2, r7, #23
 800da14:	3a7f      	subs	r2, #127	@ 0x7f
 800da16:	e7cc      	b.n	800d9b2 <__ieee754_fmodf+0x5a>
 800da18:	207e      	movs	r0, #126	@ 0x7e
 800da1a:	4240      	negs	r0, r0
 800da1c:	1ac0      	subs	r0, r0, r3
 800da1e:	4084      	lsls	r4, r0
 800da20:	e7cf      	b.n	800d9c2 <__ieee754_fmodf+0x6a>
 800da22:	217e      	movs	r1, #126	@ 0x7e
 800da24:	4249      	negs	r1, r1
 800da26:	1a89      	subs	r1, r1, r2
 800da28:	408f      	lsls	r7, r1
 800da2a:	0039      	movs	r1, r7
 800da2c:	e7d1      	b.n	800d9d2 <__ieee754_fmodf+0x7a>
 800da2e:	0064      	lsls	r4, r4, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	db01      	blt.n	800da38 <__ieee754_fmodf+0xe0>
 800da34:	d0a9      	beq.n	800d98a <__ieee754_fmodf+0x32>
 800da36:	005c      	lsls	r4, r3, #1
 800da38:	3801      	subs	r0, #1
 800da3a:	e7cb      	b.n	800d9d4 <__ieee754_fmodf+0x7c>
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	3a01      	subs	r2, #1
 800da40:	e7d2      	b.n	800d9e8 <__ieee754_fmodf+0x90>
 800da42:	217e      	movs	r1, #126	@ 0x7e
 800da44:	4249      	negs	r1, r1
 800da46:	1a8a      	subs	r2, r1, r2
 800da48:	4113      	asrs	r3, r2
 800da4a:	432b      	orrs	r3, r5
 800da4c:	0018      	movs	r0, r3
 800da4e:	e795      	b.n	800d97c <__ieee754_fmodf+0x24>
 800da50:	0800e8e4 	.word	0x0800e8e4
 800da54:	ff800000 	.word	0xff800000

0800da58 <__ieee754_rem_pio2f>:
 800da58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5a:	4ba1      	ldr	r3, [pc, #644]	@ (800dce0 <__ieee754_rem_pio2f+0x288>)
 800da5c:	b08d      	sub	sp, #52	@ 0x34
 800da5e:	0045      	lsls	r5, r0, #1
 800da60:	000c      	movs	r4, r1
 800da62:	1c07      	adds	r7, r0, #0
 800da64:	9006      	str	r0, [sp, #24]
 800da66:	086d      	lsrs	r5, r5, #1
 800da68:	429d      	cmp	r5, r3
 800da6a:	d804      	bhi.n	800da76 <__ieee754_rem_pio2f+0x1e>
 800da6c:	2300      	movs	r3, #0
 800da6e:	6008      	str	r0, [r1, #0]
 800da70:	604b      	str	r3, [r1, #4]
 800da72:	2600      	movs	r6, #0
 800da74:	e01b      	b.n	800daae <__ieee754_rem_pio2f+0x56>
 800da76:	4b9b      	ldr	r3, [pc, #620]	@ (800dce4 <__ieee754_rem_pio2f+0x28c>)
 800da78:	429d      	cmp	r5, r3
 800da7a:	d84c      	bhi.n	800db16 <__ieee754_rem_pio2f+0xbe>
 800da7c:	4d9a      	ldr	r5, [pc, #616]	@ (800dce8 <__ieee754_rem_pio2f+0x290>)
 800da7e:	4e9b      	ldr	r6, [pc, #620]	@ (800dcec <__ieee754_rem_pio2f+0x294>)
 800da80:	499b      	ldr	r1, [pc, #620]	@ (800dcf0 <__ieee754_rem_pio2f+0x298>)
 800da82:	4005      	ands	r5, r0
 800da84:	2800      	cmp	r0, #0
 800da86:	dd23      	ble.n	800dad0 <__ieee754_rem_pio2f+0x78>
 800da88:	f7f3 fb64 	bl	8001154 <__aeabi_fsub>
 800da8c:	1c07      	adds	r7, r0, #0
 800da8e:	42b5      	cmp	r5, r6
 800da90:	d010      	beq.n	800dab4 <__ieee754_rem_pio2f+0x5c>
 800da92:	4998      	ldr	r1, [pc, #608]	@ (800dcf4 <__ieee754_rem_pio2f+0x29c>)
 800da94:	f7f3 fb5e 	bl	8001154 <__aeabi_fsub>
 800da98:	1c01      	adds	r1, r0, #0
 800da9a:	1c05      	adds	r5, r0, #0
 800da9c:	1c38      	adds	r0, r7, #0
 800da9e:	f7f3 fb59 	bl	8001154 <__aeabi_fsub>
 800daa2:	4994      	ldr	r1, [pc, #592]	@ (800dcf4 <__ieee754_rem_pio2f+0x29c>)
 800daa4:	f7f3 fb56 	bl	8001154 <__aeabi_fsub>
 800daa8:	2601      	movs	r6, #1
 800daaa:	6025      	str	r5, [r4, #0]
 800daac:	6060      	str	r0, [r4, #4]
 800daae:	0030      	movs	r0, r6
 800dab0:	b00d      	add	sp, #52	@ 0x34
 800dab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dab4:	4990      	ldr	r1, [pc, #576]	@ (800dcf8 <__ieee754_rem_pio2f+0x2a0>)
 800dab6:	f7f3 fb4d 	bl	8001154 <__aeabi_fsub>
 800daba:	4990      	ldr	r1, [pc, #576]	@ (800dcfc <__ieee754_rem_pio2f+0x2a4>)
 800dabc:	1c06      	adds	r6, r0, #0
 800dabe:	f7f3 fb49 	bl	8001154 <__aeabi_fsub>
 800dac2:	1c01      	adds	r1, r0, #0
 800dac4:	1c05      	adds	r5, r0, #0
 800dac6:	1c30      	adds	r0, r6, #0
 800dac8:	f7f3 fb44 	bl	8001154 <__aeabi_fsub>
 800dacc:	498b      	ldr	r1, [pc, #556]	@ (800dcfc <__ieee754_rem_pio2f+0x2a4>)
 800dace:	e7e9      	b.n	800daa4 <__ieee754_rem_pio2f+0x4c>
 800dad0:	f7f2 fe26 	bl	8000720 <__aeabi_fadd>
 800dad4:	1c07      	adds	r7, r0, #0
 800dad6:	42b5      	cmp	r5, r6
 800dad8:	d00f      	beq.n	800dafa <__ieee754_rem_pio2f+0xa2>
 800dada:	4986      	ldr	r1, [pc, #536]	@ (800dcf4 <__ieee754_rem_pio2f+0x29c>)
 800dadc:	f7f2 fe20 	bl	8000720 <__aeabi_fadd>
 800dae0:	1c01      	adds	r1, r0, #0
 800dae2:	1c05      	adds	r5, r0, #0
 800dae4:	1c38      	adds	r0, r7, #0
 800dae6:	f7f3 fb35 	bl	8001154 <__aeabi_fsub>
 800daea:	4982      	ldr	r1, [pc, #520]	@ (800dcf4 <__ieee754_rem_pio2f+0x29c>)
 800daec:	f7f2 fe18 	bl	8000720 <__aeabi_fadd>
 800daf0:	2601      	movs	r6, #1
 800daf2:	6025      	str	r5, [r4, #0]
 800daf4:	6060      	str	r0, [r4, #4]
 800daf6:	4276      	negs	r6, r6
 800daf8:	e7d9      	b.n	800daae <__ieee754_rem_pio2f+0x56>
 800dafa:	497f      	ldr	r1, [pc, #508]	@ (800dcf8 <__ieee754_rem_pio2f+0x2a0>)
 800dafc:	f7f2 fe10 	bl	8000720 <__aeabi_fadd>
 800db00:	497e      	ldr	r1, [pc, #504]	@ (800dcfc <__ieee754_rem_pio2f+0x2a4>)
 800db02:	1c06      	adds	r6, r0, #0
 800db04:	f7f2 fe0c 	bl	8000720 <__aeabi_fadd>
 800db08:	1c01      	adds	r1, r0, #0
 800db0a:	1c05      	adds	r5, r0, #0
 800db0c:	1c30      	adds	r0, r6, #0
 800db0e:	f7f3 fb21 	bl	8001154 <__aeabi_fsub>
 800db12:	497a      	ldr	r1, [pc, #488]	@ (800dcfc <__ieee754_rem_pio2f+0x2a4>)
 800db14:	e7ea      	b.n	800daec <__ieee754_rem_pio2f+0x94>
 800db16:	4b7a      	ldr	r3, [pc, #488]	@ (800dd00 <__ieee754_rem_pio2f+0x2a8>)
 800db18:	429d      	cmp	r5, r3
 800db1a:	d900      	bls.n	800db1e <__ieee754_rem_pio2f+0xc6>
 800db1c:	e090      	b.n	800dc40 <__ieee754_rem_pio2f+0x1e8>
 800db1e:	f000 f8fd 	bl	800dd1c <fabsf>
 800db22:	4978      	ldr	r1, [pc, #480]	@ (800dd04 <__ieee754_rem_pio2f+0x2ac>)
 800db24:	9003      	str	r0, [sp, #12]
 800db26:	f7f3 f9bb 	bl	8000ea0 <__aeabi_fmul>
 800db2a:	21fc      	movs	r1, #252	@ 0xfc
 800db2c:	0589      	lsls	r1, r1, #22
 800db2e:	f7f2 fdf7 	bl	8000720 <__aeabi_fadd>
 800db32:	f7f3 fd89 	bl	8001648 <__aeabi_f2iz>
 800db36:	0006      	movs	r6, r0
 800db38:	f7f3 fda6 	bl	8001688 <__aeabi_i2f>
 800db3c:	496c      	ldr	r1, [pc, #432]	@ (800dcf0 <__ieee754_rem_pio2f+0x298>)
 800db3e:	9005      	str	r0, [sp, #20]
 800db40:	f7f3 f9ae 	bl	8000ea0 <__aeabi_fmul>
 800db44:	1c01      	adds	r1, r0, #0
 800db46:	9803      	ldr	r0, [sp, #12]
 800db48:	f7f3 fb04 	bl	8001154 <__aeabi_fsub>
 800db4c:	4969      	ldr	r1, [pc, #420]	@ (800dcf4 <__ieee754_rem_pio2f+0x29c>)
 800db4e:	9003      	str	r0, [sp, #12]
 800db50:	9805      	ldr	r0, [sp, #20]
 800db52:	f7f3 f9a5 	bl	8000ea0 <__aeabi_fmul>
 800db56:	9004      	str	r0, [sp, #16]
 800db58:	2e1f      	cmp	r6, #31
 800db5a:	dc0c      	bgt.n	800db76 <__ieee754_rem_pio2f+0x11e>
 800db5c:	4a6a      	ldr	r2, [pc, #424]	@ (800dd08 <__ieee754_rem_pio2f+0x2b0>)
 800db5e:	1e71      	subs	r1, r6, #1
 800db60:	0089      	lsls	r1, r1, #2
 800db62:	4b6a      	ldr	r3, [pc, #424]	@ (800dd0c <__ieee754_rem_pio2f+0x2b4>)
 800db64:	588a      	ldr	r2, [r1, r2]
 800db66:	403b      	ands	r3, r7
 800db68:	4293      	cmp	r3, r2
 800db6a:	d004      	beq.n	800db76 <__ieee754_rem_pio2f+0x11e>
 800db6c:	1c01      	adds	r1, r0, #0
 800db6e:	9803      	ldr	r0, [sp, #12]
 800db70:	f7f3 faf0 	bl	8001154 <__aeabi_fsub>
 800db74:	e00c      	b.n	800db90 <__ieee754_rem_pio2f+0x138>
 800db76:	9904      	ldr	r1, [sp, #16]
 800db78:	9803      	ldr	r0, [sp, #12]
 800db7a:	f7f3 faeb 	bl	8001154 <__aeabi_fsub>
 800db7e:	22ff      	movs	r2, #255	@ 0xff
 800db80:	15eb      	asrs	r3, r5, #23
 800db82:	9307      	str	r3, [sp, #28]
 800db84:	0dc3      	lsrs	r3, r0, #23
 800db86:	4013      	ands	r3, r2
 800db88:	9a07      	ldr	r2, [sp, #28]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	2b08      	cmp	r3, #8
 800db8e:	dc01      	bgt.n	800db94 <__ieee754_rem_pio2f+0x13c>
 800db90:	6020      	str	r0, [r4, #0]
 800db92:	e026      	b.n	800dbe2 <__ieee754_rem_pio2f+0x18a>
 800db94:	4958      	ldr	r1, [pc, #352]	@ (800dcf8 <__ieee754_rem_pio2f+0x2a0>)
 800db96:	9805      	ldr	r0, [sp, #20]
 800db98:	f7f3 f982 	bl	8000ea0 <__aeabi_fmul>
 800db9c:	1c05      	adds	r5, r0, #0
 800db9e:	1c01      	adds	r1, r0, #0
 800dba0:	9803      	ldr	r0, [sp, #12]
 800dba2:	f7f3 fad7 	bl	8001154 <__aeabi_fsub>
 800dba6:	1c01      	adds	r1, r0, #0
 800dba8:	1c07      	adds	r7, r0, #0
 800dbaa:	9803      	ldr	r0, [sp, #12]
 800dbac:	f7f3 fad2 	bl	8001154 <__aeabi_fsub>
 800dbb0:	1c29      	adds	r1, r5, #0
 800dbb2:	f7f3 facf 	bl	8001154 <__aeabi_fsub>
 800dbb6:	4951      	ldr	r1, [pc, #324]	@ (800dcfc <__ieee754_rem_pio2f+0x2a4>)
 800dbb8:	1c05      	adds	r5, r0, #0
 800dbba:	9805      	ldr	r0, [sp, #20]
 800dbbc:	f7f3 f970 	bl	8000ea0 <__aeabi_fmul>
 800dbc0:	1c29      	adds	r1, r5, #0
 800dbc2:	f7f3 fac7 	bl	8001154 <__aeabi_fsub>
 800dbc6:	9004      	str	r0, [sp, #16]
 800dbc8:	1c01      	adds	r1, r0, #0
 800dbca:	1c38      	adds	r0, r7, #0
 800dbcc:	f7f3 fac2 	bl	8001154 <__aeabi_fsub>
 800dbd0:	22ff      	movs	r2, #255	@ 0xff
 800dbd2:	0dc3      	lsrs	r3, r0, #23
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	9a07      	ldr	r2, [sp, #28]
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	2b19      	cmp	r3, #25
 800dbdc:	dc15      	bgt.n	800dc0a <__ieee754_rem_pio2f+0x1b2>
 800dbde:	6020      	str	r0, [r4, #0]
 800dbe0:	9703      	str	r7, [sp, #12]
 800dbe2:	6825      	ldr	r5, [r4, #0]
 800dbe4:	9803      	ldr	r0, [sp, #12]
 800dbe6:	1c29      	adds	r1, r5, #0
 800dbe8:	f7f3 fab4 	bl	8001154 <__aeabi_fsub>
 800dbec:	9904      	ldr	r1, [sp, #16]
 800dbee:	f7f3 fab1 	bl	8001154 <__aeabi_fsub>
 800dbf2:	9b06      	ldr	r3, [sp, #24]
 800dbf4:	6060      	str	r0, [r4, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	db00      	blt.n	800dbfc <__ieee754_rem_pio2f+0x1a4>
 800dbfa:	e758      	b.n	800daae <__ieee754_rem_pio2f+0x56>
 800dbfc:	2380      	movs	r3, #128	@ 0x80
 800dbfe:	061b      	lsls	r3, r3, #24
 800dc00:	18ed      	adds	r5, r5, r3
 800dc02:	18c0      	adds	r0, r0, r3
 800dc04:	6025      	str	r5, [r4, #0]
 800dc06:	6060      	str	r0, [r4, #4]
 800dc08:	e775      	b.n	800daf6 <__ieee754_rem_pio2f+0x9e>
 800dc0a:	4941      	ldr	r1, [pc, #260]	@ (800dd10 <__ieee754_rem_pio2f+0x2b8>)
 800dc0c:	9805      	ldr	r0, [sp, #20]
 800dc0e:	f7f3 f947 	bl	8000ea0 <__aeabi_fmul>
 800dc12:	1c05      	adds	r5, r0, #0
 800dc14:	1c01      	adds	r1, r0, #0
 800dc16:	1c38      	adds	r0, r7, #0
 800dc18:	f7f3 fa9c 	bl	8001154 <__aeabi_fsub>
 800dc1c:	1c01      	adds	r1, r0, #0
 800dc1e:	9003      	str	r0, [sp, #12]
 800dc20:	1c38      	adds	r0, r7, #0
 800dc22:	f7f3 fa97 	bl	8001154 <__aeabi_fsub>
 800dc26:	1c29      	adds	r1, r5, #0
 800dc28:	f7f3 fa94 	bl	8001154 <__aeabi_fsub>
 800dc2c:	4939      	ldr	r1, [pc, #228]	@ (800dd14 <__ieee754_rem_pio2f+0x2bc>)
 800dc2e:	1c05      	adds	r5, r0, #0
 800dc30:	9805      	ldr	r0, [sp, #20]
 800dc32:	f7f3 f935 	bl	8000ea0 <__aeabi_fmul>
 800dc36:	1c29      	adds	r1, r5, #0
 800dc38:	f7f3 fa8c 	bl	8001154 <__aeabi_fsub>
 800dc3c:	9004      	str	r0, [sp, #16]
 800dc3e:	e795      	b.n	800db6c <__ieee754_rem_pio2f+0x114>
 800dc40:	23ff      	movs	r3, #255	@ 0xff
 800dc42:	05db      	lsls	r3, r3, #23
 800dc44:	429d      	cmp	r5, r3
 800dc46:	d305      	bcc.n	800dc54 <__ieee754_rem_pio2f+0x1fc>
 800dc48:	1c01      	adds	r1, r0, #0
 800dc4a:	f7f3 fa83 	bl	8001154 <__aeabi_fsub>
 800dc4e:	6060      	str	r0, [r4, #4]
 800dc50:	6020      	str	r0, [r4, #0]
 800dc52:	e70e      	b.n	800da72 <__ieee754_rem_pio2f+0x1a>
 800dc54:	15ee      	asrs	r6, r5, #23
 800dc56:	3e86      	subs	r6, #134	@ 0x86
 800dc58:	05f3      	lsls	r3, r6, #23
 800dc5a:	1aed      	subs	r5, r5, r3
 800dc5c:	1c28      	adds	r0, r5, #0
 800dc5e:	f7f3 fcf3 	bl	8001648 <__aeabi_f2iz>
 800dc62:	f7f3 fd11 	bl	8001688 <__aeabi_i2f>
 800dc66:	1c01      	adds	r1, r0, #0
 800dc68:	9009      	str	r0, [sp, #36]	@ 0x24
 800dc6a:	1c28      	adds	r0, r5, #0
 800dc6c:	f7f3 fa72 	bl	8001154 <__aeabi_fsub>
 800dc70:	2187      	movs	r1, #135	@ 0x87
 800dc72:	05c9      	lsls	r1, r1, #23
 800dc74:	f7f3 f914 	bl	8000ea0 <__aeabi_fmul>
 800dc78:	1c07      	adds	r7, r0, #0
 800dc7a:	f7f3 fce5 	bl	8001648 <__aeabi_f2iz>
 800dc7e:	f7f3 fd03 	bl	8001688 <__aeabi_i2f>
 800dc82:	1c01      	adds	r1, r0, #0
 800dc84:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc86:	1c05      	adds	r5, r0, #0
 800dc88:	1c38      	adds	r0, r7, #0
 800dc8a:	f7f3 fa63 	bl	8001154 <__aeabi_fsub>
 800dc8e:	2187      	movs	r1, #135	@ 0x87
 800dc90:	05c9      	lsls	r1, r1, #23
 800dc92:	f7f3 f905 	bl	8000ea0 <__aeabi_fmul>
 800dc96:	2100      	movs	r1, #0
 800dc98:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dc9a:	f7f2 fc0f 	bl	80004bc <__aeabi_fcmpeq>
 800dc9e:	2303      	movs	r3, #3
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d006      	beq.n	800dcb2 <__ieee754_rem_pio2f+0x25a>
 800dca4:	2100      	movs	r1, #0
 800dca6:	1c28      	adds	r0, r5, #0
 800dca8:	f7f2 fc08 	bl	80004bc <__aeabi_fcmpeq>
 800dcac:	4243      	negs	r3, r0
 800dcae:	4143      	adcs	r3, r0
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	4a19      	ldr	r2, [pc, #100]	@ (800dd18 <__ieee754_rem_pio2f+0x2c0>)
 800dcb4:	0021      	movs	r1, r4
 800dcb6:	9201      	str	r2, [sp, #4]
 800dcb8:	2202      	movs	r2, #2
 800dcba:	a809      	add	r0, sp, #36	@ 0x24
 800dcbc:	9200      	str	r2, [sp, #0]
 800dcbe:	0032      	movs	r2, r6
 800dcc0:	f000 f830 	bl	800dd24 <__kernel_rem_pio2f>
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	0006      	movs	r6, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	db00      	blt.n	800dcce <__ieee754_rem_pio2f+0x276>
 800dccc:	e6ef      	b.n	800daae <__ieee754_rem_pio2f+0x56>
 800dcce:	2280      	movs	r2, #128	@ 0x80
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	0612      	lsls	r2, r2, #24
 800dcd4:	189b      	adds	r3, r3, r2
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	6863      	ldr	r3, [r4, #4]
 800dcda:	189b      	adds	r3, r3, r2
 800dcdc:	6063      	str	r3, [r4, #4]
 800dcde:	e70a      	b.n	800daf6 <__ieee754_rem_pio2f+0x9e>
 800dce0:	3f490fd8 	.word	0x3f490fd8
 800dce4:	4016cbe3 	.word	0x4016cbe3
 800dce8:	7ffffff0 	.word	0x7ffffff0
 800dcec:	3fc90fd0 	.word	0x3fc90fd0
 800dcf0:	3fc90f80 	.word	0x3fc90f80
 800dcf4:	37354443 	.word	0x37354443
 800dcf8:	37354400 	.word	0x37354400
 800dcfc:	2e85a308 	.word	0x2e85a308
 800dd00:	43490f80 	.word	0x43490f80
 800dd04:	3f22f984 	.word	0x3f22f984
 800dd08:	0800e8ec 	.word	0x0800e8ec
 800dd0c:	7fffff00 	.word	0x7fffff00
 800dd10:	2e85a300 	.word	0x2e85a300
 800dd14:	248d3132 	.word	0x248d3132
 800dd18:	0800e96c 	.word	0x0800e96c

0800dd1c <fabsf>:
 800dd1c:	0040      	lsls	r0, r0, #1
 800dd1e:	0840      	lsrs	r0, r0, #1
 800dd20:	4770      	bx	lr
	...

0800dd24 <__kernel_rem_pio2f>:
 800dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd26:	b0dd      	sub	sp, #372	@ 0x174
 800dd28:	9206      	str	r2, [sp, #24]
 800dd2a:	9a62      	ldr	r2, [sp, #392]	@ 0x188
 800dd2c:	9307      	str	r3, [sp, #28]
 800dd2e:	4bc8      	ldr	r3, [pc, #800]	@ (800e050 <__kernel_rem_pio2f+0x32c>)
 800dd30:	0092      	lsls	r2, r2, #2
 800dd32:	58d3      	ldr	r3, [r2, r3]
 800dd34:	9009      	str	r0, [sp, #36]	@ 0x24
 800dd36:	9304      	str	r3, [sp, #16]
 800dd38:	9b07      	ldr	r3, [sp, #28]
 800dd3a:	9102      	str	r1, [sp, #8]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	9305      	str	r3, [sp, #20]
 800dd40:	2300      	movs	r3, #0
 800dd42:	9301      	str	r3, [sp, #4]
 800dd44:	9b06      	ldr	r3, [sp, #24]
 800dd46:	3304      	adds	r3, #4
 800dd48:	db07      	blt.n	800dd5a <__kernel_rem_pio2f+0x36>
 800dd4a:	2107      	movs	r1, #7
 800dd4c:	9b06      	ldr	r3, [sp, #24]
 800dd4e:	1eda      	subs	r2, r3, #3
 800dd50:	17d3      	asrs	r3, r2, #31
 800dd52:	400b      	ands	r3, r1
 800dd54:	189b      	adds	r3, r3, r2
 800dd56:	10db      	asrs	r3, r3, #3
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	9b01      	ldr	r3, [sp, #4]
 800dd5c:	ae20      	add	r6, sp, #128	@ 0x80
 800dd5e:	3301      	adds	r3, #1
 800dd60:	00db      	lsls	r3, r3, #3
 800dd62:	9308      	str	r3, [sp, #32]
 800dd64:	9a08      	ldr	r2, [sp, #32]
 800dd66:	9b06      	ldr	r3, [sp, #24]
 800dd68:	1a9b      	subs	r3, r3, r2
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	9a05      	ldr	r2, [sp, #20]
 800dd6e:	9b01      	ldr	r3, [sp, #4]
 800dd70:	1a9d      	subs	r5, r3, r2
 800dd72:	002c      	movs	r4, r5
 800dd74:	9b04      	ldr	r3, [sp, #16]
 800dd76:	189f      	adds	r7, r3, r2
 800dd78:	1b63      	subs	r3, r4, r5
 800dd7a:	429f      	cmp	r7, r3
 800dd7c:	da0d      	bge.n	800dd9a <__kernel_rem_pio2f+0x76>
 800dd7e:	9c07      	ldr	r4, [sp, #28]
 800dd80:	af48      	add	r7, sp, #288	@ 0x120
 800dd82:	9b07      	ldr	r3, [sp, #28]
 800dd84:	9a04      	ldr	r2, [sp, #16]
 800dd86:	1ae3      	subs	r3, r4, r3
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	db25      	blt.n	800ddd8 <__kernel_rem_pio2f+0xb4>
 800dd8c:	00a3      	lsls	r3, r4, #2
 800dd8e:	aa20      	add	r2, sp, #128	@ 0x80
 800dd90:	189e      	adds	r6, r3, r2
 800dd92:	2300      	movs	r3, #0
 800dd94:	2500      	movs	r5, #0
 800dd96:	9303      	str	r3, [sp, #12]
 800dd98:	e016      	b.n	800ddc8 <__kernel_rem_pio2f+0xa4>
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	2c00      	cmp	r4, #0
 800dd9e:	db04      	blt.n	800ddaa <__kernel_rem_pio2f+0x86>
 800dda0:	9a63      	ldr	r2, [sp, #396]	@ 0x18c
 800dda2:	00a3      	lsls	r3, r4, #2
 800dda4:	58d0      	ldr	r0, [r2, r3]
 800dda6:	f7f3 fc6f 	bl	8001688 <__aeabi_i2f>
 800ddaa:	c601      	stmia	r6!, {r0}
 800ddac:	3401      	adds	r4, #1
 800ddae:	e7e3      	b.n	800dd78 <__kernel_rem_pio2f+0x54>
 800ddb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddb2:	00ab      	lsls	r3, r5, #2
 800ddb4:	6831      	ldr	r1, [r6, #0]
 800ddb6:	58d0      	ldr	r0, [r2, r3]
 800ddb8:	f7f3 f872 	bl	8000ea0 <__aeabi_fmul>
 800ddbc:	1c01      	adds	r1, r0, #0
 800ddbe:	9803      	ldr	r0, [sp, #12]
 800ddc0:	f7f2 fcae 	bl	8000720 <__aeabi_fadd>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	9003      	str	r0, [sp, #12]
 800ddc8:	9b05      	ldr	r3, [sp, #20]
 800ddca:	3e04      	subs	r6, #4
 800ddcc:	429d      	cmp	r5, r3
 800ddce:	ddef      	ble.n	800ddb0 <__kernel_rem_pio2f+0x8c>
 800ddd0:	9b03      	ldr	r3, [sp, #12]
 800ddd2:	3401      	adds	r4, #1
 800ddd4:	c708      	stmia	r7!, {r3}
 800ddd6:	e7d4      	b.n	800dd82 <__kernel_rem_pio2f+0x5e>
 800ddd8:	9b04      	ldr	r3, [sp, #16]
 800ddda:	aa0c      	add	r2, sp, #48	@ 0x30
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	189b      	adds	r3, r3, r2
 800dde0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dde2:	9b01      	ldr	r3, [sp, #4]
 800dde4:	9a63      	ldr	r2, [sp, #396]	@ 0x18c
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	18d3      	adds	r3, r2, r3
 800ddea:	9f04      	ldr	r7, [sp, #16]
 800ddec:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddee:	21f0      	movs	r1, #240	@ 0xf0
 800ddf0:	ae0c      	add	r6, sp, #48	@ 0x30
 800ddf2:	0034      	movs	r4, r6
 800ddf4:	003d      	movs	r5, r7
 800ddf6:	aa0c      	add	r2, sp, #48	@ 0x30
 800ddf8:	00bb      	lsls	r3, r7, #2
 800ddfa:	1852      	adds	r2, r2, r1
 800ddfc:	58d3      	ldr	r3, [r2, r3]
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	2d00      	cmp	r5, #0
 800de02:	dc64      	bgt.n	800dece <__kernel_rem_pio2f+0x1aa>
 800de04:	9900      	ldr	r1, [sp, #0]
 800de06:	9801      	ldr	r0, [sp, #4]
 800de08:	f000 fa2c 	bl	800e264 <scalbnf>
 800de0c:	21f8      	movs	r1, #248	@ 0xf8
 800de0e:	0589      	lsls	r1, r1, #22
 800de10:	1c04      	adds	r4, r0, #0
 800de12:	f7f3 f845 	bl	8000ea0 <__aeabi_fmul>
 800de16:	f000 fa7b 	bl	800e310 <floorf>
 800de1a:	2182      	movs	r1, #130	@ 0x82
 800de1c:	05c9      	lsls	r1, r1, #23
 800de1e:	f7f3 f83f 	bl	8000ea0 <__aeabi_fmul>
 800de22:	1c01      	adds	r1, r0, #0
 800de24:	1c20      	adds	r0, r4, #0
 800de26:	f7f3 f995 	bl	8001154 <__aeabi_fsub>
 800de2a:	1c04      	adds	r4, r0, #0
 800de2c:	f7f3 fc0c 	bl	8001648 <__aeabi_f2iz>
 800de30:	9003      	str	r0, [sp, #12]
 800de32:	f7f3 fc29 	bl	8001688 <__aeabi_i2f>
 800de36:	1c01      	adds	r1, r0, #0
 800de38:	1c20      	adds	r0, r4, #0
 800de3a:	f7f3 f98b 	bl	8001154 <__aeabi_fsub>
 800de3e:	9b00      	ldr	r3, [sp, #0]
 800de40:	1c04      	adds	r4, r0, #0
 800de42:	2b00      	cmp	r3, #0
 800de44:	dd63      	ble.n	800df0e <__kernel_rem_pio2f+0x1ea>
 800de46:	2008      	movs	r0, #8
 800de48:	1e7b      	subs	r3, r7, #1
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	aa0c      	add	r2, sp, #48	@ 0x30
 800de4e:	589a      	ldr	r2, [r3, r2]
 800de50:	9900      	ldr	r1, [sp, #0]
 800de52:	9d03      	ldr	r5, [sp, #12]
 800de54:	1a40      	subs	r0, r0, r1
 800de56:	0011      	movs	r1, r2
 800de58:	4101      	asrs	r1, r0
 800de5a:	186d      	adds	r5, r5, r1
 800de5c:	4081      	lsls	r1, r0
 800de5e:	1a52      	subs	r2, r2, r1
 800de60:	a90c      	add	r1, sp, #48	@ 0x30
 800de62:	505a      	str	r2, [r3, r1]
 800de64:	2307      	movs	r3, #7
 800de66:	9900      	ldr	r1, [sp, #0]
 800de68:	9503      	str	r5, [sp, #12]
 800de6a:	1a5b      	subs	r3, r3, r1
 800de6c:	411a      	asrs	r2, r3
 800de6e:	9201      	str	r2, [sp, #4]
 800de70:	9b01      	ldr	r3, [sp, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd5c      	ble.n	800df30 <__kernel_rem_pio2f+0x20c>
 800de76:	9b03      	ldr	r3, [sp, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	3301      	adds	r3, #1
 800de7c:	9303      	str	r3, [sp, #12]
 800de7e:	2380      	movs	r3, #128	@ 0x80
 800de80:	005b      	lsls	r3, r3, #1
 800de82:	0015      	movs	r5, r2
 800de84:	2101      	movs	r1, #1
 800de86:	20ff      	movs	r0, #255	@ 0xff
 800de88:	469c      	mov	ip, r3
 800de8a:	4297      	cmp	r7, r2
 800de8c:	dd00      	ble.n	800de90 <__kernel_rem_pio2f+0x16c>
 800de8e:	e082      	b.n	800df96 <__kernel_rem_pio2f+0x272>
 800de90:	9b00      	ldr	r3, [sp, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	dd05      	ble.n	800dea2 <__kernel_rem_pio2f+0x17e>
 800de96:	2b01      	cmp	r3, #1
 800de98:	d100      	bne.n	800de9c <__kernel_rem_pio2f+0x178>
 800de9a:	e08b      	b.n	800dfb4 <__kernel_rem_pio2f+0x290>
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d100      	bne.n	800dea2 <__kernel_rem_pio2f+0x17e>
 800dea0:	e091      	b.n	800dfc6 <__kernel_rem_pio2f+0x2a2>
 800dea2:	9b01      	ldr	r3, [sp, #4]
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	d143      	bne.n	800df30 <__kernel_rem_pio2f+0x20c>
 800dea8:	20fe      	movs	r0, #254	@ 0xfe
 800deaa:	1c21      	adds	r1, r4, #0
 800deac:	0580      	lsls	r0, r0, #22
 800deae:	f7f3 f951 	bl	8001154 <__aeabi_fsub>
 800deb2:	1c04      	adds	r4, r0, #0
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	d03b      	beq.n	800df30 <__kernel_rem_pio2f+0x20c>
 800deb8:	20fe      	movs	r0, #254	@ 0xfe
 800deba:	9900      	ldr	r1, [sp, #0]
 800debc:	0580      	lsls	r0, r0, #22
 800debe:	f000 f9d1 	bl	800e264 <scalbnf>
 800dec2:	1c01      	adds	r1, r0, #0
 800dec4:	1c20      	adds	r0, r4, #0
 800dec6:	f7f3 f945 	bl	8001154 <__aeabi_fsub>
 800deca:	1c04      	adds	r4, r0, #0
 800decc:	e030      	b.n	800df30 <__kernel_rem_pio2f+0x20c>
 800dece:	21ee      	movs	r1, #238	@ 0xee
 800ded0:	9801      	ldr	r0, [sp, #4]
 800ded2:	0589      	lsls	r1, r1, #22
 800ded4:	f7f2 ffe4 	bl	8000ea0 <__aeabi_fmul>
 800ded8:	f7f3 fbb6 	bl	8001648 <__aeabi_f2iz>
 800dedc:	f7f3 fbd4 	bl	8001688 <__aeabi_i2f>
 800dee0:	2187      	movs	r1, #135	@ 0x87
 800dee2:	05c9      	lsls	r1, r1, #23
 800dee4:	9003      	str	r0, [sp, #12]
 800dee6:	f7f2 ffdb 	bl	8000ea0 <__aeabi_fmul>
 800deea:	1c01      	adds	r1, r0, #0
 800deec:	9801      	ldr	r0, [sp, #4]
 800deee:	f7f3 f931 	bl	8001154 <__aeabi_fsub>
 800def2:	f7f3 fba9 	bl	8001648 <__aeabi_f2iz>
 800def6:	21f0      	movs	r1, #240	@ 0xf0
 800def8:	3d01      	subs	r5, #1
 800defa:	aa0c      	add	r2, sp, #48	@ 0x30
 800defc:	00ab      	lsls	r3, r5, #2
 800defe:	1852      	adds	r2, r2, r1
 800df00:	c401      	stmia	r4!, {r0}
 800df02:	58d1      	ldr	r1, [r2, r3]
 800df04:	9803      	ldr	r0, [sp, #12]
 800df06:	f7f2 fc0b 	bl	8000720 <__aeabi_fadd>
 800df0a:	9001      	str	r0, [sp, #4]
 800df0c:	e778      	b.n	800de00 <__kernel_rem_pio2f+0xdc>
 800df0e:	9b00      	ldr	r3, [sp, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d106      	bne.n	800df22 <__kernel_rem_pio2f+0x1fe>
 800df14:	1e7b      	subs	r3, r7, #1
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	aa0c      	add	r2, sp, #48	@ 0x30
 800df1a:	589b      	ldr	r3, [r3, r2]
 800df1c:	11db      	asrs	r3, r3, #7
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	e7a6      	b.n	800de70 <__kernel_rem_pio2f+0x14c>
 800df22:	21fc      	movs	r1, #252	@ 0xfc
 800df24:	0589      	lsls	r1, r1, #22
 800df26:	f7f2 faed 	bl	8000504 <__aeabi_fcmpge>
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d130      	bne.n	800df90 <__kernel_rem_pio2f+0x26c>
 800df2e:	9001      	str	r0, [sp, #4]
 800df30:	2100      	movs	r1, #0
 800df32:	1c20      	adds	r0, r4, #0
 800df34:	f7f2 fac2 	bl	80004bc <__aeabi_fcmpeq>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d100      	bne.n	800df3e <__kernel_rem_pio2f+0x21a>
 800df3c:	e08c      	b.n	800e058 <__kernel_rem_pio2f+0x334>
 800df3e:	2200      	movs	r2, #0
 800df40:	1e7b      	subs	r3, r7, #1
 800df42:	9904      	ldr	r1, [sp, #16]
 800df44:	428b      	cmp	r3, r1
 800df46:	da44      	bge.n	800dfd2 <__kernel_rem_pio2f+0x2ae>
 800df48:	2a00      	cmp	r2, #0
 800df4a:	d05c      	beq.n	800e006 <__kernel_rem_pio2f+0x2e2>
 800df4c:	9b00      	ldr	r3, [sp, #0]
 800df4e:	3f01      	subs	r7, #1
 800df50:	3b08      	subs	r3, #8
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	aa0c      	add	r2, sp, #48	@ 0x30
 800df56:	00bb      	lsls	r3, r7, #2
 800df58:	589b      	ldr	r3, [r3, r2]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0f6      	beq.n	800df4c <__kernel_rem_pio2f+0x228>
 800df5e:	20fe      	movs	r0, #254	@ 0xfe
 800df60:	9900      	ldr	r1, [sp, #0]
 800df62:	0580      	lsls	r0, r0, #22
 800df64:	f000 f97e 	bl	800e264 <scalbnf>
 800df68:	003d      	movs	r5, r7
 800df6a:	1c04      	adds	r4, r0, #0
 800df6c:	2d00      	cmp	r5, #0
 800df6e:	db00      	blt.n	800df72 <__kernel_rem_pio2f+0x24e>
 800df70:	e0a8      	b.n	800e0c4 <__kernel_rem_pio2f+0x3a0>
 800df72:	003c      	movs	r4, r7
 800df74:	4b37      	ldr	r3, [pc, #220]	@ (800e054 <__kernel_rem_pio2f+0x330>)
 800df76:	9306      	str	r3, [sp, #24]
 800df78:	2c00      	cmp	r4, #0
 800df7a:	da00      	bge.n	800df7e <__kernel_rem_pio2f+0x25a>
 800df7c:	e0d1      	b.n	800e122 <__kernel_rem_pio2f+0x3fe>
 800df7e:	00a3      	lsls	r3, r4, #2
 800df80:	aa48      	add	r2, sp, #288	@ 0x120
 800df82:	189b      	adds	r3, r3, r2
 800df84:	9305      	str	r3, [sp, #20]
 800df86:	1b3b      	subs	r3, r7, r4
 800df88:	2600      	movs	r6, #0
 800df8a:	2500      	movs	r5, #0
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	e0ba      	b.n	800e106 <__kernel_rem_pio2f+0x3e2>
 800df90:	2302      	movs	r3, #2
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	e76f      	b.n	800de76 <__kernel_rem_pio2f+0x152>
 800df96:	6833      	ldr	r3, [r6, #0]
 800df98:	2d00      	cmp	r5, #0
 800df9a:	d109      	bne.n	800dfb0 <__kernel_rem_pio2f+0x28c>
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d003      	beq.n	800dfa8 <__kernel_rem_pio2f+0x284>
 800dfa0:	4665      	mov	r5, ip
 800dfa2:	1aeb      	subs	r3, r5, r3
 800dfa4:	6033      	str	r3, [r6, #0]
 800dfa6:	000b      	movs	r3, r1
 800dfa8:	001d      	movs	r5, r3
 800dfaa:	3201      	adds	r2, #1
 800dfac:	3604      	adds	r6, #4
 800dfae:	e76c      	b.n	800de8a <__kernel_rem_pio2f+0x166>
 800dfb0:	1ac3      	subs	r3, r0, r3
 800dfb2:	e7f7      	b.n	800dfa4 <__kernel_rem_pio2f+0x280>
 800dfb4:	217f      	movs	r1, #127	@ 0x7f
 800dfb6:	1e7b      	subs	r3, r7, #1
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	aa0c      	add	r2, sp, #48	@ 0x30
 800dfbc:	589a      	ldr	r2, [r3, r2]
 800dfbe:	400a      	ands	r2, r1
 800dfc0:	a90c      	add	r1, sp, #48	@ 0x30
 800dfc2:	505a      	str	r2, [r3, r1]
 800dfc4:	e76d      	b.n	800dea2 <__kernel_rem_pio2f+0x17e>
 800dfc6:	1e7b      	subs	r3, r7, #1
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	aa0c      	add	r2, sp, #48	@ 0x30
 800dfcc:	213f      	movs	r1, #63	@ 0x3f
 800dfce:	589a      	ldr	r2, [r3, r2]
 800dfd0:	e7f5      	b.n	800dfbe <__kernel_rem_pio2f+0x29a>
 800dfd2:	0099      	lsls	r1, r3, #2
 800dfd4:	a80c      	add	r0, sp, #48	@ 0x30
 800dfd6:	5809      	ldr	r1, [r1, r0]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	430a      	orrs	r2, r1
 800dfdc:	e7b1      	b.n	800df42 <__kernel_rem_pio2f+0x21e>
 800dfde:	3301      	adds	r3, #1
 800dfe0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfe2:	009a      	lsls	r2, r3, #2
 800dfe4:	4252      	negs	r2, r2
 800dfe6:	588a      	ldr	r2, [r1, r2]
 800dfe8:	2a00      	cmp	r2, #0
 800dfea:	d0f8      	beq.n	800dfde <__kernel_rem_pio2f+0x2ba>
 800dfec:	9a07      	ldr	r2, [sp, #28]
 800dfee:	a920      	add	r1, sp, #128	@ 0x80
 800dff0:	18ba      	adds	r2, r7, r2
 800dff2:	0092      	lsls	r2, r2, #2
 800dff4:	18fb      	adds	r3, r7, r3
 800dff6:	1c7e      	adds	r6, r7, #1
 800dff8:	188c      	adds	r4, r1, r2
 800dffa:	9301      	str	r3, [sp, #4]
 800dffc:	9b01      	ldr	r3, [sp, #4]
 800dffe:	42b3      	cmp	r3, r6
 800e000:	da03      	bge.n	800e00a <__kernel_rem_pio2f+0x2e6>
 800e002:	001f      	movs	r7, r3
 800e004:	e6f3      	b.n	800ddee <__kernel_rem_pio2f+0xca>
 800e006:	2301      	movs	r3, #1
 800e008:	e7ea      	b.n	800dfe0 <__kernel_rem_pio2f+0x2bc>
 800e00a:	00b3      	lsls	r3, r6, #2
 800e00c:	9303      	str	r3, [sp, #12]
 800e00e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e010:	00b2      	lsls	r2, r6, #2
 800e012:	5898      	ldr	r0, [r3, r2]
 800e014:	f7f3 fb38 	bl	8001688 <__aeabi_i2f>
 800e018:	2700      	movs	r7, #0
 800e01a:	2500      	movs	r5, #0
 800e01c:	6020      	str	r0, [r4, #0]
 800e01e:	9b05      	ldr	r3, [sp, #20]
 800e020:	429f      	cmp	r7, r3
 800e022:	dd07      	ble.n	800e034 <__kernel_rem_pio2f+0x310>
 800e024:	21f0      	movs	r1, #240	@ 0xf0
 800e026:	9a03      	ldr	r2, [sp, #12]
 800e028:	ab0c      	add	r3, sp, #48	@ 0x30
 800e02a:	185b      	adds	r3, r3, r1
 800e02c:	509d      	str	r5, [r3, r2]
 800e02e:	3601      	adds	r6, #1
 800e030:	3404      	adds	r4, #4
 800e032:	e7e3      	b.n	800dffc <__kernel_rem_pio2f+0x2d8>
 800e034:	00bb      	lsls	r3, r7, #2
 800e036:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e038:	425a      	negs	r2, r3
 800e03a:	58c9      	ldr	r1, [r1, r3]
 800e03c:	58a0      	ldr	r0, [r4, r2]
 800e03e:	f7f2 ff2f 	bl	8000ea0 <__aeabi_fmul>
 800e042:	1c01      	adds	r1, r0, #0
 800e044:	1c28      	adds	r0, r5, #0
 800e046:	f7f2 fb6b 	bl	8000720 <__aeabi_fadd>
 800e04a:	3701      	adds	r7, #1
 800e04c:	1c05      	adds	r5, r0, #0
 800e04e:	e7e6      	b.n	800e01e <__kernel_rem_pio2f+0x2fa>
 800e050:	0800ecb0 	.word	0x0800ecb0
 800e054:	0800ec84 	.word	0x0800ec84
 800e058:	9b08      	ldr	r3, [sp, #32]
 800e05a:	9a06      	ldr	r2, [sp, #24]
 800e05c:	1c20      	adds	r0, r4, #0
 800e05e:	1a99      	subs	r1, r3, r2
 800e060:	f000 f900 	bl	800e264 <scalbnf>
 800e064:	2187      	movs	r1, #135	@ 0x87
 800e066:	05c9      	lsls	r1, r1, #23
 800e068:	1c04      	adds	r4, r0, #0
 800e06a:	f7f2 fa4b 	bl	8000504 <__aeabi_fcmpge>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d021      	beq.n	800e0b6 <__kernel_rem_pio2f+0x392>
 800e072:	21ee      	movs	r1, #238	@ 0xee
 800e074:	1c20      	adds	r0, r4, #0
 800e076:	0589      	lsls	r1, r1, #22
 800e078:	f7f2 ff12 	bl	8000ea0 <__aeabi_fmul>
 800e07c:	f7f3 fae4 	bl	8001648 <__aeabi_f2iz>
 800e080:	f7f3 fb02 	bl	8001688 <__aeabi_i2f>
 800e084:	2187      	movs	r1, #135	@ 0x87
 800e086:	05c9      	lsls	r1, r1, #23
 800e088:	1c05      	adds	r5, r0, #0
 800e08a:	f7f2 ff09 	bl	8000ea0 <__aeabi_fmul>
 800e08e:	1c01      	adds	r1, r0, #0
 800e090:	1c20      	adds	r0, r4, #0
 800e092:	f7f3 f85f 	bl	8001154 <__aeabi_fsub>
 800e096:	f7f3 fad7 	bl	8001648 <__aeabi_f2iz>
 800e09a:	00be      	lsls	r6, r7, #2
 800e09c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e09e:	5198      	str	r0, [r3, r6]
 800e0a0:	9b00      	ldr	r3, [sp, #0]
 800e0a2:	1c28      	adds	r0, r5, #0
 800e0a4:	3308      	adds	r3, #8
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	f7f3 face 	bl	8001648 <__aeabi_f2iz>
 800e0ac:	3701      	adds	r7, #1
 800e0ae:	00bc      	lsls	r4, r7, #2
 800e0b0:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0b2:	5118      	str	r0, [r3, r4]
 800e0b4:	e753      	b.n	800df5e <__kernel_rem_pio2f+0x23a>
 800e0b6:	1c20      	adds	r0, r4, #0
 800e0b8:	f7f3 fac6 	bl	8001648 <__aeabi_f2iz>
 800e0bc:	00bd      	lsls	r5, r7, #2
 800e0be:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0c0:	5158      	str	r0, [r3, r5]
 800e0c2:	e74c      	b.n	800df5e <__kernel_rem_pio2f+0x23a>
 800e0c4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0c6:	00ae      	lsls	r6, r5, #2
 800e0c8:	58f0      	ldr	r0, [r6, r3]
 800e0ca:	f7f3 fadd 	bl	8001688 <__aeabi_i2f>
 800e0ce:	1c21      	adds	r1, r4, #0
 800e0d0:	f7f2 fee6 	bl	8000ea0 <__aeabi_fmul>
 800e0d4:	22f0      	movs	r2, #240	@ 0xf0
 800e0d6:	21ee      	movs	r1, #238	@ 0xee
 800e0d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0da:	189b      	adds	r3, r3, r2
 800e0dc:	5198      	str	r0, [r3, r6]
 800e0de:	0589      	lsls	r1, r1, #22
 800e0e0:	1c20      	adds	r0, r4, #0
 800e0e2:	f7f2 fedd 	bl	8000ea0 <__aeabi_fmul>
 800e0e6:	3d01      	subs	r5, #1
 800e0e8:	1c04      	adds	r4, r0, #0
 800e0ea:	e73f      	b.n	800df6c <__kernel_rem_pio2f+0x248>
 800e0ec:	9a05      	ldr	r2, [sp, #20]
 800e0ee:	00ab      	lsls	r3, r5, #2
 800e0f0:	58d1      	ldr	r1, [r2, r3]
 800e0f2:	9a06      	ldr	r2, [sp, #24]
 800e0f4:	3501      	adds	r5, #1
 800e0f6:	58d0      	ldr	r0, [r2, r3]
 800e0f8:	f7f2 fed2 	bl	8000ea0 <__aeabi_fmul>
 800e0fc:	1c01      	adds	r1, r0, #0
 800e0fe:	1c30      	adds	r0, r6, #0
 800e100:	f7f2 fb0e 	bl	8000720 <__aeabi_fadd>
 800e104:	1c06      	adds	r6, r0, #0
 800e106:	9b04      	ldr	r3, [sp, #16]
 800e108:	429d      	cmp	r5, r3
 800e10a:	dc02      	bgt.n	800e112 <__kernel_rem_pio2f+0x3ee>
 800e10c:	9b00      	ldr	r3, [sp, #0]
 800e10e:	429d      	cmp	r5, r3
 800e110:	ddec      	ble.n	800e0ec <__kernel_rem_pio2f+0x3c8>
 800e112:	21a0      	movs	r1, #160	@ 0xa0
 800e114:	9b00      	ldr	r3, [sp, #0]
 800e116:	aa0c      	add	r2, sp, #48	@ 0x30
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	1852      	adds	r2, r2, r1
 800e11c:	50d6      	str	r6, [r2, r3]
 800e11e:	3c01      	subs	r4, #1
 800e120:	e72a      	b.n	800df78 <__kernel_rem_pio2f+0x254>
 800e122:	9b62      	ldr	r3, [sp, #392]	@ 0x188
 800e124:	2b02      	cmp	r3, #2
 800e126:	dc08      	bgt.n	800e13a <__kernel_rem_pio2f+0x416>
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dc58      	bgt.n	800e1de <__kernel_rem_pio2f+0x4ba>
 800e12c:	d033      	beq.n	800e196 <__kernel_rem_pio2f+0x472>
 800e12e:	2007      	movs	r0, #7
 800e130:	9b03      	ldr	r3, [sp, #12]
 800e132:	4003      	ands	r3, r0
 800e134:	0018      	movs	r0, r3
 800e136:	b05d      	add	sp, #372	@ 0x174
 800e138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e13a:	9b62      	ldr	r3, [sp, #392]	@ 0x188
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d1f6      	bne.n	800e12e <__kernel_rem_pio2f+0x40a>
 800e140:	00bb      	lsls	r3, r7, #2
 800e142:	aa34      	add	r2, sp, #208	@ 0xd0
 800e144:	18d6      	adds	r6, r2, r3
 800e146:	0034      	movs	r4, r6
 800e148:	003d      	movs	r5, r7
 800e14a:	3c04      	subs	r4, #4
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	dc50      	bgt.n	800e1f2 <__kernel_rem_pio2f+0x4ce>
 800e150:	003d      	movs	r5, r7
 800e152:	3e04      	subs	r6, #4
 800e154:	2d01      	cmp	r5, #1
 800e156:	dc61      	bgt.n	800e21c <__kernel_rem_pio2f+0x4f8>
 800e158:	2000      	movs	r0, #0
 800e15a:	ac34      	add	r4, sp, #208	@ 0xd0
 800e15c:	2f01      	cmp	r7, #1
 800e15e:	dc71      	bgt.n	800e244 <__kernel_rem_pio2f+0x520>
 800e160:	9901      	ldr	r1, [sp, #4]
 800e162:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 800e164:	6863      	ldr	r3, [r4, #4]
 800e166:	2900      	cmp	r1, #0
 800e168:	d172      	bne.n	800e250 <__kernel_rem_pio2f+0x52c>
 800e16a:	9902      	ldr	r1, [sp, #8]
 800e16c:	604b      	str	r3, [r1, #4]
 800e16e:	000b      	movs	r3, r1
 800e170:	600a      	str	r2, [r1, #0]
 800e172:	6098      	str	r0, [r3, #8]
 800e174:	e7db      	b.n	800e12e <__kernel_rem_pio2f+0x40a>
 800e176:	00bb      	lsls	r3, r7, #2
 800e178:	5919      	ldr	r1, [r3, r4]
 800e17a:	f7f2 fad1 	bl	8000720 <__aeabi_fadd>
 800e17e:	3f01      	subs	r7, #1
 800e180:	2f00      	cmp	r7, #0
 800e182:	daf8      	bge.n	800e176 <__kernel_rem_pio2f+0x452>
 800e184:	9b01      	ldr	r3, [sp, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <__kernel_rem_pio2f+0x46c>
 800e18a:	2380      	movs	r3, #128	@ 0x80
 800e18c:	061b      	lsls	r3, r3, #24
 800e18e:	18c0      	adds	r0, r0, r3
 800e190:	9b02      	ldr	r3, [sp, #8]
 800e192:	6018      	str	r0, [r3, #0]
 800e194:	e7cb      	b.n	800e12e <__kernel_rem_pio2f+0x40a>
 800e196:	2000      	movs	r0, #0
 800e198:	ac34      	add	r4, sp, #208	@ 0xd0
 800e19a:	e7f1      	b.n	800e180 <__kernel_rem_pio2f+0x45c>
 800e19c:	00a3      	lsls	r3, r4, #2
 800e19e:	5959      	ldr	r1, [r3, r5]
 800e1a0:	f7f2 fabe 	bl	8000720 <__aeabi_fadd>
 800e1a4:	3c01      	subs	r4, #1
 800e1a6:	2c00      	cmp	r4, #0
 800e1a8:	daf8      	bge.n	800e19c <__kernel_rem_pio2f+0x478>
 800e1aa:	9a01      	ldr	r2, [sp, #4]
 800e1ac:	1c03      	adds	r3, r0, #0
 800e1ae:	2a00      	cmp	r2, #0
 800e1b0:	d002      	beq.n	800e1b8 <__kernel_rem_pio2f+0x494>
 800e1b2:	2380      	movs	r3, #128	@ 0x80
 800e1b4:	061b      	lsls	r3, r3, #24
 800e1b6:	18c3      	adds	r3, r0, r3
 800e1b8:	9a02      	ldr	r2, [sp, #8]
 800e1ba:	1c01      	adds	r1, r0, #0
 800e1bc:	6013      	str	r3, [r2, #0]
 800e1be:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 800e1c0:	f7f2 ffc8 	bl	8001154 <__aeabi_fsub>
 800e1c4:	2401      	movs	r4, #1
 800e1c6:	ad34      	add	r5, sp, #208	@ 0xd0
 800e1c8:	42a7      	cmp	r7, r4
 800e1ca:	da0c      	bge.n	800e1e6 <__kernel_rem_pio2f+0x4c2>
 800e1cc:	9b01      	ldr	r3, [sp, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <__kernel_rem_pio2f+0x4b4>
 800e1d2:	2380      	movs	r3, #128	@ 0x80
 800e1d4:	061b      	lsls	r3, r3, #24
 800e1d6:	18c0      	adds	r0, r0, r3
 800e1d8:	9b02      	ldr	r3, [sp, #8]
 800e1da:	6058      	str	r0, [r3, #4]
 800e1dc:	e7a7      	b.n	800e12e <__kernel_rem_pio2f+0x40a>
 800e1de:	003c      	movs	r4, r7
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	ad34      	add	r5, sp, #208	@ 0xd0
 800e1e4:	e7df      	b.n	800e1a6 <__kernel_rem_pio2f+0x482>
 800e1e6:	00a3      	lsls	r3, r4, #2
 800e1e8:	5959      	ldr	r1, [r3, r5]
 800e1ea:	f7f2 fa99 	bl	8000720 <__aeabi_fadd>
 800e1ee:	3401      	adds	r4, #1
 800e1f0:	e7ea      	b.n	800e1c8 <__kernel_rem_pio2f+0x4a4>
 800e1f2:	6823      	ldr	r3, [r4, #0]
 800e1f4:	3d01      	subs	r5, #1
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	6863      	ldr	r3, [r4, #4]
 800e1fa:	9800      	ldr	r0, [sp, #0]
 800e1fc:	1c19      	adds	r1, r3, #0
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	f7f2 fa8e 	bl	8000720 <__aeabi_fadd>
 800e204:	1c01      	adds	r1, r0, #0
 800e206:	9005      	str	r0, [sp, #20]
 800e208:	9800      	ldr	r0, [sp, #0]
 800e20a:	f7f2 ffa3 	bl	8001154 <__aeabi_fsub>
 800e20e:	9904      	ldr	r1, [sp, #16]
 800e210:	f7f2 fa86 	bl	8000720 <__aeabi_fadd>
 800e214:	9b05      	ldr	r3, [sp, #20]
 800e216:	6060      	str	r0, [r4, #4]
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	e796      	b.n	800e14a <__kernel_rem_pio2f+0x426>
 800e21c:	6833      	ldr	r3, [r6, #0]
 800e21e:	3d01      	subs	r5, #1
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	6873      	ldr	r3, [r6, #4]
 800e224:	9800      	ldr	r0, [sp, #0]
 800e226:	1c19      	adds	r1, r3, #0
 800e228:	9304      	str	r3, [sp, #16]
 800e22a:	f7f2 fa79 	bl	8000720 <__aeabi_fadd>
 800e22e:	1c01      	adds	r1, r0, #0
 800e230:	1c04      	adds	r4, r0, #0
 800e232:	9800      	ldr	r0, [sp, #0]
 800e234:	f7f2 ff8e 	bl	8001154 <__aeabi_fsub>
 800e238:	9904      	ldr	r1, [sp, #16]
 800e23a:	f7f2 fa71 	bl	8000720 <__aeabi_fadd>
 800e23e:	6034      	str	r4, [r6, #0]
 800e240:	6070      	str	r0, [r6, #4]
 800e242:	e786      	b.n	800e152 <__kernel_rem_pio2f+0x42e>
 800e244:	00bb      	lsls	r3, r7, #2
 800e246:	58e1      	ldr	r1, [r4, r3]
 800e248:	f7f2 fa6a 	bl	8000720 <__aeabi_fadd>
 800e24c:	3f01      	subs	r7, #1
 800e24e:	e785      	b.n	800e15c <__kernel_rem_pio2f+0x438>
 800e250:	2180      	movs	r1, #128	@ 0x80
 800e252:	9c02      	ldr	r4, [sp, #8]
 800e254:	0609      	lsls	r1, r1, #24
 800e256:	185b      	adds	r3, r3, r1
 800e258:	1852      	adds	r2, r2, r1
 800e25a:	6063      	str	r3, [r4, #4]
 800e25c:	6022      	str	r2, [r4, #0]
 800e25e:	0023      	movs	r3, r4
 800e260:	1840      	adds	r0, r0, r1
 800e262:	e786      	b.n	800e172 <__kernel_rem_pio2f+0x44e>

0800e264 <scalbnf>:
 800e264:	0043      	lsls	r3, r0, #1
 800e266:	b570      	push	{r4, r5, r6, lr}
 800e268:	0002      	movs	r2, r0
 800e26a:	000c      	movs	r4, r1
 800e26c:	085d      	lsrs	r5, r3, #1
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d006      	beq.n	800e280 <scalbnf+0x1c>
 800e272:	21ff      	movs	r1, #255	@ 0xff
 800e274:	05c9      	lsls	r1, r1, #23
 800e276:	428d      	cmp	r5, r1
 800e278:	d303      	bcc.n	800e282 <scalbnf+0x1e>
 800e27a:	1c01      	adds	r1, r0, #0
 800e27c:	f7f2 fa50 	bl	8000720 <__aeabi_fadd>
 800e280:	bd70      	pop	{r4, r5, r6, pc}
 800e282:	4208      	tst	r0, r1
 800e284:	d118      	bne.n	800e2b8 <scalbnf+0x54>
 800e286:	2198      	movs	r1, #152	@ 0x98
 800e288:	05c9      	lsls	r1, r1, #23
 800e28a:	f7f2 fe09 	bl	8000ea0 <__aeabi_fmul>
 800e28e:	4b19      	ldr	r3, [pc, #100]	@ (800e2f4 <scalbnf+0x90>)
 800e290:	429c      	cmp	r4, r3
 800e292:	db0d      	blt.n	800e2b0 <scalbnf+0x4c>
 800e294:	0002      	movs	r2, r0
 800e296:	15c3      	asrs	r3, r0, #23
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	3b19      	subs	r3, #25
 800e29c:	4916      	ldr	r1, [pc, #88]	@ (800e2f8 <scalbnf+0x94>)
 800e29e:	428c      	cmp	r4, r1
 800e2a0:	dd0c      	ble.n	800e2bc <scalbnf+0x58>
 800e2a2:	4b16      	ldr	r3, [pc, #88]	@ (800e2fc <scalbnf+0x98>)
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	da00      	bge.n	800e2aa <scalbnf+0x46>
 800e2a8:	4b15      	ldr	r3, [pc, #84]	@ (800e300 <scalbnf+0x9c>)
 800e2aa:	4914      	ldr	r1, [pc, #80]	@ (800e2fc <scalbnf+0x98>)
 800e2ac:	1c18      	adds	r0, r3, #0
 800e2ae:	e000      	b.n	800e2b2 <scalbnf+0x4e>
 800e2b0:	4914      	ldr	r1, [pc, #80]	@ (800e304 <scalbnf+0xa0>)
 800e2b2:	f7f2 fdf5 	bl	8000ea0 <__aeabi_fmul>
 800e2b6:	e7e3      	b.n	800e280 <scalbnf+0x1c>
 800e2b8:	0e1b      	lsrs	r3, r3, #24
 800e2ba:	e7ef      	b.n	800e29c <scalbnf+0x38>
 800e2bc:	1919      	adds	r1, r3, r4
 800e2be:	29fe      	cmp	r1, #254	@ 0xfe
 800e2c0:	dcef      	bgt.n	800e2a2 <scalbnf+0x3e>
 800e2c2:	2900      	cmp	r1, #0
 800e2c4:	dd04      	ble.n	800e2d0 <scalbnf+0x6c>
 800e2c6:	4810      	ldr	r0, [pc, #64]	@ (800e308 <scalbnf+0xa4>)
 800e2c8:	05c9      	lsls	r1, r1, #23
 800e2ca:	4010      	ands	r0, r2
 800e2cc:	4308      	orrs	r0, r1
 800e2ce:	e7d7      	b.n	800e280 <scalbnf+0x1c>
 800e2d0:	000b      	movs	r3, r1
 800e2d2:	3316      	adds	r3, #22
 800e2d4:	da05      	bge.n	800e2e2 <scalbnf+0x7e>
 800e2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e304 <scalbnf+0xa0>)
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	da00      	bge.n	800e2de <scalbnf+0x7a>
 800e2dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e30c <scalbnf+0xa8>)
 800e2de:	4909      	ldr	r1, [pc, #36]	@ (800e304 <scalbnf+0xa0>)
 800e2e0:	e7e4      	b.n	800e2ac <scalbnf+0x48>
 800e2e2:	3119      	adds	r1, #25
 800e2e4:	05c8      	lsls	r0, r1, #23
 800e2e6:	21cc      	movs	r1, #204	@ 0xcc
 800e2e8:	4b07      	ldr	r3, [pc, #28]	@ (800e308 <scalbnf+0xa4>)
 800e2ea:	0589      	lsls	r1, r1, #22
 800e2ec:	401a      	ands	r2, r3
 800e2ee:	4310      	orrs	r0, r2
 800e2f0:	e7df      	b.n	800e2b2 <scalbnf+0x4e>
 800e2f2:	46c0      	nop			@ (mov r8, r8)
 800e2f4:	ffff3cb0 	.word	0xffff3cb0
 800e2f8:	0000c350 	.word	0x0000c350
 800e2fc:	7149f2ca 	.word	0x7149f2ca
 800e300:	f149f2ca 	.word	0xf149f2ca
 800e304:	0da24260 	.word	0x0da24260
 800e308:	807fffff 	.word	0x807fffff
 800e30c:	8da24260 	.word	0x8da24260

0800e310 <floorf>:
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e312:	0045      	lsls	r5, r0, #1
 800e314:	086e      	lsrs	r6, r5, #1
 800e316:	0e2d      	lsrs	r5, r5, #24
 800e318:	3d7f      	subs	r5, #127	@ 0x7f
 800e31a:	0007      	movs	r7, r0
 800e31c:	2d16      	cmp	r5, #22
 800e31e:	dc2c      	bgt.n	800e37a <floorf+0x6a>
 800e320:	0004      	movs	r4, r0
 800e322:	2d00      	cmp	r5, #0
 800e324:	da15      	bge.n	800e352 <floorf+0x42>
 800e326:	4919      	ldr	r1, [pc, #100]	@ (800e38c <floorf+0x7c>)
 800e328:	f7f2 f9fa 	bl	8000720 <__aeabi_fadd>
 800e32c:	2100      	movs	r1, #0
 800e32e:	f7f2 f8df 	bl	80004f0 <__aeabi_fcmpgt>
 800e332:	2800      	cmp	r0, #0
 800e334:	d00b      	beq.n	800e34e <floorf+0x3e>
 800e336:	2400      	movs	r4, #0
 800e338:	42a7      	cmp	r7, r4
 800e33a:	da08      	bge.n	800e34e <floorf+0x3e>
 800e33c:	1e73      	subs	r3, r6, #1
 800e33e:	419e      	sbcs	r6, r3
 800e340:	23fe      	movs	r3, #254	@ 0xfe
 800e342:	4274      	negs	r4, r6
 800e344:	059b      	lsls	r3, r3, #22
 800e346:	401c      	ands	r4, r3
 800e348:	2380      	movs	r3, #128	@ 0x80
 800e34a:	061b      	lsls	r3, r3, #24
 800e34c:	18e4      	adds	r4, r4, r3
 800e34e:	1c20      	adds	r0, r4, #0
 800e350:	e01a      	b.n	800e388 <floorf+0x78>
 800e352:	4e0f      	ldr	r6, [pc, #60]	@ (800e390 <floorf+0x80>)
 800e354:	412e      	asrs	r6, r5
 800e356:	4206      	tst	r6, r0
 800e358:	d016      	beq.n	800e388 <floorf+0x78>
 800e35a:	490c      	ldr	r1, [pc, #48]	@ (800e38c <floorf+0x7c>)
 800e35c:	f7f2 f9e0 	bl	8000720 <__aeabi_fadd>
 800e360:	2100      	movs	r1, #0
 800e362:	f7f2 f8c5 	bl	80004f0 <__aeabi_fcmpgt>
 800e366:	2800      	cmp	r0, #0
 800e368:	d0f1      	beq.n	800e34e <floorf+0x3e>
 800e36a:	2f00      	cmp	r7, #0
 800e36c:	da03      	bge.n	800e376 <floorf+0x66>
 800e36e:	2380      	movs	r3, #128	@ 0x80
 800e370:	041b      	lsls	r3, r3, #16
 800e372:	412b      	asrs	r3, r5
 800e374:	18fc      	adds	r4, r7, r3
 800e376:	43b4      	bics	r4, r6
 800e378:	e7e9      	b.n	800e34e <floorf+0x3e>
 800e37a:	23ff      	movs	r3, #255	@ 0xff
 800e37c:	05db      	lsls	r3, r3, #23
 800e37e:	429e      	cmp	r6, r3
 800e380:	d302      	bcc.n	800e388 <floorf+0x78>
 800e382:	1c01      	adds	r1, r0, #0
 800e384:	f7f2 f9cc 	bl	8000720 <__aeabi_fadd>
 800e388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e38a:	46c0      	nop			@ (mov r8, r8)
 800e38c:	7149f2ca 	.word	0x7149f2ca
 800e390:	007fffff 	.word	0x007fffff

0800e394 <_init>:
 800e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e396:	46c0      	nop			@ (mov r8, r8)
 800e398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e39a:	bc08      	pop	{r3}
 800e39c:	469e      	mov	lr, r3
 800e39e:	4770      	bx	lr

0800e3a0 <_fini>:
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a2:	46c0      	nop			@ (mov r8, r8)
 800e3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a6:	bc08      	pop	{r3}
 800e3a8:	469e      	mov	lr, r3
 800e3aa:	4770      	bx	lr
